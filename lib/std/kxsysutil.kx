# Utility of Fiber.

Fiber.create = _function(coroutine) {
    var this;
    this.isFiber = true;
    this.resume = _coroutine(...val) {
        return coroutine(...val);
    };
    this.isAlive = _function() {
        return System.isFiberAlive(this.resume);
    };
    return this;
};

# Utility of Signal.

Signal.SIGINT = 1;
Signal.SIGTERM = 2;
Signal.hook = System._globalSignalHookMap();
Signal.trap = _function(sig, func) {
    var id = -1;
    if (sig == 1) {
        id = Signal.hook.sigint.length();
        Signal.hook.sigint.push(func);
    } else if (sig == 2) {
        id = Signal.hook.sigterm.length();
        Signal.hook.sigterm.push(func);
    }
    return { id: id, sig: sig };
};
Signal.remove = _function(info) {
    if (info.sig == 1) {
        var sz = Signal.hook.sigint.length();
        if (0 <= info.id && info.id < sz) {
            Signal.hook.sigint[info.id] = null;
        }
    } else if (info.sig == 2) {
        var sz = Signal.hook.sigterm.length();
        if (0 <= info.id && info.id < sz) {
            Signal.hook.sigterm[info.id] = null;
        }
    }
};
System.setSignalHookFunction(_function() {
    var sz, hooks, done = 0;
    sz = Signal.hook.sigint.length();
    hooks = Signal.hook.sigint;
    while (System.getSigintCount()) {
        for (var i = 0; i < sz; ++i) {
            if (hooks[i].isFunction) {
                var r = hooks[i](Signal.SIGINT);
                if (r.isDefined && !r) return System.halt(); 
                done = 1;
            }
        }
    }
    sz = Signal.hook.sigterm.length();
    hooks = Signal.hook.sigterm;
    while (System.getSigtermCount()) {
        for (var i = 0; i < sz; ++i) {
            if (hooks[i].isFunction) {
                var r = hooks[i](Signal.SIGTERM);
                if (r.isDefined && !r) return System.halt(); 
                done = 1;
            }
        }
    }
    System.setSigtermEnded();
    if (!done) return System.halt();
    _ret_nv;
});

# Some Other Utilities.

$exepath = System.exepath();

System.try = _function(f) {
    try {
        var r = f();
        return {
            'else': _function() { return r; },
            'try': _function() { return System.try(_function() { return r; }); },
            'retry': _function() { return System.try(_function() { return r; }); },
        };
    } catch (e) {
        ;
    }
    return {
        'else': _function(expr) { return expr.isFunction ? expr() : expr; },
        'try': System.try,
        'retry': _function(count, wait) {
            System.sleep(wait);
            return count <= 1 ? System.try(f) : System.try(f).retry(count-1, wait);
        },
    };
};

_class _BooleanClass(tf) {
    @_False = @isFalse = !tf;
    @isTrue = tf;
    public toString() {
        return tf ? 'true' : 'false';
    }
}

# To use JSON.parse().
True = System._setTrueFalse(1, new _BooleanClass(true));
False = System._setTrueFalse(0, new _BooleanClass(false));

SystemTimer = {
    create: System.SystemTimer_create
};

# Clib is the library to use C program from Kinx.

Clib.setFunction = _function(name, kc, addr) {
    Clib.func ??= {};
    return Clib.func[name] = _function(...a) {
        return System.callCFunction(kc, addr, ...a);
    };
};

Clib.loadSharedLibrary =  System.loadSharedLibrary;
