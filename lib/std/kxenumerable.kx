
_class _IntegerRange(value_) {
    private initialize() {
        @value = value_;
    }
    public next() {
        return new _IntegerRange(@value + 1);
    }
    public comp(a) {
        return @value <=> a.value;
    }
}

_module _Enumerable {
    var host_ = this;
    var self_;
    var src_ = new Fiber(&() => host_.each());
    private getSelf() {
        if (!self_) {
            self_ = @keySet()
                .filter(&(e) => this[e].isFunction)
                .map(&(e) => [e, e == 'each' ? this._each : this[e]])
                .reduce(&(r, e) => {
                    r[e[0]] = e[1] || (_function(){});
                    return r;
                }, {});
        }
        return self_;
    }
    public filter(func) {
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    return;
                }
                if (func(v)) {
                    yield v;
                }
            }
        });
        return getSelf();
    }
    public map(func) {
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    return;
                }
                yield func(v);
            }
        });
        return getSelf();
    }
    public take(n) {
        var pf = src_;
        src_ = new Fiber(&{
            for (var i = 0; i < n; ++i) {
                yield pf.resume();
            }
        });
        return getSelf();
    }
    public _each(func) {
        var count = 0;
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            var r = func(v, count++);
            if (r.isDefined && !r) {
                return false;
            }
        }
    }
    public force() {
        var v;
        while (src_.isAlive()) {
            v = src_.resume();
        }
        return v;
    }
    public writeln() {
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            System.println(v);
        }
    }
    public all(func) {
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return true;
            }
            if (!func(v)) {
                break;
            }
        }
        return false;
    }
    public any(func) {
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            if (func(v)) {
                break;
            }
        }
        return true;
    }
    public reduce(func, initer) {
        var r = initer;
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                break;
            }
            r = func(r, v);
        }
        return r;
    }
}

_class _Enumerator(obj_) {
    var peek_, next_, isEnded_;
    private initialize() {
        if (obj_.isRange) {
            var f = new Fiber(&() => obj_.each());
            next_ = _function() {
                return f.resume();
            };
            isEnded_ = _function() {
                return !f.isAlive();
            };
            peek_ = _function() {
                if (obj_.isEnded()) {
                    throw StopIterationException("Enumerator has been ended");
                }
                return obj_.next();
            };
        } else if (obj_.isArray) {
            var i = 0, sz = obj_.length();
            next_ = _function() {
                return i < sz ? obj_[i++] : i++;
            };
            isEnded_ = _function() {
                return sz < i;
            };
            peek_ = _function() {
                if (sz <= i) {
                    throw StopIterationException("Enumerator has been ended");
                }
                return obj_[i];
            };
        }
    }
    public peek() {
        return peek_();
    }
    public next() {
        return next_();
    }
    public isEnded() {
        return isEnded_();
    }
}

_class _Range(start_, end_, includingEnd_) {
    mixin _Enumerable;
    @isRange = true;
    var cur_;
    private initialize() {
        if (start_.isInteger) {
            start_ = new _IntegerRange(start_);
        }
        if (end_.isInteger) {
            end_ = new _IntegerRange(includingEnd_ ? end_ : (end_-1));
        }
        cur_ = start_;
    }
    public isEnded() {
        return end_ && cur_.comp(end_) == 0;
    }
    public next() {
        var v = cur_.next();
        return v.value;
    }
    public each() {
        while (true) {
            yield cur_.value;
            if (end_ && cur_.comp(end_) == 0) {
                return false;
            }
            cur_ = cur_.next();
        }
    }
}

