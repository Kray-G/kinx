
_module _Enumerable {
    var host_ = this;
    var enumerator_, lazy_;
    var src_ = new Fiber(&() => host_.each());
    private genEnumerator() {
        if (!enumerator_) {
            enumerator_ = @keySet()
                .filter(&(e) => this[e].isFunction)
                .map(&(e) => [e, e == 'each' ? this._each : this[e]])
                .reduce(&(r, e) => {
                    r[e[0]] = e[1] || (_function(){});
                    return r;
                }, {});
        }
        return enumerator_;
    }
    public lazy() {
        lazy_ = true;
        return this;
    }
    public _each(func) {
        if (!lazy_) {
            return host_.each(func);
        }
        var count = 0;
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            var r = func(v, count++);
            if (r.isDefined && !r) {
                return false;
            }
        }
    }
    private getTake(pf, n) {
        var r = [];
        while (pf.isAlive()) {
            var v = pf.resume();
            if (!pf.isAlive()) {
                break;
            }
            r.push(v);
            if (r.length() >= n) {
                break;
            }
        }
        return r;
    }
    private getTakeWhile(pf, func) {
        var r = [];
        while (pf.isAlive()) {
            var v = pf.resume();
            if (!pf.isAlive()) {
                break;
            }
            if (!func(v)) {
                break;
            }
            r.push(v);
        }
        return r;
    }
    private getDrop(pf, n) {
        var r = [], i = 0, f = false;
        while (pf.isAlive()) {
            var v = pf.resume();
            if (!pf.isAlive()) {
                break;
            }
            if (f) {
                r.push(v);
            } else if (++i > n) {
                r.push(v);
                f = true;
            }
        }
        return r;
    }
    private getDropWhile(pf, func) {
        var r = [], f = false;
        while (pf.isAlive()) {
            var v = pf.resume();
            if (!pf.isAlive()) {
                break;
            }
            if (f) {
                r.push(v);
            } else if (!func(v)) {
                r.push(v);
                f = true;
            }
        }
        return r;
    }
    private getAllElements(pf) {
        var r = [];
        while (pf.isAlive()) {
            var v = pf.resume();
            if (!pf.isAlive()) {
                break;
            }
            r.push(v);
        }
        return r;
    }
    public filter(func) {
        if (!lazy_) {
            var r = getAllElements(src_);
            return r.filter(func);
        }
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    return;
                }
                if (func(v)) {
                    yield v;
                }
            }
        });
        return genEnumerator();
    }
    public reject(func) {
        if (!lazy_) {
            var r = getAllElements(src_);
            return r.reject(func);
        }
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    return;
                }
                if (!func(v)) {
                    yield v;
                }
            }
        });
        return genEnumerator();
    }
    public map(func) {
        if (!lazy_) {
            var r = getAllElements(src_);
            return r.map(func);
        }
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    return;
                }
                yield func(v);
            }
        });
        return genEnumerator();
    }
    public flatMap(func) {
        if (!lazy_) {
            var r = getAllElements(src_);
            return r.map(func).flatten();
        }
        var pf = src_;
        src_ = new Fiber(&{
            var r = [];
            while (pf.isAlive() || r.length() > 0) {
                if (r.length() > 0) {
                    yield r.shift();
                } else {
                    var v = pf.resume();
                    if (!pf.isAlive()) {
                        return;
                    }
                    v = func(v);
                    if (v.isArray) {
                        v = v.flatten();
                        v.each(&(e) => r.push(e));
                    } else {
                        yield v;
                    }
                }
            }
        });
        return genEnumerator();
    }
    public take(n) {
        if (!lazy_) {
            return getTake(src_, n);
        }
        var pf = src_;
        src_ = new Fiber(&{
            for (var i = 0; i < n && pf.isAlive(); ++i) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
                yield v;
            }
        });
        return genEnumerator();
    }
    public takeWhile(func) {
        if (!lazy_) {
            return getTakeWhile(src_, func);
        }
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
                if (!func(v)) {
                    return;
                }
                yield v;
            }
        });
        return genEnumerator();
    }
    public drop(n) {
        if (!lazy_) {
            return getDrop(src_, n);
        }
        var pf = src_;
        src_ = new Fiber(&{
            for (var i = 0; i < n && pf.isAlive(); ++i) {
                pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
            }
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
                yield v;
            }
        });
        return genEnumerator();
    }
    public dropWhile(func) {
        if (!lazy_) {
            return getDropWhile(src_, func);
        }
        var pf = src_;
        src_ = new Fiber(&{
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
                if (!func(v)) {
                    yield v;
                    break;
                }
            }
            while (pf.isAlive()) {
                var v = pf.resume();
                if (!pf.isAlive()) {
                    break;
                }
                yield v;
            }
        });
        return genEnumerator();
    }
    public reduce(func, initer) {
        var r = initer;
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                break;
            }
            r = func(r, v);
        }
        return r;
    }
    public sort(func) {
        if (host_.end().isUndefined) {
            throw FiberException("Cannot complete the iteration");
        }
        var r = [];
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                break;
            }
            r.push(v);
        }
        return r.sort(func);
    }
    public all(func) {
        if (host_.end().isUndefined) {
            throw FiberException("Cannot complete the iteration");
        }
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return true;
            }
            if (!func(v)) {
                break;
            }
        }
        return false;
    }
    public any(func) {
        if (host_.end().isUndefined) {
            throw FiberException("Cannot complete the iteration");
        }
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            if (func(v)) {
                break;
            }
        }
        return true;
    }
    public toArray() {
        if (host_.end().isUndefined) {
            throw FiberException("Cannot complete the iteration");
        }
        var r = [];
        while (src_.isAlive()) {
            v = src_.resume();
            if (!src_.isAlive()) {
                break;
            }
            r.push(v);
        }
        return r;
    }
    public println() {
        while (src_.isAlive()) {
            var v = src_.resume();
            if (!src_.isAlive()) {
                return false;
            }
            System.println(v);
        }
    }
}

_class _RangeEnumerator(obj_) {
    var f_;
    private initialize() {
        f_ = new Fiber(&() => obj_.each());
    }
    public peek() {
        if (obj_.isEnded()) {
            throw StopIterationException("Enumerator has been ended");
        }
        return obj_.next();
    }
    public next() {
        return f_.resume();
    }
    public isEnded() {
        return !f_.isAlive();
    }
}

_class _ArrayEnumerator(obj_) {
    var i_, sz_;
    private initialize() {
        i_ = 0;
        sz_ = obj_.length();
    }
    public peek() {
        if (sz_ <= i_) {
            throw StopIterationException("Enumerator has been ended");
        }
        return obj_[i_];
    }
    public next() {
        return i_ < sz_ ? obj_[i_++] : i_++;
    }
    public isEnded() {
        return sz_ < i_;
    }
}

_class _ObjectEnumerator(obj_) {
    var ary_, i_, sz_;
    private initialize() {
        ary_ = obj_.keySet();
        sz_ = ary_.length();
        i_ = 0;
    }
    public peek() {
        if (sz_ <= i_) {
            throw StopIterationException("Enumerator has been ended");
        }
        var key = ary_[i_];
        var value = obj_[key];
        return [key, value];
    }
    public next() {
        if (i_ < sz_) {
            var key = ary_[i_++];
            var value = obj_[key];
            return [key, value];
        }
        ++i_;
    }
    public isEnded() {
        return sz_ < i_;
    }
}

_class _Enumerator(obj_) {
    mixin _Enumerable;
    var enumerator_;
    private initialize() {
        if (obj_.enumerator.isFunction) {
            enumerator_ = obj_.enumerator();
        } else if (obj_.isArray) {
            enumerator_ = new _ArrayEnumerator(obj_);
        } else if (obj_.isObject) {
            enumerator_ = new _ObjectEnumerator(obj_);
        } else {
            throw SystemException("Cannot create Enumerator");
        }
    }
    public peek() {
        return enumerator_.peek();
    }
    public next() {
        return enumerator_.next();
    }
    public isEnded() {
        return enumerator_.isEnded();
    }
    private eachByFunction(func) {
        while (true) {
            var n = enumerator_.next();
            if (enumerator_.isEnded()) {
                break;
            }
            func(n);
        }
    }
    public each(func) {
        if (func.isFunction) {
            return eachByFunction(func);
        }
        while (true) {
            var v = enumerator_.next();
            if (enumerator_.isEnded()) {
                break;
            }
            yield v;
        }
    }
}

_class _Range(start_, end_, excludeEnd_) {
    mixin _Enumerable;
    @isRange = true;
    var cur_;
    private initialize() {
        cur_ = start_;
    }
    public enumerator() {
        return new _RangeEnumerator(@lazy());
    }
    public begin() {
        return start_;
    }
    public end() {
        return end_;
    }
    public isEndExcluded() {
        return excludeEnd_;
    }
    public next() {
        return cur_.next();
    }
    private eachByFunction(func) {
        if (@array) {
            var i = 0;
            var sz = @array.length();
            while (i < sz) {
                var r = func(@array[i], i);
                if (r.isDefined && !r) {
                    break;
                }
                ++i;
            }
            return i;
        }
        var i = 0;
        while (true) {
            if (end_ && excludeEnd_ && (cur_ <=> end_) == 0) {
                break;
            }
            var r = func(cur_.value, i);
            if (r.isDefined && !r) {
                break;
            }
            if (end_ && !excludeEnd_ && (cur_ <=> end_) == 0) {
                break;
            }
            cur_ = cur_.next();
            ++i;
        }
        return i;
    }
    public each(func) {
        if (!start_) {
            throw FiberException("Cannot iterate the range because of no start value");
        }
        if (start_ && end_) {
            if (excludeEnd_ && ((start_ <=> end_) >= 0)) {
                return false;
            }
            if (!excludeEnd_ && ((start_ <=> end_) > 0)) {
                return false;
            }
        }
        if (func.isFunction) {
            return eachByFunction(func);
        }
        if (@array) {
            @array.each(&(e) => {
                yield e;
            });
            return false;
        }
        while (true) {
            if (end_ && excludeEnd_) {
                if ((cur_ <=> end_) >= 0) {
                    return false;
                }
            }
            yield cur_;
            if (end_ && !excludeEnd_) {
                if ((cur_ <=> end_) >= 0) {
                    return false;
                }
            }
            cur_ = cur_.next();
        }
    }
    public ==(rhs) {
        if ((start_ <=> rhs) > 0) {
            return false;
        }
        if (excludeEnd_) {
            if ((end_ <=> rhs) <= 0) {
                return false;
            }
        } else {
            if ((end_ <=> rhs) < 0) {
                return false;
            }
        }
        return true;
    }
    public [](rhs) {
        if (!@array) {
            @array = @toArray();
        }
        return @array[rhs];
    }
}
