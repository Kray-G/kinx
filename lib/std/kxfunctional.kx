// Fiber -> Fiber
_function _functional_pipe2_ff(f1, f2) {
    return new Fiber(_function(a) {
        f1.reset();
        while (true) {
            var r1 = f1.resume(a);
            if (!f1.isAlive()) {
                break;
            }
            f2.reset();
            while (true) {
                // all items are passed to the next fiber one by one.
                var r = f2.resume(r1);
                if (!f2.isAlive()) {
                    break;
                }
                // passing the value to the next one by one.
                yield r;
            }
        }
    });
}

// Fiber -> function
_function _functional_pipe2_f1(f1, f2) {
    return _function(a) {
        var r;
        f1.reset();
        while (true) {
            var r1 = f1.resume(a);
            if (!f1.isAlive()) {
                break;
            }
            // all items are passed to the next function.
            r = f2(r1);
        }
        return r;
    };
}

// function -> Fiber
_function _functional_pipe2_f2(f1, f2) {
    return new Fiber(_function(a) {
        var r1 = (!f1.isFunction && !f1.().isFunction) ? f1 : f1(a);
        f2.reset();
        while (true) {
            // the same value is passed until the end of the next fiber.
            var r = f2.resume(r1);
            if (!f2.isAlive()) {
                break;
            }
            // passing the value to the next one by one.
            yield r;
        }
    });
}

// Checking a combination.
__functional_pipe2 = _function(f1, f2) {
    // with Fiber
    if (f1.isFiber && f2.isFiber) {
        return _functional_pipe2_ff(f1, f2);
    }
    if (f1.isFiber) {
        return _functional_pipe2_f1(f1, f2);
    }
    if (f2.isFiber) {
        return _functional_pipe2_f2(f1, f2);
    }
    // value -> function
    if (!f1.isFunction && !f1.().isFunction) {
        return _function(a) { return f2(f1); };
    }
    // function -> function
    return _function(a) { return f2(f1(a)); };
};

__functional_compose2 = _function(f1, f2) {
    return _functional_pipe2(f2, f1);
};

_function _functional_enumerator(e) {
    if (e.isFunction) {
        return _function() {
            return { value: e(), done: false };
        };
    }
    if (e.isFiber) {
        e.reset();
        return _function() {
            const value = e.resume();
            if (e.isAlive()) {
                return { value: value, done: false };
            }
            return { done: true };
        };
    }
    if (e.enumerator.isFunction || e.isFile || e.isArray || e.isObject) {
        var enumerator = new Enumerator(e);
        return _function() {
            const value = enumerator.next();
            if (!enumerator.isEnded()) {
                return { value: value, done: false };
            }
            return { done: true };
        };
    }
    var count = 0;
    return _function() {
        if (count++ == 0) {
            return { value: e, done: false };
        }
        return { done: true };
    };
}

var _Functional = {};
_Functional.methodMissing = _function(instance, method, ...a) {
    instance[method] = _function(...args) {
        return _function(obj) {
            return obj[method](...args);
        };
    };
    return instance[method](...a);
};

// The methods in Array such as `map` have to be assigned to Functional object
//  because Array.map will have been called directly instead of Functional.map
//  and methodMissing will not be called.
Array.keySet(Array).filter(_function(a) {return Array[a].isFunction; }).each(_function(method) {
    _Functional[method] = _function(...args) {
        return _function(obj) {
            return obj[method](...args);
        };
    };
});

_Functional.enumerable
    = _Functional.Enumerator.create
    = _functional_enumerator
    ;

_function _gen_functional_use(f) {
    f.use = _function(method, opts) {
        if (f[method].isUndefined) {
            if (opts.argument.isDefined && opts.argument) {
                f[method] = _function(...args) {
                    return _function(obj) {
                        return obj[method](...args);
                    };
                };
            } else {
                f[method] = _function(obj) {
                    return obj[method]();
                };
            }
        }
    };
    return f;
}

_Functional.create = _function() {
    return _gen_functional_use(
        Array.keySet(_Functional)
            .reduce(_function(r, e) {
                r[e] = _Functional[e];
                return r;
            }, {})
    );
};
