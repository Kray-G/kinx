// Fiber -> Fiber
_function _functional_pipe2_ff(f1, f2) {
    return new Fiber(_function(a) {
        f1.reset();
        while (true) {
            var r1 = f1.resume(a);
            if (!f1.isAlive()) {
                break;
            }
            f2.reset();
            while (true) {
                // all items are passed to the next fiber one by one.
                var r = f2.resume(r1);
                if (!f2.isAlive()) {
                    break;
                }
                // passing the value to the next one by one.
                yield r;
            }
        }
    });
}

// Fiber -> function
_function _functional_pipe2_f1(f1, f2) {
    return _function(a) {
        var r;
        f1.reset();
        while (true) {
            var r1 = f1.resume(a);
            if (!f1.isAlive()) {
                break;
            }
            // all items are passed to the next function.
            r = f2(r1);
        }
        return r;
    };
}

// function -> Fiber
_function _functional_pipe2_f2(f1, f2) {
    return new Fiber(_function(a) {
        var r1 = (!f1.isFunction && !f1.().isFunction) ? f1 : f1(a);
        f2.reset();
        while (true) {
            // the same value is passed until the end of the next fiber.
            var r = f2.resume(r1);
            if (!f2.isAlive()) {
                break;
            }
            // passing the value to the next one by one.
            yield r;
        }
    });
}

// Checking a combination.
_functional_pipe2 = _function(f1, f2) {
    // with Fiber
    if (f1.isFiber && f2.isFiber) {
        return _functional_pipe2_ff(f1, f2);
    }
    if (f1.isFiber) {
        return _functional_pipe2_f1(f1, f2);
    }
    if (f2.isFiber) {
        return _functional_pipe2_f2(f1, f2);
    }
    // value -> function
    if (!f1.isFunction && !f1.().isFunction) {
        return _function(a) { return f2(f1); };
    }
    // function -> function
    return _function(a) { return f2(f1(a)); };
};

_functional_compose2 = _function(f1, f2) {
    return _functional_pipe2(f2, f1);
};
