namespace Typesetting {

    const TOO_BIG_SPACE = 6553600.0;
    var hyphenPenalty_ = Hypher.hyphenPenalty_;
    var Linebreak = Typesetting.Linebreak;
    var Word = Typesetting.Word;

    namespace ProcessDoc {

        class Paragraph(info_, context_, util_) {

            var measureWidth_;

            private setLineInfo(lines) {
                var totalLineFeedWidth = 0;
                var totalHeight = 0;
                var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
                var paragraphSkipWidth = context_.page.paragraphSkipWidth;
                var llast = lines.length() - 1;
                if (llast >= 0) {
                    lines[-1].lineFeedWidth = context_.page.paragraphSkipWidth; 
                    totalLineFeedWidth += context_.page.paragraphSkipWidth;
                }
                var prevBreak;
                lines.each { &(line, li):
                    var lineFeedWidth = prevBreak ? paragraphSkipWidth : 0;
                    prevBreak = false;
                    var maxHeight = 0;
                    var alen = line.nodes.length();
                    var alast = alen - 1;
                    line.nodes.each { &(n, i):
                        var value = n.value;
                        var word = value ? value.word : '';
                        if (n.isBox) {
                            var lfs;
                            if (value.isImage) {
                                lfs = value.lineFeedWidth;
                                prevBreak = true;
                            } else if (value.isInlineImage) {
                                lfs = value.getHeight();
                            } else if (word != '') {
                                lfs = lineFeedWidthRatio * value.size;
                            }
                            if (lineFeedWidth < lfs) {
                                lineFeedWidth = lfs;
                            }
                        } else if (n.isGlue && i != alast) {
                            if (n.stretch == Linebreak.Infinity) {
                                prevBreak = true;
                                line.endParagraph = true;
                            }
                        }
                        var height = value.getHeight.isFunction ? value.getHeight() : 0;
                        if (maxHeight < height) {
                            maxHeight = height;
                        }
                    };
                    if (li > 0) {
                        lines[li-1].lineFeedWidth = lineFeedWidth;
                        totalLineFeedWidth += lineFeedWidth;
                    }
                    line.height = maxHeight;
                    totalHeight += maxHeight;
                };
                var baseLineFeedWidthRatio = lineFeedWidthRatio * context_.font.fontSize;
                var diffHeight = baseLineFeedWidthRatio - lines[0].height;
                if (diffHeight < 0) {
                    lines[0].diffHeight = diffHeight;
                    totalLineFeedWidth -= diffHeight;
                }
                lines[0].totalLineFeedWidth = totalLineFeedWidth;
                lines[0].totalHeight = totalHeight;
            }

            private adjustLines(lines, doJustification) {
                doJustification ??= true;
                lines.each { &(line, li):
                    var x1 = 0.0;
                    var spaces = 0;
                    var expected = line.width;
                    var alen = line.nodes.length();
                    var alast = alen - 1;
                    var end;
                    line.nodes.each { &(n, i):
                        var value = n.value;
                        var word = value ? value.word : '';
                        if (n.isBox && word != '') {
                            x1 += n.width;
                        } else if (n.isBox && word == '') {
                            # indent.
                            x1 += n.width;
                        } else if (n.isGlue && i != alast) {
                            if (n.stretch == Linebreak.Infinity) {
                                end = n;
                            } else {
                                x1 += n.width;
                                if (n.stretch > 0 || n.shrink > 0) {
                                    ++spaces;
                                }
                            }
                        } else if (n.isGlue) {
                            # ignore.
                        } else if (n.isPenalty && n.penalty == hyphenPenalty_ && i == alast) {
                            x1 += n.width;
                        }
                    };
                    var prev;
                    var diff = doJustification && spaces > 0 ? ((expected - x1) / spaces) : 0;
                    if (end && diff >= 0) {
                        line.totalWidth = x1;
                        end.width += diff;
                    } else {
                        line.totalWidth = expected;
                    }
                    x1 = 0.0;
                    line.nodes.each(function(n, i) {
                        var d = line.totalWidth != expected ? 0 : diff;
                        var value = n.value;
                        var word = value ? value.word : '';
                        if (n.isBox && word != '') {
                            value.x = x1;
                            x1 += n.width;
                        } else if (n.isBox && word == '') {
                            x1 += n.width;
                        } else if (n.isGlue && i != alast) {
                            if (n.stretch > 0 || n.shrink > 0) {
                                n.width += d;
                            }
                            x1 += n.width;
                        } else if (n.isGlue) {
                            n.width = 0.0;
                        } else if (n.isPenalty && n.penalty == hyphenPenalty_ && i == alast) {
                            value.x = x1;
                            n.value.word = (prev.isDefined && prev.isBox && prev.value.word[-1] != '-'[0]) ? "-" : "";
                            x1 += n.width;
                        } else {
                            n.width = 0.0;
                        }
                        prev = n;
                    });
                };
            }

            private processWordSet(opts, wordSet, fontObj, fontSize, areaWidth, settings) {
                if (!areaWidth.isArray) {
                    areaWidth = [areaWidth];
                }
                var words = wordSet.flatten();
                var nodes = [];
                if (!context_.noIndent && !context_.outputSection && !opts.noIndent) {
                    nodes.push(Linebreak.Box(context_.indentSize, new Word(info_).setWord(fontObj, fontSize, '')));
                }
                if (settings.preText) {
                    var textWidth = info_.measure.textWidth(fontObj, fontSize, settings.preText);
                    nodes.push(Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, settings.preText)));
                    if (settings.preTextSpace) {
                        var width = settings.preTextSpace;
                        var stretch = (fontSize * 3) / 6;
                        var shrink = (fontSize * 3) / 9;
                        nodes.push(Linebreak.Glue(width, stretch, shrink));
                    }
                }
                Typesetting.insertGlue.ja(info_, Linebreak, words, nodes);
                if (measureWidth_) {
                    return [{ nodes: nodes }];
                }
                if (nodes[-1].isGlue) {
                    nodes.pop();
                }
                nodes.push(Linebreak.Glue(0, Linebreak.Infinity, 0));
                nodes.push(Linebreak.Penalty(0, -Linebreak.Infinity, 1));
                # System.println("===");
                # nodes.each { => System.println(_1) };
                # System.println("---");
                var breaks;
                for (var i = 1; i < 10; ++i) {
                    breaks = new Linebreak(nodes, areaWidth, { tolerance: i }).parse();
                    if (breaks.length() > 0) {
                        break;
                    }
                }

                var areaWidthLen = areaWidth.length();
                var lines = [];
                if (breaks.length() == 0) {
                    info_.logger.warn("No breaks... " + lines.length());
                    # System.println("===");
                    # nodes.each { => _1.display() };
                    # System.println("---");
                    var currentWidth, ci = 0;
                    var spaceWidth = info_.measure.spaceWidth(fontObj, fontSize);
                    var nl = nodes.length();
                    var ns = [];
                    var x = 0.0, i;
                    for (i = 0; i < nl; ++i) {
                        currentWidth = ci < areaWidthLen ? areaWidth[ci] : areaWidth[-1];
                        var n = nodes[i];
                        x += n.width;
                        if (x < currentWidth) {
                            ns.push(n);
                        } else {
                            lines.push({
                                ratio: 0,
                                nodes: ns,
                                position: 0,
                                width: currentWidth,
                                lineFeedWidth: 0,
                            });
                            ns = [];
                            ns.push(n);
                            x = n.width;
                            ++ci;
                        }
                    }
                    if (ns.length() > 0) {
                        currentWidth = ci < areaWidthLen ? areaWidth[ci] : areaWidth[-1];
                        lines.push({
                            ratio: 0,
                            nodes: ns,
                            position: 0,
                            width: currentWidth,
                            lineFeedWidth: 0,
                        });
                    }
                } else {
                    var lineStart = 0, ls = 0;
                    for (var i = 1, blen = breaks.length(); i < blen; ++i) {
                        var point = breaks[i].position;
                        var r = breaks[i].ratio;
                        for (var j = lineStart, nlen = nodes.length(); j < nlen; ++j) {
                            # After a line break, we skip any nodes unless they are boxes or forced breaks.
                            if (nodes[j].isBox || (nodes[j].isPenalty && nodes[j].penalty == -Linebreak.Infinity)) {
                                lineStart = j;
                                break;
                            }
                        }
                        lines.push({
                            ratio: r,
                            nodes: nodes.subArray(lineStart, point + 1 - lineStart),
                            position: point,
                            width: ls < areaWidthLen ? areaWidth[ls] : areaWidth[-1],
                            lineFeedWidth: 0,
                        });
                        lineStart = point;
                        ++ls;
                    }
                }
                if (opts.label.isBox) {
                    lines[0].nodes.unshift(opts.label);
                }
                setLineInfo(lines);
                adjustLines(lines);
                lines[0].hasFloatingImage = areaWidthLen > 1;
                return lines;
            }

            public exec(opts, text, settings) {
                [opts, text] = util_.makeOption(opts, text, false);
                if (!text) {
                    return [];
                }

                measureWidth_ = opts.measureWidth;
                if (measureWidth_) {
                    opts.areaWidth = TOO_BIG_SPACE;
                }

                if (text.startsWith("\\noindent{}")) {
                    text = text.subString("\\noindent{}".length());
                    opts.noIndent = true;
                }
                var wordSet = info_.paragraphParser.parse(text);
                if (context_.footnotes.length() > 0) {
                    var margin = info_.writer.getMargin();
                    margin.left = margin.left + info_.base.footnote.left;
                    info_.writer.setMargin(margin);
                    var marginSize = info_.writer.makeMarginSize();
                    var fontSize = info_.base.footnote.fontSize;
                    var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
                    context_.page.lineFeedWidthRatio = info_.base.footnote.lineFeedWidthRatio;
                    var paragraphSkipWidth = context_.page.paragraphSkipWidth;
                    context_.page.paragraphSkipWidth = info_.base.footnote.lineFeedWidthRatio * fontSize;
                    var indent = context_.noIndent;
                    context_.noIndent = true;
                    context_.footnotes.each { &(wordSet):
                        var number = wordSet.footnoteNumber;
                        var lines = processWordSet({}, wordSet, context_.font.fontObj, fontSize, [marginSize.width], settings);
                        var lineFeedWidth = lines.reduce { &(r, e) => r + e.lineFeedWidth };
                        info_.writer.addFootnote({
                            number: number,
                            lines: lines,
                            lineFeedWidth: lineFeedWidth,
                        });
                    };
                    context_.noIndent = indent;
                    context_.page.paragraphSkipWidth = paragraphSkipWidth;
                    context_.page.lineFeedWidthRatio = lineFeedWidthRatio;
                    context_.footnotes = [];
                }

                var margin = util_.makeMargin(opts);
                info_.writer.setMargin(margin);
                var areaWidth = opts.areaWidth ?? info_.writer.getAreaWidth();
                var lines = processWordSet(opts, wordSet, context_.font.fontObj, context_.font.fontSize, areaWidth, settings);
                return lines;
            }

        }

    } # namespace ProcessDoc

} # namespace Typesetting
