namespace Typesetting {

    const TOO_BIG_SPACE = 6553600.0;
    var hyphenPenalty_ = Hypher.hyphenPenalty_;
    var Linebreak = Typesetting.Linebreak;
    var Word = Typesetting.Word;

    namespace ProcessDoc {

        class DocumentUtil(info_, context_) {

            var defs_ = [];
            var opts_;
            var dotWidth_;

            public add(name, value) {
                defs_.unshift({
                    regex: new Regex("\\\\" + name + "\\b"),
                    value: value,
                });
            }

            public setOpts(opts) {
                opts_ = opts;
            }

            public makeOption(opts, text, replaceText) {
                if (text.isUndefined && opts.isString) {
                    text = opts;
                    opts = null;
                }
                if (opts_ && !opts.isObject) {
                    opts = opts_;
                }
                if (text && (replaceText.isUndefined || replaceText)) {
                    defs_.each {
                        text = text.replace(_1.regex, _1.value);
                    };
                }
                return [opts, text];
            }

            public makeSectionNumber(level) {
                var sectionNumber = context_.counter.section[level] ?? 0;
                if (level == 1 && context_.appendix && !sectionNumber.isString) {
                    sectionNumber = 0;
                }
                var numText = [];
                if (context_.check) {
                    for (var i = 1, l = context_.counter.section.length(); i < l; ++i) {
                        if (i <= level) {
                            numText.push(context_.counter.section[i]);
                        }
                    }
                } else {
                    if (level == 1 && context_.appendix) {
                        context_.counter.section[level] = sectionNumber.isString ? sectionNumber.next() : info_.base.toc.appendixFormat;
                    } else {
                        context_.counter.section[level] = ++sectionNumber;
                    }
                    var newNumbers = [];
                    for (var i = 1, l = context_.counter.section.length(); i < l; ++i) {
                        if (i <= level) {
                            newNumbers[i] = context_.counter.section[i];
                            numText.push(newNumbers[i]);
                        } else {
                            newNumbers[i] = 0;
                        }
                    }
                    context_.counter.section = newNumbers;
                }
                
                return numText;
            }

            public makeMargin(opts) {
                var margin = info_.writer.getPageMargin().clone();
                if (opts.margin.left) {
                    margin.left = opts.margin.left;
                }
                if (opts.margin.right) {
                    margin.right = opts.margin.right;
                }
                return margin;
            }

            public write(lines, align, opts) {
                if (lines.length() == 0) {
                    return;
                }
                var writer = info_.writer;
                var width = lines[0].width;
                var isFloatingLine = lines[0].hasFloatingImage;
                var fontObj = context_.font.fontObj;
                var fontSize = context_.font.fontSize;

                var paras = [];
                var start = 0;
                var linel = lines.length();
                var lastl = linel - 1;
                for (var i = 0; i < linel; ++i) {
                    if (lines[i].endParagraph) {
                        var next = i + 1;
                        paras.push([start, next]);
                        start = next;
                    }
                }
                paras.push([start, linel]) if (start != linel);
                var lineFeedWidth = lines[0].lineFeedWidth;
                var widowCheckDone = false;
                paras.each { &([start, end], pi):
                    var pos = writer.getPositionBase();
                    var y = pos.y;
                    var bottom = pos.bottom + lineFeedWidth;
                    var widowCheck = end - info_.base.widowPenalty;
                    var doColumnBreak = false;
                    if (!widowCheckDone && y > 0 && widowCheck > start) {
                        for (var i = start; i < widowCheck; ++i) {
                            y -= lines[i].lineFeedWidth;
                        }
                        for (var i = widowCheck; i < end; ++i) {
                            y -= lines[i].lineFeedWidth;
                            if (y < bottom) {
                                doColumnBreak = true;
                                break;
                            }
                        }
                    }
                    --widowCheck;
                    for (var i = start; i < end; ++i) {
                        var line = lines[i];
                        if (line.width != width) {
                            isFloatingLine = false;
                        }
                        if (doColumnBreak && widowCheck == i) {
                            writer.columnBreak();
                            widowCheckDone = true;
                        }
                        if (align.center || align.right) {
                            x = writer.getPos().x;
                            var offsetX = 0;
                            if (line.totalWidth != line.width) {
                                if (align.center) {
                                    offsetX = (line.width - line.totalWidth) / 2;
                                } else if (align.right) {
                                    offsetX = line.width - line.totalWidth;
                                }
                            }
                            line.nodes.each { &(n):
                                n.write(writer, x + offsetX, null, isFloatingLine, align);
                                x += n.width;
                            };
                        } else {
                            line.nodes.each { &(n):
                                if (n.write.isFunction) {
                                    n.write(writer, null, null, isFloatingLine);
                                }
                             };
                        }

                        if (opts.vline.isArray) {
                            var linetop1 = writer.getLineTop(fontObj, fontSize);
                            var height = line.lineFeedWidth;
                            var lastv = opts.vline.length() - 1;
                            opts.vline.each { &(v, vi):
                                if (vi == lastv && i == lastl && opts.endBlockquote) {
                                    var descent = (fontObj.getDescent() / 1000) * fontSize;
                                    height = fontSize - descent;
                                }
                                writer.drawLine(v, linetop1, 0, height + 2, info_.base.blockquote.lineWidth, info_.base.blockquote.lineColor, -1);
                            };
                        }

                        var colBreaked = writer.lineBreak(line.lineFeedWidth);
                        if (colBreaked) {
                            doColumnBreak = false;
                        }
                        lineFeedWidth = lines[end-1].lineFeedWidth;
                    }
                };

            }

            public writeLeft(opts, text, fontObj, fontSize, lineFeedWidth) {
                var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
                var writer = info_.writer;
                var margin = writer.makeMarginSize();
                var x = margin.left;
                var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
                writer.write(n, x);
                writer.lineBreak(lineFeedWidth);
                writer.setYHead();
            }

            public writeRight(opts, text, fontObj, fontSize, lineFeedWidth) {
                var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
                var writer = info_.writer;
                var margin = writer.makeMarginSize();
                var x = margin.pageWidth - margin.right - textWidth;
                var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
                writer.write(n, x);
                writer.lineBreak(lineFeedWidth);
                writer.setYHead();
            }

            public writeCenter(opts, text, fontObj, fontSize, lineFeedWidth) {
                var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
                var writer = info_.writer;
                var margin = writer.makeMarginSize();
                var x = (margin.width - textWidth) / 2 + margin.left;
                var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
                writer.write(n, x);
                writer.lineBreak(lineFeedWidth);
                writer.setYHead();
            }

            public writeLine(opts, text, fontObj, fontSize, lineFeedWidth) {
                var writer = info_.writer;
                var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
                var margin = writer.makeMarginSize();
                var x = opts.margin.left ?? margin.left;
                var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
                writer.write(n, x);
                writer.lineBreak(lineFeedWidth);
            }

            public writeX(x, text, fontObj, fontSize) {
                var writer = info_.writer;
                var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
                var margin = writer.makeMarginSize();
                var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
                writer.write(n, x);
            }

            public writeTocLine(lines, y, pageNumber, fontObj, fontSize, withoutLeadDot) {
                if (lines.length() == 0) {
                    return;
                }
                var writer = info_.writer;
                var margin = writer.makeMarginSize();
                if (dotWidth_.isUndefined) {
                    dotWidth_ = info_.measure.textWidth(fontObj, fontSize, ".") * 2;
                }
                var ll = lines.length();
                for (var i = 0, ll = lines.length(); i < ll; ++i) {
                    var line = lines[i];
                    line.nodes.each { &(n):
                        if (!n.isGlue || n.stretch != Linebreak.Infinity) {
                            n.write(writer);
                        }
                    };
                    var num = "" + pageNumber;
                    var numw = info_.measure.textWidth(fontObj, fontSize, num);
                    var pagenumWidth = info_.measure.textWidth(fontObj, fontSize, '999');
                    var pageRight = margin.pageWidth - margin.right;
                    var right = pageRight - numw;
                    if (!withoutLeadDot) {
                        var limitRight = pageRight - pagenumWidth;
                        var pos = writer.getPos();
                        var x = pos.x + dotWidth_;
                        x += (limitRight - x) % dotWidth_;
                        var dot = Linebreak.Box(dotWidth_, new Word(info_).setWord(fontObj, fontSize, "."));
                        var limit = limitRight - dotWidth_;
                        while (x < limit) {
                            writer.write(dot, x);
                            x += dotWidth_;
                        }
                    }
                    num = new Word(info_).setWord(fontObj, fontSize, num);
                    num.startAnnot = true;
                    num.endAnnot = true;
                    num.annotPage = pageNumber;
                    num.annotPos = { y: y };
                    num = Linebreak.Box(numw, num);
                    writer.write(num, right);
                    writer.lineBreak(line.lineFeedWidth);
                }
            }

        }

    } # namespace ProcessDoc

} # namespace Typesetting
