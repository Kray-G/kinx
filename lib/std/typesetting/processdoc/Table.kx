namespace Typesetting {

    const TOO_BIG_SPACE = 6553600.0;
    var hyphenPenalty_ = Hypher.hyphenPenalty_;
    var Linebreak = Typesetting.Linebreak;
    var Word = Typesetting.Word;

    namespace ProcessDoc {

        class Table(info_, context_, util_, paragraph_) {

            var pos_, margin_, width_, top_, left_;
            var savedPos_, savedMargin_;
            var bottom_, align_, header_;
            var offsetY_ = 0;
            var limitWidth_ = 50;

            private adjustWidth(lens) {
                var l = lens.length() - 1;
                for (var i = 0; i < l; ++i) {
                    if ((lens[i] * 2) < lens[i+1]) {
                        for (var j = i+1; j <= l; ++j) {
                            lens[j] = lens[j] * 5 / 8;
                        }
                        return true;
                    }
                }
                return false;
            }

            private checkWidth(lens, widthlist, texts) {
                var sorted = lens.map { => ({ index: _2, len: _1, width: widthlist[_2], text: texts[_2] }) }.sort { => _1.len <=> _2.len };
                var l = sorted.length();
                for (var i = 0; i < l; ++i) {
                    var e = sorted[i];
                    if (e.width.width < limitWidth_) {
                        if (adjustWidth(lens)) {
                            return false;
                        }
                        return true;    # no more check.
                    }
                }
                return true;
            }

            private measureText(text, isHeader) {
                var lines = paragraph_.exec({ measureWidth: true }, isHeader ? "\\bold{%{text}}" : text);
                var width = 0.0;
                var nodes = lines[0].nodes;
                var len = nodes.length();
                for (var i = 0; i < len; ++i) {
                    var n = nodes[i];
                    if (n.isBox) {
                        width += n.width;
                    } else if (n.isGlue && n.width < 20.0) {
                        width += n.width;
                    }
                }
                return width;
            }

            private setupTable(table) {
                var sizeX = table.size || 1.0;
                var talign = table.align || "c";
                width_ = margin_.width * sizeX;
                left_ = margin_.left;
                if (talign == "c") {
                    left_ += (margin_.width - width_) / 2;
                } else if (talign == "r") {
                    left_ += margin_.width - width_;
                }

                var alignPos = 0;
                var align = table.cellAlign;
                var lastLines = align.match(/\|+$/)[0];
                var lastLineCount = lastLines ? lastLines.length() : 0;
                if (lastLineCount > 0) {
                    align = align.subString(0, align.length() - lastLineCount);
                }
                var al = align.length();
                var alast = al - 1;
                for (var i = 0; i < al; ++i) {
                    if (align[i] == '|'[0]) {
                        align_[alignPos] ??= {};
                        if (align_[alignPos].left) {
                            ++align_[alignPos].lcount;
                        } else {
                            align_[alignPos].left = true;
                            align_[alignPos].lcount = 1;
                        }
                    } else {
                        align_[alignPos] ??= {};
                        align_[alignPos].align = align[i];
                        ++alignPos;
                    }
                }
                if (alignPos > 0 && lastLineCount > 0) {
                    align_[-1].right = true;
                    align_[-1].rcount = lastLineCount;
                }

                var hpos = 0;
                var lens = [];
                var texts = [];
                var body = table.body;
                for (var i = 0, l = body.length(); i < l; ++i) {
                    var ba = body[i];
                    if (ba.isString && ba == "---") {
                        body[i] = { isTableHLine: true };
                    } else if (ba.isString && ba == "===") {
                        body[i] = { isTableHLine: true, count: 2 };
                    } else if (ba.isArray) {
                        if (hpos == table.header) {
                            header_ = ba;
                            header_.isHeader = true;
                            header_.index = i;
                        }
                        ++hpos;
                        for (var j = 0, m = ba.length(); j < m; ++j) {
                            var b = ba[j];
                            var w = measureText(b, ba.isHeader);
                            ba[j] = { text: b, width: w };
                            if (lens[j] < w) {
                                lens[j] = w;
                                texts[j] = {
                                    text: b,
                                    width: w,
                                };
                            }
                        }
                    }
                }
                var widthlist;
                do {
                    var total = 0;
                    for (var i = 0, l = lens.length(); i < l; ++i) {
                        total += lens[i];
                    }
                    var width = 0;
                    var ratio = width_ / total;
                    widthlist = lens.map {
                        var w = _1 * ratio;
                        width += w;
                        return {
                            len: _1,
                            width: w,
                            areaWidth: w - info_.base.table.cellPadding * 2,
                        };
                    };
                } while (!checkWidth(lens, widthlist, texts));

                return widthlist;
            }

            private makeLines(table, widthlist) {
                top_ = null;
                var totalLineFeedWidth = 0;
                var cellPadding = info_.base.table.cellPadding;
                var cellPadding2 = cellPadding * 2;
                var y = pos_.y - cellPadding * 2;
                for (var i = 0, l = table.body.length(); i < l; ++i) {
                    var ba = table.body[i];
                    if (!ba.isTableHLine) {
                        totalLineFeedWidth = 0;
                        ba.y = y;
                        var isHeader = ba.isHeader;
                        var lineFeedWidth = 0;
                        for (var j = 0, m = ba.length(); j < m; ++j) {
                            var b = ba[j];
                            b.width = widthlist[j].width;
                            b.areaWidth = widthlist[j].areaWidth;
                            var noIndent = context_.noIndent;
                            context_.noIndent = true;
                            b.lines = paragraph_.exec({ areaWidth: b.areaWidth }, isHeader ? "\\bold{%{b.text}}" : b.text);
                            context_.noIndent = noIndent;
                            b.totalLineFeedWidth = b.lines[0].totalLineFeedWidth + cellPadding2;
                            b.y = y + cellPadding + b.lines[0].diffHeight;
                            if (totalLineFeedWidth < b.totalLineFeedWidth) {
                                totalLineFeedWidth = b.totalLineFeedWidth;
                            }
                            if (lineFeedWidth < b.lines[0].lineFeedWidth) {
                                lineFeedWidth = b.lines[0].lineFeedWidth;
                            }
                        }
                        ba.totalLineFeedWidth = totalLineFeedWidth;
                        y -= totalLineFeedWidth;
                        ba.y += lineFeedWidth + cellPadding2 + bottom_ - totalLineFeedWidth;
                        if (top_.isUndefined) {
                            top_ = pos_.y + totalLineFeedWidth - cellPadding2 + bottom_;
                        }
                    }
                }
            }

            private drawHLine(writer, offset, count, x, y, w, h, lw, col) {
                if (count == 2) {
                    writer.drawLine(x, y+offset, w, h, lw, col);
                    writer.drawLine(x, y+offset-2, w, h, lw, col);
                } else {
                    writer.drawLine(x, y, w, h, lw, col);
                }
            }

            private drawVLine(writer, offset, count, x, y, w, h, lw, col) {
                if (count == 2) {
                    writer.drawLine(x+offset, y, w, h, lw, col);
                    writer.drawLine(x+offset+2, y, w, h, lw, col);
                } else {
                    writer.drawLine(x, y, w, h, lw, col);
                }
            }

            private outputLine(writer, array, count, offset, y) {
                var xbase = left_;
                y ??= array.y + offsetY_;
                for (var i = 0, l = array.length() - 1; i <= l; ++i) {
                    var h = array[i];
                    drawHLine(writer, offset, count, xbase, y, h.width, 0, 0.4);
                    xbase += h.width;
                }
            }

            private outputTextImpl(array, writer, xbase, ybase, totalLineFeedWidth) {
                for (var i = 0, l = array.length(); i < l; ++i) {
                    var isCenter = align_[i].align == 'c'[0];
                    var isRight = align_[i].align == 'r'[0];
                    var h = array[i];
                    var cellPadding = info_.base.table.cellPadding;
                    x += cellPadding;
                    y = h.y + offsetY_;
                    var last = h.lines.length() - 1;
                    h.lines.each { &(line, i):
                        x = xbase + cellPadding;
                        var offsetX = 0;
                        if (line.totalWidth != line.width) {
                            if (isCenter) {
                                offsetX = (h.areaWidth - line.totalWidth) / 2;
                            } else if (isRight) {
                                offsetX = h.areaWidth - line.totalWidth;
                            }
                        }
                        line.nodes.each { &(n):
                            writer.write(n, x + offsetX, y);
                            x += n.width;
                        };
                        y -= line.lineFeedWidth;
                    };
                    if (align_[i].left) {
                        drawVLine(writer, i == 0 ? 0 : -1, align_[i].lcount, xbase,
                            ybase + totalLineFeedWidth, 0, totalLineFeedWidth, 0.4);
                    }
                    xbase += h.width;
                    if (align_[i].right) {
                        drawVLine(writer, -2, align_[i].rcount, xbase,
                            ybase + totalLineFeedWidth, 0, totalLineFeedWidth, 0.4);
                    }
                }
            }

            private outputText(writer, table, array) {
                var xbase = left_, y = 0;
                var ybase = array.y + offsetY_;
                var totalLineFeedWidth = array.totalLineFeedWidth;
                var checkY = ybase + totalLineFeedWidth - info_.base.table.cellPadding;

                if (writer.isColumnBreakPoint(totalLineFeedWidth, checkY)) {
                    writer.setPos({ x: xbase, y: checkY });
                    writer.columnBreak();
                    var colnum = writer.getColumnNumber();
                    var cellPadding2 = info_.base.table.cellPadding * 2;
                    if (header_ && !array.isHeader) {
                        if (colnum == 0) {
                            offsetY_ = margin_.pageHeight - margin_.top - header_[0].y - header_.totalLineFeedWidth + cellPadding2;
                        } else {
                            offsetY_ = pos_.y - header_[0].y;
                        }
                        ybase = header_.y + offsetY_;
                        outputTextImpl(header_, writer, xbase, ybase, header_.totalLineFeedWidth);
                        if (header_.index >= 0) {
                            var hline0 = table.body[header_.index - 1];
                            if (hline0.isTableHLine) {
                                outputLine(writer, header_, hline0.count, 0, ybase + header_.totalLineFeedWidth);
                            }
                        }
                        var hline1 = table.body[header_.index + 1];
                        if (hline1.isTableHLine) {
                            outputLine(writer, header_, hline1.count, +1, ybase);
                        }
                    }
                    if (colnum == 0) {
                        offsetY_ = margin_.pageHeight - margin_.top - array[0].y - (header_.totalLineFeedWidth * 2) + cellPadding2;
                    } else {
                        offsetY_ = pos_.y - array[0].y - header_.totalLineFeedWidth;
                    }
                    ybase = array.y + offsetY_;
                }

                outputTextImpl(array, writer, xbase, ybase, totalLineFeedWidth);
                return ybase;
            }

            private outputBody(table) {
                var writer = info_.writer;
                var ybase;
                for (var i = 0, l = table.body.length() - 1; i <= l; ++i) {
                    var ba = table.body[i];
                    if (ba.isTableHLine) {
                        if (i == 0) {
                            var array = table.body[1];
                            if (array) {
                                var totalLineFeedWidth = array.totalLineFeedWidth;
                                var checkY = array.y + totalLineFeedWidth + offsetY_;
                                if (writer.isColumnBreakPoint(totalLineFeedWidth, checkY)) {
                                    if (writer.getPos().y >= 0) {
                                        writer.setPos({ x: -1, y: checkY });
                                        writer.columnBreak();
                                    }
                                    var colnum = writer.getColumnNumber();
                                    var cellPadding2 = info_.base.table.cellPadding * 2;
                                    if (colnum == 0) {
                                        offsetY_ = margin_.pageHeight - margin_.top - array[0].y - (header_.totalLineFeedWidth * 2) + cellPadding2;
                                    } else {
                                        offsetY_ = pos_.y - array[0].y - header_.totalLineFeedWidth;
                                    }
                                }
                                outputLine(writer, array, ba.count, 0, array.y + array.totalLineFeedWidth + offsetY_);
                            }
                        } else if (i == l) {
                            outputLine(writer, table.body[i-1], ba.count, +2);
                        } else {
                            outputLine(writer, table.body[i-1], ba.count, +1);
                        }
                    } else {
                        ybase = outputText(writer, table, ba);
                    }
                }
                return ybase;
            }

            public exec(table, doc) {
                savedPos_ = info_.writer.getPos();
                savedMargin_ = info_.writer.getMargin();
                margin_ = info_.writer.makeMarginSize();

                var fontSize = context_.font.fontSize;
                var paragraphSkipWidth = context_.page.paragraphSkipWidth;
                context_.page.paragraphSkipWidth = context_.page.lineFeedWidthRatio * fontSize;
                bottom_ = (context_.font.fontObj.getBBox().bottom * fontSize) / 1000;

                info_.writer.lineBreak(0);    // setup x & y.
                if (table.caption) {
                    doc.tableCaption(table.caption);
                }

                pos_ = info_.writer.getPos();

                widthlist = setupTable(table);
                makeLines(table, widthlist);
                var ybase = outputBody(table);

                context_.page.paragraphSkipWidth = paragraphSkipWidth;

                info_.writer.setMargin(savedMargin_);
                info_.writer.setPos({ x: -1, y: ybase });
                info_.writer.lineBreak(paragraphSkipWidth);
            }

        }

    } # namespace ProcessDoc

} # namespace Typesetting
