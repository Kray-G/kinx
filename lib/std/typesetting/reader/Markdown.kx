using MarkdownParser;

namespace Typesetting {

    function parseParamString(paramsText) {
        var res = {};
        paramsText.split(',').each { &(param):
            var e = param.split('=');
            if (e.length() > 1) {
                res[e[0]] = e[1];
            } else {
                res[e[0]] = true;
            }
        };
        if (res.float.isString) {
            var floatPos = res.float;
            res.float = {};
            res.float[floatPos] = true;
            if (res.scale) {
                res.scale = Double.parseDouble(res.scale);
            }
        }
        return res;
    }

    class InlineMaker {
        var doc_;
        var images_ = [];
        var tagmap_ = {};
        public setDocument(doc) {
            doc_ = doc;
        }
        public reset() {
            images_ = [];
        }
        public flush() {
            var done = images_.length() > 0;
            images_.each { &(image):
                doc_.apply(new Typesetting.Component.Image({
                    label: image.opts.label,
                    float: image.opts.float,
                    scale: image.opts.scale ?? 1.0,
                    caption: image.opts.caption,
                    file: image.src,
                }));
            };
            images_ = [];
            return done;
        }
        public addTag(tag, values) {
            tagmap_[tag] = values;
        }
        public makeInlineText(values) {
            var str = '';
            reset();
            values.each { &(value):
                if (this[value.name].isFunction) {
                    str += this[value.name](value);
                }
            };
            return str.trim();
        }

        public text(value) {
            return value.value;
        }
        public html(value) {
            var m, v = value.value;
            if ((m = v.match(/<br\s*\/>/)).isDefined) {
                return "\n\n";
            }
            if ((m = v.match(/<backq([0-9]+)\s*\/>/)).isDefined) {
                var value = "`" * Integer.parseInt(m[1]);
                return "\\pack{%{value}}";
            }
            if ((m = v.match(/<monotype-backq([0-9]+)\s*\/>/)).isDefined) {
                var value = "`" * Integer.parseInt(m[1]);
                return "\\monotype{\\pack{%{value}}}";
            }
            if (v.startsWith("<font-")) {
                m = v.match(/<font-([^\s]*)\s*(?:(.+)\s*=\s*"(.+)"\s*)?\/>/);
                if (m.isDefined) {
                    switch (m[1]) {
                    case 'load':
                        var info = m[3].split(',');
                        doc_.loadFont(
                            info[0] || 'main',
                            info[1] || 'serif',
                            info[2] || 'regular',
                            info[3],
                            info[4] || null
                        );
                        break;
                    }
                    return '';
                }
            }
            return "\\monotype{\\pack{%{value.value}}}";
        }
        public htmlcomment(value) {
            return '';
        }
        public em(value) {
            return "\\bold{%{value.value}}";
        }
        public italic(value) {
            return "\\italic{%{value.value}}";
        }
        public emitalic(value) {
            return "\\bold{\\italic{%{value.value}}}";
        }
        public strikethrough(value) {
            return value.value;
        }
        public code(value) {
            return "\\monotype{\\pack{%{value.value}}}";
        }
        public image(value) {
            var check = parseParamString(value.alt);
            if (check.float.isDefined) {
                value.opts = check;
                images_.push(value);
                return '';
            }
            return '\\inlineimage[%{value.alt}]{%{value.src}}';
        }
        public link(value) {
            return '';
        }
        public tag(value) {
            var values = tagmap_[value.tag];
            if (!values) {
                throw RuntimeException("Unknown tag: " + value.tag);
            }
            return "\\footnote{%{makeInlineText(values)}}";
        }
    }

    class BookParser() {
        var title_, doc_;
        var options_ = {};
        var list_ = [];
        var paragraph_ = [];
        var bquote_ = [];
        var opts_ = {};
        var ctx_ = {};
        var ignoreContextName_;
        var output_ = [];
        var inline_ = new InlineMaker();
        var logger_ = new Typesetting.Logger();

        private initialize() {
            ctx_['hline-top-default'] = "single";
            ctx_['hline-bottom-default'] = "single";
            ctx_['hline-header-default'] = "single";
            ignoreContextName_ = {
                "label-default": true,
                "caption-default": true,
            };
        }

        private itemType(name) {
            switch (name) {
            case "list":
            case "checkedlist":
                return "item";
            case "orderedlist":
                return "enum";
            }
            return "item";
        }
        private flushDoc(noflush) {
            if (!noflush.list && list_.length() > 0) {
                var list = list_;
                output_.push(&() => {
                    var itemize = new Typesetting.Component.Itemize();
                    var root = itemize.getRoot();
                    var parent = [root];
                    list.each { &(item):
                        var l = item.level - 1;
                        var p = parent[l] || parent[-1];
                        var d = itemize.addItem(p, l, itemType(item.name), inline_.makeInlineText(item.values));
                        parent[item.level] = d;
                    };
                    doc_.apply(itemize);
                });
                list_ = [];
            }
            if (!noflush.bquote && bquote_.length() > 0) {
                var bquote = bquote_;
                if (ctx_.chapter) {
                    output_.push(&() => {
                        var text = bquote.map(&(p) => inline_.makeInlineText(p.values)).join('\n');
                        doc_.apply(new Typesetting.Component.Abstract(text.trim()));
                    });
                    ctx_.chapter = false;
                } else {
                    output_.push(&() => {
                        var info = { level: 0, values: [] };
                        bquote.each(&(p) => {
                            if (info.level != p.level || p.values.length() == 0) {
                                if (info.values.length() > 0) {
                                    var text = inline_.makeInlineText(info.values).trim();
                                    var para = new Typesetting.Component.Paragraph({ blockquoteLevel: info.level, endBlockquote: (p.level < info.level) }, text);
                                    doc_.apply(para);
                                }
                                info = {
                                    level: p.level,
                                    values: p.values,
                                };
                            } else {
                                info.values += p.values;
                            }
                        });
                        if (info.values.length() > 0) {
                            var text = inline_.makeInlineText(info.values).trim();
                            var para = new Typesetting.Component.Paragraph({ blockquoteLevel: info.level, endBlockquote: true }, text);
                            doc_.apply(para);
                        }
                        logger_.info("-- Blockquote done");
                    });
                }
                bquote_ = [];
            }
            if (!noflush.paragraph && paragraph_.length() > 0) {
                var paragraph = paragraph_;
                output_.push(&() => {
                    var done;
                    var p = paragraph.map(&(p) => {
                        var t = inline_.makeInlineText(p.values);
                        if (!done) {
                            done = inline_.flush();
                        }
                        return t;
                    });
                    if (done) {
                        doc_.apply(new Typesetting.Component.Paragraph(p.join('\n\n').trim()));
                        logger_.info("-- Paragraph done");
                    } else {
                        p.each { &(px, i):
                            doc_.apply(new Typesetting.Component.Paragraph(px.trim()));
                            logger_.info("-- Paragraph done");
                        };
                    }
                });
                paragraph_ = [];
            }
        }
        private checkParamCommand(values) {
            var r = false;
            values.each { &(value):
                if (value.name == 'html' && value.value.isString) {
                    var v = value.value.trim();
                    if (v.startsWith("<context ")) {
                        var m = v.match(/<context\s*(.+)\s*=\s*"(.+)"\s*\/>/);
                        if (m.isDefined) {
                            var name = m[1];
                            if (!ignoreContextName_[name]) {
                                ctx_[name] = m[2];
                            }
                        }
                        r = true;
                    } else if (v.startsWith("<param ")) {
                        var m = v.match(/<param\s*(.+)\s*=\s*"(.+)"\s*\/>/);
                        if (m.isDefined) {
                            opts_[m[1]] = m[2];
                        }
                        r = true;
                    } else if (v.startsWith("<toc ")) {
                        var m = v.match(/<toc(?:\s*with\s*=\s*"(.+)"\s*)?\/>/);
                        if (m.isDefined) {
                            opts_.toc = true;
                            var value = m[1];
                            if (value.find("lot") >= 0) {
                                opts_.lot = true;
                            }
                            if (value.find("lof") >= 0) {
                                opts_.lof = true;
                            }
                        }
                        r = true;
                    } else if (v.startsWith("<style-info ")) {
                        var m = v.match(/<style-info\s*(.+)\s*=\s*"(.+)"\s+(.+)\s*=\s*"(.+)"\/>/);
                        if (m.isDefined) {
                            var stylename, stylevalue;
                            [[1,2],[3,4]].each { &([ni, vi]):
                                var name = m[ni];
                                var value = m[vi];
                                if (name == "name") {
                                    stylename = value;
                                } else if (name == "value") {
                                    stylevalue = value;
                                }
                            };
                            if (stylename && stylevalue) {
                                output_.push(&() => {
                                    doc_.setStyle(stylename, stylevalue);
                                });
                            }
                        }
                        r = true;
                    } else if (/<appendix\s*\/>/.test(v)) {
                        flushDoc();
                        output_.push(&() => {
                            doc_.setAppendix();
                        });
                        r = true;
                    } else if (/<pagebreak\s*\/>/.test(v)) {
                        flushDoc();
                        output_.push(&() => {
                            doc_.pageBreak();
                        });
                        r = true;
                    } else if (/<clear-float\s*\/>/.test(v)) {
                        flushDoc();
                        output_.push(&() => {
                            doc_.clearFloat();
                        });
                        r = true;
                    }
                }
            };
            return r;
        }
        private getContextValue(name, toReset) {
            var r = ctx_[name];
            if (toReset) {
                ctx_[name] = null;
            }
            if (r.isUndefined) {
                r = ctx_[name+'-default'];
            }
            return r;
        }
        private makeDocument() {
            opts_.style ??= "BookA4";
            doc_ = new Typesetting.Document(Typesetting.Style[opts_.style], {
                toc: opts_.toc,
                lof: opts_.lof,
                lot: opts_.lot,
                xref: options_.xref,
                filepath: options_.filepath,
                logger: logger_,
            });
            logger_.info({ toc: opts_.toc, lot: opts_.lot, lof: opts_.lof });
            inline_.setDocument(doc_);
            if (opts_.multibytefont.isString) {
                doc_.setMultibyteFont(opts_.multibytefont);
            }

            if (title_) {
                output_.push(&() => {
                    var title = new Typesetting.Component.Title();
                    var text = inline_.makeInlineText(title_).subString(1).trim();
                    logger_.info({ title: text });
                    title.setTitle(text, Double.parseDouble(opts_.titleSize));
                    if (opts_.author) {
                        text = inline_.makeInlineText(opts_.author).subString(1).trim();
                        logger_.info({ author: text });
                        title.setAuthor(text);
                    }
                    if (opts_.subtitle) {
                        text = inline_.makeInlineText(opts_.subtitle);
                        logger_.info({ subtitle: text });
                        title.setSubtitle(text, Double.parseDouble(opts_.subtitleSize));
                    }
                    if (opts_.date) {
                        text = inline_.makeInlineText(opts_.date).subString(1).trim();
                        logger_.info({ date: text });
                        title.setDate(text);
                    }
                    if (opts_.backgroundImage) {
                        logger_.info({ image: opts_.backgroundImage });
                        title.setBackgroundImage(opts_.backgroundImage);
                    }
                    doc_.apply(title);
                    doc_.toc();
                });
            }
        }
        private parseCodeString(paramsText) {
            if (!paramsText.isString) {
                return;
            }
            var checker = paramsText.split(':');
            var res = { syntax: checker[0], lineNumber: true, box: Typesetting.BOX_SHADOW };
            if (checker.length() > 1) {
                var params = checker[1];
                params.split(',').each { &(param):
                    var e = param.split('=');
                    if (e.length() > 1) {
                        res[e[0]] = (Typesetting[e[1]] ?? (e[1] == "true" ? true : e[1] == "false" ? false : e[1]));
                    } else {
                        res[e[0]] = Typesetting[e[0]] ?? true;
                    }
                };
            }
            return res;
        }
        private finCommand() {
            ctx_.chapter = false;
        }
        private makeMathDocument(math, check) {
            if (check.label.isString) {
                var labels = check.label.split('/');
                labels.each { &(label):
                    var m = label.match(/([^\(]*)(?:\((.*)\))?/);
                    if (m.isDefined) {
                        if (m[2] == '') {
                            math.setLabel(m[1]);
                        } else {
                            var pos = Double.parseDouble(m[2]);
                            math.setLabel([m[1], pos]);
                        }
                    }
                };
            }
        }
        private generateAll() {
            var l = output_.length();
            if (l > 0) {
                output_.each { => _1() };
                output_ = [];
            }
        }

        public heading(ast) {
            flushDoc();
            if (doc_.isUndefined) {
                makeDocument();
            }
            generateAll();
            switch (ast.level) {
            case 1:
                output_.push(&() => {
                    var text = inline_.makeInlineText(ast.values);
                    doc_.apply(new Typesetting.Component.Chapter(text));
                    logger_.info("-- Chapter done");
                });
                ctx_.chapter = true;
                break;
            case 2:
                output_.push(&() => {
                    doc_.apply(new Typesetting.Component.Section(inline_.makeInlineText(ast.values)));
                    logger_.info("-- Section done");
                });
                break;
            case 3:
                output_.push(&() => {
                    doc_.apply(new Typesetting.Component.SubSection(inline_.makeInlineText(ast.values)));
                    logger_.info("-- SubSection done");
                });
                break;
            case 4:
                output_.push(&() => {
                    doc_.apply(new Typesetting.Component.SubSubSection(inline_.makeInlineText(ast.values)));
                    logger_.info("-- SubSubSection done");
                });
                break;
            }
        }
        public paragraph(ast) {
           if (doc_.isUndefined) {
                if (ast.values[0].value[0] == '%'[0]) {
                    var value0 = ast.values[0];
                    var lines = ast.values[0].value.split(/\r?\n/);
                    lines.each { &(line):
                        var value = {
                            name: value0.name,
                            type: value0.type,
                            value: line,
                        };
                        if (line[0] == '%'[0]) {
                            if (title_.isUndefined) {
                                title_ = [value];
                            } else if (opts_.author.isUndefined) {
                                opts_.author = [value];
                            } else if (opts_.date.isUndefined) {
                                opts_.date = [value];
                            }
                        } else if (!checkParamCommand(value)) {
                            opts_.subtitle = [value];
                        }
                    };
                } else {
                    if (!checkParamCommand(ast.values) && opts_.subtitle.isUndefined) {
                        opts_.subtitle = ast.values;
                    }
                }
                return;
            }
            flushDoc({ paragraph: true });
            if (checkParamCommand(ast.values)) {
                return;
            }
            paragraph_.push(ast);
        }
        public horizontal(ast) {
            flushDoc();
            # TODO
            finCommand();
        }
        public code(ast) {
            flushDoc();
            var check = parseCodeString(ast.syntax);
            switch (check.syntax) {
            case 'math':
                output_.push(&() => {
                    var code = new Typesetting.Component.Math(inline_.makeInlineText(ast.values).trim());
                    makeMathDocument(code, check);
                    doc_.apply(code);
                });
                break;
            case 'chart':
                output_.push(&() => {
                    var code = new Typesetting.Component.Chart(JSON.parse(ast.values[0].value));
                    doc_.apply(code);
                });
                break;
            default:
                output_.push(&() => {
                    var code = new Typesetting.Component.Code(inline_.makeInlineText(ast.values).trim());
                    if (check.lineNumber) {
                        code.showLineNumber();
                    }
                    if (check.box) {
                        code.showBox(check.box);
                    }
                    doc_.apply(code);
                });
                break;
            }
            finCommand();
        }
        public blockquote(ast) {
            flushDoc({ bquote: true });
            bquote_.push(ast);
        }
        public list(ast) {
            flushDoc({ list: true });
            list_.push(ast);
        }
        public orderedlist(ast) {
            flushDoc({ list: true });
            list_.push(ast);
        }
        public checklist(ast) {
            flushDoc({ list: true });
            list_.push(ast);
        }
        public table(ast) {
            var caption = getContextValue('caption', true);
            var label = getContextValue('label', true);
            var vlineLeft = getContextValue('vline-left', true);
            var vlineRight = getContextValue('vline-right', true);
            var vlineInside = getContextValue('vline-inside', true);
            var hlineTop = getContextValue('hline-top', true);
            var hlineBottom = getContextValue('hline-bottom', true);
            var hlineHeader = getContextValue('hline-header', true);
            var hlineInside = getContextValue('hline-inside', true);
            var limitColumn = getContextValue('limit-column', true);
            var limitWidth = getContextValue('limit-width', true);
            var cells = [];
            ast.rows.each { &(b, i):
                b.each { &(c, j):
                    var cell = getContextValue("cell-%{i}-%{j}", true);
                    cells[i][j] = cell ? [{
                        type: 'inline',
                        name: 'text',
                        value: cell
                    }] : c;
                };
            };
            flushDoc();
            output_.push(&() => {
                var sep = vlineInside == "single" ? '|' : vlineInside == "double" ? '||' : '';
                var aligns = ast.aligns.map(&(a) => *a[0]).join(sep);
                aligns = ((vlineLeft == "single" ? '|' : '||') + aligns) if (vlineLeft);
                aligns = (aligns + (vlineRight == "single" ? '|' : '||')) if (vlineRight);
                var body = [];
                body.push(hlineTop == "single" ? "---" : "===") if (hlineTop);
                body.push(ast.headings.map(&(h) => inline_.makeInlineText(h)));
                body.push(hlineHeader == "single" ? "---" : "===") if (hlineHeader);
                var rowlast = ast.rows.length() - 1;
                ast.rows.each { &(b, i):
                    body.push(b.map(&(c, j) => inline_.makeInlineText(cells[i][j]) ));
                    if (i < rowlast) {
                        body.push(hlineInside == "single" ? "---" : "===") if (hlineInside);
                    } else {
                        body.push(hlineBottom == "single" ? "---" : "===") if (hlineBottom);
                    }
                };
                doc_.apply(new Typesetting.Component.Table({
                    label: label,
                    caption: caption,
                    cellAlign: aligns,
                    limitColumn: limitColumn ? Integer.parseInt(limitColumn) : null,
                    limitWidth: limitWidth ? Double.parseDouble(limitWidth) : null,
                    body: body,
                }));
            });
            finCommand();
        }
        public fullwidthimage(ast) {
            flushDoc();
            output_.push(&() => {
                var opts = parseParamString(ast.alt);
                opts.file = ast.src;
                doc_.apply(new Typesetting.Component.Image(opts));
            });
        }
        public tagref(ast) {
            inline_.addTag(ast.tag, ast.values);
            return '';
        }

        private generateTo(file) {
            flushDoc();
            finCommand();
            if (doc_.isUndefined) {
                return;
            }
            generateAll();
            doc_.save(file);
        }

        public parse(contents, file, options) {
            options_ = options;
            Markdown.BlockParser(contents, &(a) => {
                this[a.name](a);
            });
            generateTo(file);
        }
    }

} # namespace Typesetting
