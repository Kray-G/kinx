using LinkedList;

namespace Typesetting {

    const Infinity = 100000000;

    /**
    * @preserve Knuth and Plass line breaking algorithm in JavaScript
    *
    * Licensed under the new BSD License.
    * Copyright 2009-2010, Bram Stein
    * Copyright 2020,      Kray-G modified for Kinx
    * All rights reserved.
    */
    class Linebreak(nodes, lines, settings) {
        var options = {
            demerits: {
                line:    settings.demerits.line    || 10,
                flagged: settings.demerits.flagged || 100,
                fitness: settings.demerits.fitness || 3000
            },
            tolerance: settings.tolerance || 2
        };
        var activeNodes = new LinkedList();
        var sum = { width: 0, stretch: 0, shrink: 0 };
        var lineLengths = lines;
        var breaks = [];
        var tmp = {
            data: {
                demerits: Infinity
            }
        };

        private breakpoint(position, demerits, ratio, line, fitnessClass, totals, previous) {
            return {
                position: position,
                demerits: demerits,
                ratio: ratio,
                line: line,
                fitnessClass: fitnessClass,
                totals: totals || {
                    width: 0,
                    stretch: 0,
                    shrink: 0
                },
                previous: previous
            };
        }

        private computeCost(start, end, active, currentLine) {
            var width = sum.width - active.totals.width;
            var stretch = 0;
            var shrink = 0;
            var lineLength = currentLine < lineLengths.length() ? lineLengths[currentLine - 1] : lineLengths[-1];

            if (nodes[end].isPenalty) {
                width += nodes[end].width;
            }

            if (width < lineLength) {
                # Calculate the stretch ratio
                stretch = sum.stretch - active.totals.stretch;
                if (stretch > 0) {
                    return (lineLength - width) / stretch;
                } else {
                    return Linebreak.Infinity;
                }

            } else if (width > lineLength) {
                # Calculate the shrink ratio
                shrink = sum.shrink - active.totals.shrink;
                if (shrink > 0) {
                    return (lineLength - width) / shrink;
                } else {
                    return Linebreak.Infinity;
                }
            } else {
                # perfect match
                return 0;
            }
        }

        # Add width, stretch and shrink values from the current
        # break point up to the next box or forced penalty.
        private computeSum(breakPointIndex) {
            var result = {
                width: sum.width,
                stretch: sum.stretch,
                shrink: sum.shrink
            };

            for (var i = breakPointIndex; i < nodes.length(); ++i) {
                if (nodes[i].isGlue) {
                    result.width += nodes[i].width;
                    result.stretch += nodes[i].stretch;
                    result.shrink += nodes[i].shrink;
                } else if (nodes[i].isBox || (nodes[i].isPenalty && nodes[i].penalty == -Linebreak.Infinity && i > breakPointIndex)) {
                    break;
                }
            }
            return result;
        }

        # The main loop of the algorithm
        private mainLoop(node, index, nodes) {
            var active = activeNodes.first();
            var next = null;
            var ratio = 0;
            var demerits = 0;
            var candidates = [];
            var badness;
            var currentLine = 0;
            var tmpSum;
            var currentClass = 0;
            var fitnessClass;
            var candidate;
            var newNode;

            # The inner loop iterates through all the active nodes with line < currentLine and then
            # breaks out to insert the new active node candidates before looking at the next active
            # nodes for the next lines. The result of this is that the active node list is always
            # sorted by line number.
            while (active.isDefined) {
                candidates = [{
                    demerits: Infinity
                }, {
                    demerits: Infinity
                }, {
                    demerits: Infinity
                }, {
                    demerits: Infinity
                }];

                # Iterate through the linked list of active nodes to find new potential active nodes
                # and deactivate current active nodes.
                while (active.isDefined) {
                    next = active.next;
                    currentLine = active.data.line + 1;
                    ratio = computeCost(active.data.position, index, active.data, currentLine);

                    # Deactive nodes when the distance between the current active node and the
                    # current node becomes too large (i.e. it exceeds the stretch limit and the stretch
                    # ratio becomes negative) or when the current node is a forced break (i.e. the end
                    # of the paragraph when we want to remove all active nodes, but possibly have a final
                    # candidate active node---if the paragraph can be set using the given tolerance value.)
                    if (ratio < -1 || (node.isPenalty && node.penalty == -Linebreak.Infinity)) {
                        activeNodes.remove(active);
                    }

                    # If the ratio is within the valid range of -1 <= ratio <= tolerance calculate the
                    # total demerits and record a candidate active node.
                    if (-1 <= ratio && ratio <= options.tolerance) {
                        badness = 100 * Math.pow(Math.abs(ratio), 3);

                        # Positive penalty
                        if (node.isPenalty && node.penalty >= 0) {
                            demerits = Math.pow(options.demerits.line + badness, 2) + Math.pow(node.penalty, 2);
                        # Negative penalty but not a forced break
                        } else if (node.isPenalty && node.penalty != -Linebreak.Infinity) {
                            demerits = Math.pow(options.demerits.line + badness, 2) - Math.pow(node.penalty, 2);
                        # All other cases
                        } else {
                            demerits = Math.pow(options.demerits.line + badness, 2);
                        }

                        if (node.isPenalty && nodes[active.data.position].isPenalty) {
                            demerits += options.demerits.flagged * node.flagged * nodes[active.data.position].flagged;
                        }

                        # Calculate the fitness class for this candidate active node.
                        if (ratio < -0.5) {
                            currentClass = 0;
                        } else if (ratio <= 0.5) {
                            currentClass = 1;
                        } else if (ratio <= 1) {
                            currentClass = 2;
                        } else {
                            currentClass = 3;
                        }

                        # Add a fitness penalty to the demerits if the fitness classes of two adjacent lines
                        # differ too much.
                        if (Math.abs(currentClass - active.data.fitnessClass) > 1) {
                            demerits += options.demerits.fitness;
                        }

                        # Add the total demerits of the active node to get the total demerits of this candidate node.
                        demerits += active.data.demerits;

                        # Only store the best candidate for each fitness class
                        if (demerits < candidates[currentClass].demerits) {
                            candidates[currentClass] = {
                                active: active,
                                demerits: demerits,
                                ratio: ratio
                            };
                        }
                    }

                    active = next;

                    # Stop iterating through active nodes to insert new candidate active nodes in the active list
                    # before moving on to the active nodes for the next line.
                    # TODO: The Knuth and Plass paper suggests a conditional for currentLine < j0. This means paragraphs
                    # with identical line lengths will not be sorted by line number. Find out if that is a desirable outcome.
                    # For now I left this out, as it only adds minimal overhead to the algorithm and keeping the active node
                    # list sorted has a higher priority.
                    if (active.isDefined && active.data.line >= currentLine) {
                        break;
                    }
                }

                tmpSum = computeSum(index);

                for (fitnessClass = 0; fitnessClass < candidates.length(); ++fitnessClass) {
                    candidate = candidates[fitnessClass];

                    if (candidate.demerits < Infinity) {
                        newNode = new LinkedListNode(breakpoint(index, candidate.demerits, candidate.ratio,
                            candidate.active.data.line + 1, fitnessClass, tmpSum, candidate.active));
                        if (active.isDefined) {
                            activeNodes.insertBefore(active, newNode);
                        } else {
                            activeNodes.push(newNode);
                        }
                    }
                }
            }
        }

        public parse() {
            # Add an active node for the start of the paragraph.
            activeNodes.push(new LinkedListNode(breakpoint(0, 0, 0, 0, 0, null, null)));

            nodes.each(function(node, index) {
                if (node.isBox) {
                    sum.width += node.width;
                } else if (node.isGlue) {
                    if (index > 0 && nodes[index - 1].isBox) {
                        mainLoop(node, index, nodes);
                    }
                    sum.width += node.width;
                    sum.stretch += node.stretch;
                    sum.shrink += node.shrink;
                } else if (node.isPenalty && node.penalty != Linebreak.Infinity) {
                    mainLoop(node, index, nodes);
                }
            });

            if (activeNodes.size() != 0) {
                # Find the best active node (the one with the least total demerits.)
                activeNodes.forEach(function(node) {
                    if (node.data.demerits < tmp.data.demerits) {
                        tmp = node;
                    }
                });

                while (tmp.isDefined) {
                    breaks.push({
                        position: tmp.data.position,
                        ratio: tmp.data.ratio
                    });
                    tmp = tmp.data.previous;
                }
                return breaks.reverse();
            }
            return [];
        }

    }

    Linebreak.Infinity = 10000;

    Linebreak.Box = function(width, value) {
        return {
            isBox: true,
            width: width,
            value: value,
            display: function(indent) {
                indent ??= 0;
                if (indent) {
                    System.print("    " * indent);
                }
                System.print("*Box ");
                System.println(value.toString());
            },
        };
    };

    Linebreak.Glue = function(width, stretch, shrink) {
        return {
            isGlue: true,
            width: width,
            stretch: stretch,
            shrink: shrink,
            display: function(indent) {
                indent ??= 0;
                if (indent) {
                    System.print("    " * indent);
                }
                System.println("  *Glue { width: %{width}, stretch: %{stretch}, shrink: %{shrink} }");
            },
        };
    };

    Linebreak.Penalty = function(width, penalty, flagged) {
        return {
            isPenalty: true,
            width: width,
            penalty: penalty,
            flagged: flagged,
            display: function(indent) {
                indent ??= 0;
                if (indent) {
                    System.print("    " * indent);
                }
                System.println("  *Penalty { width: %{width}, penalty: %{penalty}, flagged: %{flagged} }");
            },
        };
    };

} # namespace Typesetting
