using Process;

namespace Typesetting {
namespace Util {

    function min3(a, b, c) {
        var min = a;
        if (b < min) min = b;
        if (c < min) min = c;
        return min;
    };

    Typesetting.Util.rgb2cmyk = function(r, g, b) {
        R = Double.parseDouble(r) / 255;
        G = Double.parseDouble(g) / 255;
        B = Double.parseDouble(b) / 255;
        K = min3(1 - R, 1 - G, 1 - B);
        C = (1 - R - K);
        M = (1 - G - K);
        Y = (1 - B - K);
        return [ C, M, Y, K ];
    };

    var re_ = /^([-+]?([0-9]+)?(?:\.[0-9]+)?)(em|ex|in|cm|mm|pt|pc|px|pt)?$/;

    Typesetting.Util.getPt = function(context_, sizeString) {
        var value, unit;
        sizeString ??= "";
        re_.reset(sizeString);
        if (re_.matches()) {
            unit = re_.group[3].string;
            value = re_.group[1].string;
            if (re_.group[1].string == "") {
                value = "0" + value;
            }
        }
        value = Double.parseDouble(value ?? 0.0);
        switch (unit) {
        case "em":
            value *= context_.font.fontSize;
            break;
        case "ex":
            var xh = context_.font.fontObj.getXHeight();
            value *= (xh * context_.font.fontSize) / 1000;
            break;
        case "px":
            value /= 1.33;
            break;
        case "pc":
            value *= 12;
            break;
        case "mm":
            value *= 2.8346;
            break;
        case "cm":
            value *= 28.346;
            break;
        case "in":
            value *= 72;
            break;
        }
        return value;
    };

    var typeMap_ = { serif: 0, sans: 1, monotype: 2 };

    Typesetting.Util.getMbFont = function(ctx) {
        if (ctx.font.mb.isDefined) {
            var type = typeMap_[ctx.font.fontType];
            var fontBase = ctx.font.mb ? ctx.font.mb[type] : ctx.fontSet[ctx.font.fontType].fontObjBase;
            var font = ctx.font;
            if (font.isBold && font.isItalic) {
                return fontBase.bolditalic;
            }
            if (font.isBold) {
                return fontBase.bold;
            }
            if (font.isItalic) {
                return fontBase.italic;
            }
            return fontBase.regular;
        }
        return ctx.font.fontObj;
    };

    var romanKey_    = ["","c","cc","ccc","cd","d","dc","dcc","dccc","cm","","x","xx","xxx","xl","l","lx","lxx","lxxx","xc","","i","ii","iii","iv","v","vi","vii","viii","ix"];
    var romanKeyCap_ = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM","","X","XX","XXX","XL","L","LX","LXX","LXXX","XC","","I","II","III","IV","V","VI","VII","VIII","IX"];

    Typesetting.Util.romanize = function(num) {
        var digits = (""+num).split(""), roman = "", i = 3;
        while (i--) {
            roman = (romanKey_[Integer.parseInt(digits.pop()) + (i * 10)] || "") + roman;
        }
        return ("M" * Integer.parseInt(digits.join(""))) + roman;
    };

    Typesetting.Util.romanizeCap = function(num) {
        var digits = (""+num).split(""), roman = "", i = 3;
        while (i--) {
            roman = (romanKeyCap_[Integer.parseInt(digits.pop()) + (i * 10)] || "") + roman;
        }
        return ("M" * Integer.parseInt(digits.join(""))) + roman;
    };

    var imgCounter_ = 0;
    var exepath_ = $exepath.replace('\\', '/');
    var phantomjs_ = System.PLATFORM.endsWith("-WIN") ? "phantomjs.exe" : "phantomjs";
    var katex_, duktape_, chartjs_;
    var executable_, phantomPath_;

    function makePhantomjsPath() {
        var base = [exepath_ / 'kinxlib/lib', exepath_ / 'lib', exepath_ / 'src/extlib'];
        for (var i = 0, l = base.length(); i < l; ++i) {
            phantomPath_ = base[i] / 'phantomjs';
            var path = phantomPath_ / phantomjs_;
            if (File.exists(path)) {
                executable_ = path;
                break;
            }
        }
        if (!executable_) {
            throw RuntimeException("Necessary phantomjs executable not found");
        }
        return executable_;
    }

    function runPhantomJsForMath(writer, width, htmlname, imgfile) {
        if (!executable_) {
            makePhantomjsPath();
        }
        new Process([executable_, phantomPath_ / "phtml2png.js", htmlname, imgfile, ""+width]).run().wait();
        return writer.loadImage(imgfile);
    }

    function loadKatex() {
        var base = [exepath_ / 'kinxlib/lib', exepath_ / 'lib'];
        for (var i = 0, l = base.length(); i < l; ++i) {
            var path = base[i] / 'katex/katex.min.js';
            if (File.exists(path)) {
                return {
                    code: File.load(path),
                    cssPath: base[i].replace(/^(C:\/|\/)/, "file:///") / 'katex/katex.min.css'
                };
            }
        }
        throw RuntimeException("Necessary KaTeX file not found");
    }

    function runPhantomJsForChart(writer, chartjs_, width, height, fontSize, jsonname, imgfile) {
        if (!executable_) {
            makePhantomjsPath();
        }
        new Process([executable_, phantomPath_ / "chart2png.js", chartjs_, imgfile, ""+width, ""+height, jsonname, ""+fontSize]).run().wait();
        return writer.loadImage(imgfile);
    }

    function getChartjsPath() {
        var base = [exepath_ / 'kinxlib/lib', exepath_ / 'lib'];
        for (var i = 0, l = base.length(); i < l; ++i) {
            var path = base[i] / 'chartjs/Chart.min.js';
            if (File.exists(path)) {
                return path;
            }
        }
        throw RuntimeException("Necessary ChartJS file not found");
    }

    Typesetting.Util.compileMath = function(str, displayMode, writer) {
        var basename = "tempXXX" + (++imgCounter_);
        var htmlname = basename + ".html";
        var imgfile = basename + ".jpeg";
        if (!katex_) {
            katex_ = loadKatex();
            duktape_ = new Duktape();
            duktape_.eval(katex_.code);
        }
        str = str.trim().replace('\\', '\\\\').replace(/\r?\n/, "\\n'+\n'");
        var snippet = "katex.renderToString('%{str}', {'displayMode': " + (displayMode ? 'true' : 'false') + "});";
        snippet = duktape_.eval(snippet);

        var html = "<!DOCTYPE html>\n<html>\n";
        html += "<head>\n<meta charset='utf-8'/>\n";
        html += "<link rel='stylesheet' type='text/css' ";
        html += "href='" + katex_.cssPath + "'>\n";
        html += "</head>\n<body>\n";
        html += "<div id='katex-node' class='latex'>\n" + snippet + "</div>\n";
        html += "</body>\n</html>";
        File.open(htmlname, File.WRITE, &(f) => f.println(html));
        var width = writer.getColumnWidth();
        var img = runPhantomJsForMath(writer, width, htmlname, imgfile);
        File.remove(htmlname);
        File.remove(imgfile);
        return img;
    };

    Typesetting.Util.compileChart = function(jsonString, width, height, fontSize, writer) {
        var basename = "tempXXX" + (++imgCounter_);
        var jsonname = basename + ".json";
        var imgfile = basename + ".png";
        if (!chartjs_) {
            chartjs_ = getChartjsPath();
        }

        File.open(jsonname, File.WRITE, &(f) => f.println(jsonString));
        width ??= 600;
        height ??= 400;
        var img = runPhantomJsForChart(writer, chartjs_, width, height, fontSize, jsonname, imgfile);
        File.remove(jsonname);
        File.remove(imgfile);
        return img;
    };

} # namespace Util
} # namespace Typesetting
