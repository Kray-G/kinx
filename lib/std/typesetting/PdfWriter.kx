namespace Typesetting {

    var fontObjSerif_, fontObjSans_, fontObjMonotype_;
    var fontObjSerifBase_ = {
        regular: null,
        bold: null,
        itaric: null,
    };
    var fontObjSansBase_ = {
        regular: null,
        bold: null,
        itaric: null,
    };
    var fontObjMonotypeBase_ = {
        regular: null,
        bold: null,
    };

    function loadFonts(pdf) {
        if (fontObjSerif_.isUndefined) {
            var regular = pdf.getFont(pdf.loadTTFontFromFile2("fonts/GenYoMin-R.ttc", 1, true), "UTF-8");
            var bold = pdf.getFont(pdf.loadTTFontFromFile2("fonts/GenYoMin-B.ttc", 1, true), "UTF-8");
            fontObjSerifBase_.regular = regular;
            fontObjSerifBase_.bold = bold;
            fontObjSerif_ = fontObjSerifBase_.regular;
        }
        if (fontObjSans_.isUndefined) {
            var regular = pdf.getFont(pdf.loadTTFontFromFile("fonts/GenShinGothic-Regular.ttf", true), "UTF-8");
            var bold = pdf.getFont(pdf.loadTTFontFromFile("fonts/GenShinGothic-Bold.ttf", true), "UTF-8");
            fontObjSansBase_.regular = regular;
            fontObjSansBase_.bold = bold;
            fontObjSans_ = fontObjSansBase_.regular;
        }
        if (fontObjMonotype_.isUndefined) {
            var mono = pdf.getFont(pdf.loadTTFontFromFile("fonts/GenShinGothic-Monospace-Normal.ttf", true), "UTF-8");
            fontObjMonotypeBase_.regular = mono;
            fontObjMonotypeBase_.bold = mono;
            fontObjMonotype_ = fontObjMonotypeBase_.regular;
        }
    }

    class PdfWriter(pagesize, direction, info_) {
        var pdf_, page_, margin_, pageMargin_, marginCache_;
        var cols_, curCol_, isColMoved_;
        var pagesize_, direction_;
        var width_, height_, ascent_;
        var x_, y_;
        var ytop_, ybottom_, isTopOfPage_;
        var lastLineFeedWidth_;
        var footnotes_ = [];
        var floating_;
        var tocBasePage_;

        private initialize() {
            info_.context.counter.page = 0;
            pdf_ = new Pdf();
            pdf_.setCompressionMode(PDF_COMP_ALL);
            pdf_.setInfoAttr(PDF_INFO_PRODUCER, "Kinx Tiny Typesetting");
            @setPageMargin(info_.base.margin);
            if (info_.base.outline) {
                pdf_.setPageMode(PDF_PAGE_MODE_USE_OUTLINE);
            }

            # Properties.
            # PDF_INFO_AUTHOR
            # PDF_INFO_CREATOR
            # PDF_INFO_TITLE
            # PDF_INFO_SUBJECT
            # PDF_INFO_KEYWORDS

            loadFonts(pdf_);
            @setPageSize(pagesize, direction);
            cols_ = 1;
            curCol_ = 0;
            @pages = [];
            @addPage();
            x_ = y_ = -1;
        }

        public getPdf() {
            return pdf_;
        }

        public getPage() {
            return page_;
        }

        public getFontObjBase() {
            return [ fontObjSerif_, fontObjSans_, fontObjMonotype_, fontObjSerifBase_, fontObjSansBase_, fontObjMonotypeBase_ ];
        }

        public getColumnNumber() {
            return curCol_;
        }

        public isColumnMoved() {
            return isColMoved_;
        }

        public getLastLineFeedWidth() {
            return lastLineFeedWidth_;
        }

        public getColumnWidth(pageWidth) {
            pageWidth ??= page_.getWidth();
            return (pageWidth - pageMargin_.left - pageMargin_.right - (pageMargin_.alley * (cols_ - 1))) / cols_;
        }

        public getAreaWidth(lineFeedWidth) {
            if (!page_) {
                @addPage();
            }
            var pageWidth = page_.getWidth();
            var width = getColumnWidth(pageWidth);
            var ldiff = margin_.left - pageMargin_.left;
            var rdiff = margin_.right - pageMargin_.right;
            width = width - ldiff - rdiff;
            if (floating_.isUndefined) {
                return [width];
            }
            if (!lineFeedWidth) {
                lineFeedWidth = info_.context.font.fontSize * info_.context.page.lineFeedWidthRatio;
            }
            var y = y_, e = floating_.bottom;
            widthList = [];
            for ( ; y >= e; y -= lineFeedWidth) {
                widthList.push(floating_.lineArea);
            }
            if (y >= e) {
                return widthList;
            }
            widthList.push(width);
            return widthList;
        }

        public loadImage(path) {
            if (path.endsWith(".png")) {
                return pdf_.loadPngImageFromFile(path);
            } else if (path.endsWith(".jpg") || path.endsWith(".jpeg")) {
                return pdf_.loadJpegImageFromFile(path);
            }
            throw RuntimeException("Unsupported image file format");
        }

        public drawLine(left, top, width, height, lineWidth, color) {
            color ??= [1.0, 0, 0];
            page_.gSave();
            page_.setLineWidth(lineWidth || 1.0);
            page_.setRGBFill(...color);
            page_.moveTo(left, top);
            page_.lineTo(left + width, top - height);
            page_.stroke();
            page_.gRestore();
        }

        public drawBox(left, top, width, height, lineWidth, color) {
            color ??= [1.0, 0, 0];
            page_.gSave();
            page_.setLineWidth(lineWidth || 1.0);
            page_.setRGBFill(...color);
            page_.moveTo(left, top);
            page_.lineTo(left + width, top);
            page_.lineTo(left + width, top - height);
            page_.lineTo(left, top - height);
            page_.lineTo(left, top);
            page_.stroke();
            page_.gRestore();
        }

        public drawPageMargin() {
            var margin = @makeMarginSize();
            drawBox(
                pageMargin_.left,
                margin.pageHeight - pageMargin_.top,
                margin.pageWidth - margin_.right - margin_.left,
                margin.pageHeight - margin_.bottom - margin_.top
            );
        }

        private writeFloatingImage() {
            if (!page_) {
                @addPage();
            }
            var left = floating_.left;
            var top = floating_.top - floating_.height;
            var width = floating_.width;
            var height = floating_.height;
            page_.drawImage(floating_.image, left, top, width, height);
            drawBox(left, top + height, width, height) if (info_.base.draw.imageBox);
            if (floating_.captionHook.isFunction) {
                floating_.captionHook(floating_.left + floating_.width / 2, floating_.captionY);
            }
            floating_ = null;
        }

        public createOutline(parent, name, isOpened) {
            var outline = pdf_.createOutline(parent, name, null);
            outline.setOpened(isOpened);
            return outline;
        }

        public setCurrentPage(outline) {
            dst = @pages[-1].createDestination();
            outline.setDestination(dst);
        }

        public setX(x) {
            x_ = x;
        }

        public setYHead() {
            ytop_ = y_;
            isTopOfPage_ = true;
        }

        public addY(y, isTop) {
            isTopOfPage_ = isTop;
            if (y_ > 0) {
                y_ -= y;
                if (floating_.isDefined && y_ <= floating_.bottom) {
                    writeFloatingImage();
                }
            }
        }

        public setPageSize(pagesize, direction) {
            pagesize_ = pagesize;
            direction_ = direction;
        }

        public setMargin(margin) {
            margin_ = margin;
            marginCache_ = null;
        }

        public getMargin() {
            return margin_;
        }

        public setPos(pos) {
            x_ = pos.x;
            y_ = pos.y;
        }

        public getPos() {
            return { x: x_, y: y_ };
        }

        public setPageMargin(margin) {
            pageMargin_ = margin;
            margin_ = margin;
            marginCache_ = null;
        }

        public setColumn(cols) {
            if (cols != cols_) {
                cols_ = cols;
                curCol_ = 0;
                x_ = -1;
                ytop_ = y_;
                isTopOfPage_ = true;
            }
            marginCache_ = null;
        }

        public makeMarginSize() {
            if (!page_) {
                @addPage();
            }
            if (!marginCache_) {
                var pageHeight = page_.getHeight();
                var pageWidth = page_.getWidth();
                var width = getColumnWidth(pageWidth);
                var ldiff = margin_.left - pageMargin_.left;
                var rdiff = margin_.right - pageMargin_.right;
                var pleft = pageMargin_.left + ((width + margin_.alley) * curCol_);
                var left = margin_.left + ((width + margin_.alley) * curCol_);
                marginCache_ = {
                    pageHeight: pageHeight,
                    pageWidth: pageWidth,
                    columnWidth: width,
                    height: pageHeight - margin_.bottom - margin_.top,
                    width: width - ldiff - rdiff,
                    left: left,
                    right: pageWidth - pleft - width,
                    top: margin_.top,
                    bottom: margin_.bottom,
                };
            }
            return marginCache_;
        }

        private showText(page, text, isUrl, link) {
            if (!isUrl) {
                page.showText(text);
            } else {
                var tp = page.getCurrentTextPos();
                page.showText(text);
                var rect = {
                    left:   tp.x - 4,
                    bottom: tp.y - 4,
                    right:  page.getCurrentTextPos().x + 4,
                    top:    tp.y + 10,
                };
                page.createURILinkAnnot(rect, link);
            }
        }

        private makeFormattedText(page, format) {
            var info = page.info;
            if (page.noPageNumber) {
                format = format.replace("<counter:page>", "");
            }
            return format
                .replace(/<counter:([a-zA-Z][0-9a-zA-Z]*)>/) {
                    &(counter) => info.counter[counter[1].string] - info_.context.tocinfo.lastPage
                }
                .replace(/<name:([a-zA-Z][0-9a-zA-Z]*),([0-9])>/) {
                    &(name) => info.name[name[1].string][Integer.parseInt(name[2].string)]
                }
            ;
        }

        private writeText(page, x, y, text) {
            if (x >= 0 && y >= 0 && text) {
                page.beginText();
                page.moveTextPos(x, y);
                page.showText(text);
                page.endText();
            }
        }

        private writeHeader(page) {
            var header = info_.base.header;
            var fontObj = fontObjSerifBase_.regular;
            var fontSize = header.fontSize;
            page.setFontAndSize(fontObj, fontSize);

            var ascent = (fontObj.getAscent() / 1000) * fontSize;
            var y = page.getHeight() - (header.margin.top ?? (info_.base.margin.top * 0.6)) - ascent;
            if (header.format.center) {
                var text = makeFormattedText(page, header.format.center);
                var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left + ((width - nwidth) / 2);
                writeText(page, x, y, text);
            }
            if (header.format.left) {
                var text = makeFormattedText(page, header.format.left);
                var x = pageMargin_.left;
                writeText(page, x, y, text);
            }
            if (header.format.right) {
                var text = makeFormattedText(page, header.format.right);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = page.getWidth() - pageMargin_.right - nwidth;
                writeText(page, x, y, text);
            }
        }

        private writeFooter(page) {
            var footer = info_.base.footer;
            var fontObj = fontObjSerifBase_.regular;
            var fontSize = footer.fontSize;
            page.setFontAndSize(fontObj, fontSize);

            var y = footer.margin.bottom ?? (info_.base.margin.bottom * 0.6);
            if (footer.format.center) {
                var text = makeFormattedText(page, footer.format.center);
                var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = pageMargin_.left + ((width - nwidth) / 2);
                writeText(page, x, y, text);
            }
            if (footer.format.left) {
                var text = makeFormattedText(page, footer.format.left);
                var x = pageMargin_.left;
                writeText(page, x, y, text);
            }
            if (footer.format.right) {
                var text = makeFormattedText(page, footer.format.right);
                var nwidth = info_.measure.textWidth(fontObj, fontSize, text);
                var x = page.getWidth() - pageMargin_.right - nwidth;
                writeText(page, x, y, text);
            }
        }

        private writeFootnote(page, node, x, y) {
            var width = node.width;
            var value = node.value;
            if (value) {
                var font = value.font;
                var fontSize = value.size;
                page.setFontAndSize(font, fontSize);
                page.beginText();
                page.moveTextPos(x + value.offsetX, y + value.offsetY);
                showText(page, value.word, value.isUrl, value.link);
                page.endText();
            }
            return x + width;
        }

        private flushFootnotes(page) {
            if (footnotes_.length() > 0) {
                var margin = info_.base.footnote.margin;
                var labelsep = info_.base.footnote.labelsep;
                var measure = info_.measure;
                var fontObj = fontObjSansBase_.regular;
                var fontSize = info_.base.footnote.fontSize * info_.base.footnote.numberSizeRatio;
                # Currently supported the footnote is always in 1 column.
                var fn = [], flush = [];
                var fs = footnotes_.length();
                ybottom_ = 0;
                for (var f = 0; f < fs; ++f) {
                    var footnote = footnotes_[f];
                    if (!footnote.good) {
                        fn.push(footnote);
                    } else {
                        flush.push(footnote);
                        ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
                    }
                }
                var ypos = (ybottom_ > 0 ? ybottom_ : margin_.bottom) - 10.0;
                var fl = flush.length();
                for (var f = 0; f < fl; ++f) {
                    var footnote = flush[f];
                    var n = "" + footnote.number;
                    var nwidth = measure.textWidth(fontObj, fontSize, n);
                    var xpos = pageMargin_.left + margin - labelsep - nwidth;
                    page.setFontAndSize(fontObj, fontSize);
                    page.beginText();
                    page.moveTextPos(xpos, ypos + 2);
                    page.showText(n);
                    page.endText();
                    xpos = pageMargin_.left + margin;
                    var lines = footnote.lines;
                    for (var i = 0, ll = lines.length(); i < ll; ++i) {
                        var line = lines[i];
                        line.nodes.each { &(node):
                            xpos = writeFootnote(page, node, xpos, ypos);
                        };
                        ypos -= line.lineFeedWidth;
                    }
                };
                if (fl > 0) {
                    var width = page.getWidth() - pageMargin_.left - pageMargin_.right;
                    page.gSave();
                    page.setLineWidth(0.3);
                    page.setRGBFill(0, 0, 0);
                    page.moveTo(pageMargin_.left, ybottom_);
                    page.lineTo(pageMargin_.left + width * 0.7, ybottom_);
                    page.stroke();
                    page.gRestore();
                }
                footnotes_ = fn;
                fl = fn.length();
                for (var f = 0; f < fl; ++f) {
                    var footnote = footnotes_[f];
                    ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
                }
            }
        }

        private flushPage() {
            if (info_.context.counter.page > 1) {
                System.print("[%{info_.context.counter.page-1}]");
            }
            if (@pages.length() > 0) {
                var page = @pages[-1];
                flushFootnotes(page);
                page.info.counter = info_.context.counter.clone();
                page.info.name = info_.context.name.clone();
            }
        }

        public addPage() {
            flushPage();

            if (tocBasePage_) {
                # TOC Mode
                page_ = pdf_.insertPage(tocBasePage_);
                page_.noPageNumber = true;
            } else {
                page_ = pdf_.addPage();
            }

            page_.setSize(pagesize_, direction_);
            width_ = page_.getWidth();
            height_ = page_.getHeight();
            ytop_ = -1;
            ybottom_ = -1;
            isTopOfPage_ = true;
            @pages.push(page_);
            ++info_.context.counter.page;
            if (!info_.base.footnote.resetSectionLevel) {
                info_.context.counter.footnote = 0;
            }
            marginCache_ = null;
            if (info_.base.draw.margin) {
                drawPageMargin();
            }
        }

        public addFootnote(footnote) {
            footnotes_.push(footnote);
            ybottom_ = (ybottom_ > 0 ? ybottom_ : margin_.bottom) + footnote.lineFeedWidth;
        }

        public resolveFootnotes(footnotes) {
            var l1 = footnotes.length();
            var l2 = footnotes_.length();
            for (var i = 0; i < l1; ++i) {
                var r = footnotes[i];
                for (var j = 0; j < l2; ++j) {
                    var f = footnotes_[j];
                    if (r == f.number) {
                        f.good = true;
                    }
                }
            }
        }

        public columnBreak() {
            if (y_ >= 0) {
                isColMoved_ = true;
                x_ = -1;
                y_ = -1;
                if (cols_ > 0) {            
                    curCol_ = (curCol_ + 1) % cols_;
                }
                if (curCol_ == 0) {
                    page_ = null;
                }
            } else {
                isColMoved_ = false;
            }
            marginCache_ = null;
        }

        public pageBreak() {
            if (page_.isDefined) {
                x_ = -1;
                y_ = -1;
                curCol_ = 0;
                page_ = null;
            }
        }

        public isTopOfPage() {
            return isTopOfPage_;
        }

        public getPositionBase() {
            var margin = makeMarginSize();
            return { x: x_, y: y_, bottom: margin.bottom };
        }

        public isColumnBreakPoint(totalLineFeeds, ybase) {
            var y = ybase ?? y_;
            if (y < 0 || totalLineFeeds == 0) {
                return false;
            }
            var margin = makeMarginSize();
            if (!margin) {
                return false;
            }
            y -= totalLineFeeds;
            var bottomMin = ybottom_ > 0 ? ybottom_ : margin.bottom;
            if (y < bottomMin) {
                return true;
            }
            return false;
        }

        public checkColumnBreak(totalLineFeeds) {
            if (isColumnBreakPoint(totalLineFeeds)) {
                @columnBreak();
            }
        }

        public lineBreak(lineFeedWidth) {
            if (y_ < 0) {
                if (curCol_ > 0) {
                    var margin = makeMarginSize();
                    y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
                }
                return false;
            }
            lastLineFeedWidth_ = lineFeedWidth;
            x_ = -1;
            y_ -= lineFeedWidth;
            if (floating_.isDefined && y_ <= floating_.bottom) {
                writeFloatingImage();
            }
            var margin = makeMarginSize();
            if (!margin) {
                return false;
            }
            var bottomMin = (ybottom_ > 0 ? ybottom_ : margin.bottom) + lineFeedWidth;
            isColMoved_ = false;
            if (y_ < bottomMin) {
                isColMoved_ = true;
                y_ = -1;
                if (cols_ > 0) {            
                    curCol_ = (curCol_ + 1) % cols_;
                }
                if (curCol_ == 0) {
                    page_ = null;
                    isTopOfPage_ = true;
                }
                return true;
            }
            isTopOfPage_ = false;
            return false;
        }

        public setMarginAbove(marginWidth) {
            if (page_ && y_ >= 0) {
                lineBreak(marginWidth);
            }
        }

        private setupWrite(value, width, isBox, x) {
            if (page_.isUndefined) {
                @addPage();
            }

            var margin = makeMarginSize();
            if (isBox) {
                var font = value.font;
                var fontSize = value.size;
                ascent_ = (font.getAscent() / 1000) * fontSize;
                if (y_ < 0) {
                    y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
                    x_ = -1;
                }
                page_.setFontAndSize(font, fontSize);
            }
            if (x.isDefined) {
                x_ = x;
            } else if (x_ < 0) {
                x_ = margin.left;
            }
            return true;
        }

        public writeFloatingCaption(node, x, y) {
            var width = node.width;
            var value = node.value;
            if (!setupWrite(value, width, node.isBox, x)) {
                return false;
            }
            if (value) {
                page_.beginText();
                page_.moveTextPos(x + value.offsetX, y + value.offsetY);
                page_.showText(value.word);
                page_.endText();
            }
            x_ = -1;
            return true;
        }

        public writeImage(img, x, y) {
            var margin = makeMarginSize();
            if (x.isUndefined) {
                x = x_ < 0 ? margin.left : x_;
            }
            y ||= y_;
            var width = img.width;
            var height = img.height;
            page_.drawImage(img.image, x, y + img.offsetY, width, height);
            drawBox(x, y + img.offsetY + height, width, height) if (info_.base.draw.imageBox);
            x_ = x + width;
            return true;
        }

        public writeCenter(text, fontObj, fontSize) {
            if (page_.isUndefined) {
                @addPage();
            }
            page_.setFontAndSize(fontObj, fontSize);
            var textWidth = info_.measure.textWidth(fontObj, fontSize, text);
            var margin = makeMarginSize();
            ascent_ = (fontObj.getAscent() / 1000) * fontSize;
            if (y_ < 0) {
                y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top - ascent_);
            }
            var x = (margin.width - textWidth) / 2 + margin.left;
            page_.beginText();
            page_.moveTextPos(x, y_);
            showText(page_, text);
            page_.endText();
        }

        public write(node, x, y) {
            var value = node.value;
            if (value.isInlineImage) {
                return writeImage(value, x, y);
            }

            var width = node.width;
            if (!setupWrite(value, width, node.isBox, x)) {
                return false;
            }

            if (value) {
                var offsetX = value.offsetX;
                if (floating_.isDefined && floating_.floating.left) {
                    offsetX += (floating_.width + info_.base.image.leftsep);
                }
                page_.beginText();
                page_.moveTextPos(x_ + offsetX, (y ?? y_) + value.offsetY);
                showText(page_, value.word, value.isUrl, value.link);
                page_.endText();
                # page_.setRGBFill(0, 0, 0);
                # page_.moveTo(x_ + value.offsetX, y_ + value.offsetY);
                # page_.lineTo(x_ + value.offsetX + width, y_ + value.offsetY);
                # page_.fill();
            }
            x_ += width;
            return true;
        }

        public initTocPage(page) {
            if (page < 1) {
                throw RuntimeException("Invalid state for TOC");
            }
            tocBasePage_ = @pages[page];
            page_ = @pages[page-1];
            page_.noPageNumber = true;
        }

        public clearFloatingImage(lineFeedWidth) {
            while (floating_.isDefined) {
                lineBreak(lineFeedWidth);
            }
        }

        public loadFloatingImage(path, scale, floating, caption, captionHook) {
            var lineFeedWidth = info_.context.font.fontSize * info_.context.page.lineFeedWidthRatio;
            if (floating_.isDefined) {
                # linefeed to the bottom of image.
                clearFloatingImage(lineFeedWidth);
            }

            var image = path.isString ? loadImage(path) : path;
            var width = image.getWidth();
            var height = image.getHeight();
            if (scale.isDefined) {
                width *= scale;
                height *= scale;
            }

            var lrsep = floating.left ? info_.base.image.leftsep : info_.base.image.rightsep;
            var bsep = info_.base.image.bottomsep;
            var margin = makeMarginSize();
            var mwidth = margin.width / 2;
            var ratio = height / width;
            if (mwidth < width) {
                width = mwidth - lrsep;
                height = width * ratio;
            }

            var rightBase = margin.pageWidth - margin.right;
            var left = floating.left ? margin.left : (rightBase - width);
            var right = floating.left ? margin.left + width : rightBase;
            var lineArea = margin.width - (right - left) - lrsep;
            var captionArea = caption.isDefined ? lineFeedWidth : 0;
            var top = y_;
            floating_ = {
                floating: floating,
                width: width,
                height: height,
                image: image,
                captionHook: caption.isDefined ? captionHook : null,
                captionY: top - (height + lineFeedWidth - ascent_),
                lineArea: lineArea,
                left: left,
                top: top + bsep,
                bottom: top - (height + bsep) - captionArea,
                right: right,
            };
        }

        public imageCenter(path, scale) {
            var image = path.isString ? loadImage(path) : path;
            var width = image.getWidth();
            var height = image.getHeight();
            if (scale.isDefined) {
                width *= scale;
                height *= scale;
            }

            var margin = makeMarginSize();
            var bottomMin = (ybottom_ > 0 ? ybottom_ : margin.bottom) + height;
            if (y_ < bottomMin) {
                isColMoved_ = true;
                x_ = -1;
                y_ = -1;
                if (cols_ > 0) {            
                    curCol_ = (curCol_ + 1) % cols_;
                }
                if (curCol_ == 0) {
                    page_ = null;
                    @addPage();
                }
            }
            var lineFeedWidth;
            if (y_ < 0) {
                y_ = ytop_ > 0 ? ytop_ : (height_ - margin.top);
                x_ = -1;
                lineFeedWidth = 0;
            } else {
                lineFeedWidth = lastLineFeedWidth_ / 2;
            }
            var left;
            if (margin.width < width) {
                scale = margin.width / width;
                left = margin.left;
            } else {
                scale = 1.0;
                left = margin.left + (margin.width - width) / 2;
            }
            width = width * scale;
            height = height * scale;
            var offsetY = lineFeedWidth - height;
            y_ += offsetY;
            page_.drawImage(image, left, y_, width, height);
            drawBox(left, y_ + height, width, height) if (info_.base.draw.imageBox);
        }

        public save(file) {
            flushPage();
            @pages.each { &(page):
                writeHeader(page);
                writeFooter(page);
            };
            if (info_.context.counter.page > 0) {
                System.println("[%{info_.context.counter.page}]");
            }
            pdf_.saveToFile(file);
        }
    }

} # namespace Typesetting
