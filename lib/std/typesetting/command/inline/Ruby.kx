namespace Typesetting {

    namespace Command {

        class Ruby(info_, context_) {
            private generateRuby(measure, ruby, word, rubySize, fontSize, fontObj) {
                var rl = measure.textWidth(fontObj, rubySize, ruby);
                var vl = measure.textWidth(fontObj, fontSize, word);
                var height = measure.getAscent(fontObj, fontSize);
                rw.offsetY = height;
                var ws = new Typesetting.WordSet(info_);
                if (rl < vl) {
                    var vw = new Typesetting.Word(info_).setWord(fontObj, fontSize, word, 0);
                    vw.noGlue = true;
                    vw.width = vl;
                    ws.addWord(vw);
                    if (System.isUtf8Bytes(ruby[0]) == 1) {
                        var offsetX = (vl - rl) / 2;
                        var rw = new Typesetting.Word(info_).setWord(fontObj, rubySize, ruby, 0);
                        rw.offsetX = offsetX - vl;
                        rw.offsetY = height;
                        ws.addWord(rw);
                    } else {
                        var rbs = ruby.split('');
                        var rbl = rbs.length();
                        var rlast = rbl - 1;
                        var spc = (vl - rl) / (rbl + 1);
                        var rsize = rl / rbl;
                        var offsetX = spc - vl;
                        for (var i = 0; i < rbl; ++i) {
                            var rw = new Typesetting.Word(info_).setWord(fontObj, rubySize, rbs[i], 0);
                            rw.noGlue = true if (i != rlast);
                            rw.offsetX = offsetX;
                            rw.offsetY = height;
                            ws.addWord(rw);
                            offsetX += rsize + spc;
                        }
                    }
                } else if (rl > vl)  {
                    var rw = new Typesetting.Word(info_).setWord(fontObj, rubySize, ruby, 0);
                    rw.noGlue = true;
                    rw.width = rl;
                    rw.offsetY = height;
                    ws.addWord(rw);
                    if (System.isUtf8Bytes(word[0]) == 1) {
                        var offsetX = (rl - vl) / 2;
                        var vw = new Typesetting.Word(info_).setWord(fontObj, fontSize, word, 0);
                        vw.offsetX = offsetX - rl;
                        ws.addWord(vw);
                    } else {
                        var wds = word.split('');
                        var wdl = wds.length();
                        var wlast = wdl - 1;
                        var spc = (rl - vl) / (wdl + 1);
                        var fsize = vl / wdl;
                        var offsetX = spc - rl;
                        for (var i = 0; i < wdl; ++i) {
                            var vw = new Typesetting.Word(info_).setWord(fontObj, fontSize, wds[i], 0);
                            vw.noGlue = true if (i != wlast);
                            vw.offsetX = offsetX;
                            ws.addWord(vw);
                            offsetX += fsize + spc;
                        }
                    }
                } else {
                    var vw = new Typesetting.Word(info_).setWord(fontObj, fontSize, word, 0);
                    vw.noGlue = true;
                    vw.width = vl;
                    ws.addWord(vw);
                    var rw = new Typesetting.Word(info_).setWord(fontObj, rubySize, ruby, 0);
                    rw.offsetY = height;
                    rw.offsetX = -rl;
                    ws.addWord(rw);
                }
                return ws;
            }

            public exec(params, value) {
                if (!params.isString) {
                    throw RuntimeException("Ruby should be just one word");
                }
                var fontObj = context_.font.fontObj;
                var fontSize = context_.font.fontSize;
                var rubySize = fontSize / 2;
                var measure = info_.measure;
                if (params.find('|') >= 0) {
                    var rbs = params.split('|');
                    var wds = value.split('');
                    var l = wds.length();
                    if (rbs.length() == l) {
                        var wss = new Typesetting.WordSet(info_);
                        for (var i = 0; i < l; ++i) {
                            var ws = generateRuby(measure, rbs[i], wds[i], rubySize, fontSize, fontObj);
                            wss.addWord(ws);
                        }
                        return wss;
                    }
                    params = rbs.join('');
                }
                return generateRuby(measure, params, value, rubySize, fontSize, fontObj);
            }
        }

    } # namespace Command

} # namespace Typesetting
