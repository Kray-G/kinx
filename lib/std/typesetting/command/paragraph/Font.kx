namespace Typesetting {

    namespace ParagraphCommand {

        class Font(info_, context_) {
            var type_, shape_, objbase_;
            var fontType_, fontObj_, fontObjBase_, fontSize_;

            private setCurrentFontSet(name) {
                var fontinfo = info_.writer.getFontByName(name);
                type_ = fontinfo.type;
                shape_ = fontinfo.shape;
                objbase_ = context_.fontSet[type_].fontObjBase[shape_];
                context_.font.fontObj = context_.fontSet[type_].fontObjBase[shape_] = fontinfo.font;
            }

            private setMonotype() {
                context_.font.fontType = "monotype";
                var fontBase = context_.font.mb ? context_.font.mb[2] : context_.fontSet.monotype.fontObjBase;
                context_.font.fontObjBase = fontBase;
                if (context_.font.isBold) {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.bolditalic;
                    } else {
                        context_.font.fontObj = fontBase.bold;
                    }
                } else {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.italic;
                    } else {
                        context_.font.fontObj = fontBase.regular;
                    }
                }
            }

            private setSans() {
                context_.font.fontType = "sans";
                var fontBase = context_.fontSet.sans.fontObjBase;
                context_.font.fontObjBase = fontBase;
                if (context_.font.isBold) {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.bolditalic;
                    } else {
                        context_.font.fontObj = fontBase.bold;
                    }
                } else {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.italic;
                    } else {
                        context_.font.fontObj = fontBase.regular;
                    }
                }
            }

            private setSerif() {
                context_.font.fontType = "serif";
                var fontBase = context_.fontSet.serif.fontObjBase;
                context_.font.fontObjBase = fontBase;
                if (context_.font.isBold) {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.bolditalic;
                    } else {
                        context_.font.fontObj = fontBase.bold;
                    }
                } else {
                    if (context_.font.isItalic) {
                        context_.font.fontObj = fontBase.italic;
                    } else {
                        context_.font.fontObj = fontBase.regular;
                    }
                }
            }

            private changeCurrentFont(type) {
                switch (type) {
                case "serif":
                    setSerif();
                    break;
                case "sans":
                    setSans();
                    break;
                case "monotype":
                    setMonotype();
                    break;
                }
            }

            public start(params) {
                fontSize_ = context_.font.fontSize;
                fontType_ = context_.font.fontType;
                fontObjBase_ = context_.font.fontObjBase;
                fontObj_ = context_.font.fontObj;
                if (params.size) {
                    context_.font.fontSize = Typesetting.Util.getPt(context_, params.size);
                }
                if (params.name) {
                    setCurrentFontSet(params.name);
                }
                if (params.type) {
                    changeCurrentFont(params.type);
                }
            }

            public end() {
                context_.font.fontObj = fontObj_;
                context_.font.fontObjBase = fontObjBase_;
                context_.font.fontType = fontType_;
                context_.font.fontSize = fontSize_;
                if (type_.isDefined) {
                    context_.fontSet[type_].fontObjBase[shape_] = objbase_;
                }
            }
        }

    } # namespace ParagraphCommand

} # namespace Typesetting
