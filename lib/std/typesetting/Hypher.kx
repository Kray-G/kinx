using typesetting.lang_en_us;

class Hypher(language) {

    private initialize() {
        @trie = @createTrie(language['patterns']);
        @leftMin = language['leftmin'];
        @rightMin = language['rightmin'];
        @exceptions = {};
        if (language['exceptions']) {
            language['exceptions'].split(/,\s?/).each(function(exception) {
                var hyphenationMarker = new Regex(exception.find('=') > 0 ? '=' : '-');
                @exceptions[exception.replace(hyphenationMarker, '')] = exception.split(hyphenationMarker);
            });
        }
    }

    public createTrie(patternObject) {
        var size = 0, tree = { _points: [] }, patterns;
        for ([size, value] in patternObject) {
            if (value) {
                patterns = value.match(new Regex('.{1,' + (+size) + '}'), true);
                patterns.each(function(pattern) {
                    var chars = pattern.replace(/[0-9]/, '').split(''),
                        points = pattern.split(/\D/).map(function(e) { return e == "" ? 0 : Integer.parseInt(e); }),
                        t = tree;
                    chars.each(function(c) {
                        var codePoint = c[0];
                        if (!t[codePoint]) {
                            t[codePoint] = {};
                        }
                        t = t[codePoint];
                    });
                    t._points = points;
                });
            }
        }
        return tree;
    }

    public hyphenateText(str, minLength) {
        minLength = minLength || 4;

        var words = str.split(/\b/);
        return words.map(function(word, i) {
            if (word.find('/') > 0) {
                if (i == 0 || (i == (words.length() - 1)) || (/\s+\/|\/\s+/ =~ word)) {
                    return word;
                } else {
                    return word + '\u200B';
                }
            } else if (word.length() <= minLength) {
                return word;
            } else {
                return @hyphenate(word).join('\u00AD');
            }
        }).join('');
    }

    public hyphenate(word) {
        var characters,
            characterPoints = [],
            originalCharacters,
            i = 0,
            j = 0,
            k = 0,
            node,
            points = [],
            wordLength,
            nodePoints,
            nodePointsLength,
            m = Math.max,
            trie = @trie,
            result = [''];

        if (@exceptions.hasOwnProperty(word)) {
            return @exceptions[word];
        }

        if (word.find('\u00AD') > 0) {
            return [word];
        }

        word = '_' + word + '_';

        characters = word.toLower().split('');
        originalCharacters = word.split('');
        wordLength = characters.length();

        for (i = 0; i < wordLength; ++i) {
            points[i] = 0;
            characterPoints[i] = characters[i][0];
        }

        for (i = 0; i < wordLength; ++i) {
            node = trie;
            for (j = i; j < wordLength; ++j) {
                node = node[characterPoints[j]];
                if (node) {
                    nodePoints = node._points || [];
                    if (nodePoints.length() > 0) {
                        for (k = 0, nodePointsLength = nodePoints.length(); k < nodePointsLength; ++k) {
                            points[i + k] = m(points[i + k], nodePoints[k]);
                        }
                    }
                } else {
                    break;
                }
            }
        }

        for (i = 1; i < wordLength - 1; ++i) {
            if (i > @leftMin && i < (wordLength - @rightMin) && points[i] % 2) {
                result.push(originalCharacters[i]);
            } else {
                result[-1] += originalCharacters[i];
            }
        }

        return result;
    }

}

Hypher.hyphenPenalty_ = 100;
