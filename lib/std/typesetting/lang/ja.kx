
namespace Typesetting {

    # Not place to the head.
    var notHead_ = ",)]）｝、，〕〉》」』】〙〗〟’”｠»ゝゞーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇷ゚ㇺㇻㇼㇽㇾㇿ々〻‐゠–〜～?!‼⁇⁈⁉・:;/.．。";
    # Not place to the tail.
    var notTail_ = "([（｛〔〈《「『【〘〖〝‘“｟«";
    # Special glue size.
    var noSpaceForNext_ = "、。，．";
    # small characters.
    var smallCharacters_ = "ァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇷ゚ㇺㇻㇼㇽㇾㇿ";

    var lbr_ = "（｛〔〈《「『【〘〖｟";
    var rbr_ = "）｝〕〉》」』】〙〗｠";
    var nextNeedGlue_ = "？！";

    var space_ = {};

    function getUtf8Length(word) {
        return (word == '“' || word == '”') ? 1 : System.isUtf8Bytes(word[0]);
    }

    function setupSpace(info, value) {
        if (space_.prevsize != value.size) {
            space_.prevsize = value.size;
            space_.width = info.measure.spaceWidth(value.font, value.size);
            space_.stretch = (space_.width * 3) / 6;
            space_.shrink = (space_.width * 3) / 9;
        }
    }

    function isSmallWord(node) {
        return node.width < (node.value.size / 2 + 1);
    }

    function specialCheck(info, Linebreak, nodes, i, prev, node, next) {
        var value = node.value;

        if (nextNeedGlue_.find(value.word) >= 0) {
            if (nodes[-2].isGlue) {
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
            }
            node.width = value.size;
            var width = node.width;
            var stretch = (width * 3) / 6;
            var shrink = (width * 3) / 9;
            nodes.push(Linebreak.Glue(width, stretch, shrink));
            return true;
        }

        var prevv = prev.value;
        var nextv = next.value;
        var isLbr = lbr_.find(value.word) >= 0;
        var isLbrPrev = prevv ? lbr_.find(prevv.word) >= 0 : false;
        var isRbr = rbr_.find(value.word) >= 0;
        var isRbrPrev = prevv ? rbr_.find(prevv.word) >= 0 : false;
        if (isRbrPrev && isLbr) {
            var n2 = nodes[-2];
            if (n2.isGlue) {
                value.offsetX = 0;
                var width = value.size / 2;
                if (isSmallWord(node)) {
                    n2.width = width;
                    n2.stretch = (width * 3) / 6;
                    n2.shrink = (width * 3) / 9;
                } else {
                    n2.width = 0;
                    n2.stretch = (width * 3) / 6;
                    n2.shrink = 0;
                }
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isLbrPrev && isLbr) {
            var n2 = nodes[-2];
            if (n2.isGlue || n2.isPenalty) {
                if (isSmallWord(node)) {
                    value.offsetX = 0;
                } else {
                    value.offsetX = -(value.size / 2);
                    node.width = value.size / 2;
                }
                if (n2.isGlue) {
                    nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
                }
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isRbrPrev && isRbr) {
            var n2 = nodes[-2];
            if (n2.isGlue && nextv.word && notHead_.find(nextv.word) >= 0) {
                value.offsetX = 0;
                if (!isSmallWord(node)) {
                    node.width = value.size / 2;
                }
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
                return true;
            }
        }
        if (isLbr) {
            var n2 = nodes[-2];
            if (!n2.isGlue) {
                if (i == 0 && nodes.length() == 2 && nodes[0].isBox && nodes[0].value.word == '') {
                    if (!isSmallWord(node)) {
                        value.offsetX = -(value.size / 2);
                    }
                    node.width = value.size / 2;
                    nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                    return true;
                }
            } else {
                if (!isSmallWord(node)) {
                    value.offsetX = -(value.size / 2);
                } else {
                    value.offsetX = 0;
                }
                node.width = value.size / 2;
                n2.width = node.width;
                n2.stretch = (n2.width * 3) / 6;
                n2.shrink = (n2.width * 3) / 9;
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isRbr) {
            var n2 = nodes[-2];
            if (n2.isGlue) {
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
            }
            value.offsetX = 0;
            node.width = value.size / 2;
            var width = node.width;
            var stretch = (width * 3) / 6;
            var shrink = (width * 3) / 9;
            nodes.push(Linebreak.Glue(width, stretch, shrink));
            return true;
        }
    }

    Typesetting.insertGlue[__FILE__.stem()] = function(info, Linebreak, wordlist, nodes) {
        var skipCount;
        var words = [];
        wordlist.each { &(w0, i):
            if (skipCount > 0) {
                --skipCount;
                return;
            }
            var w2 = wordlist[i+2];
            var w1 = wordlist[i+1];
            if (w1.isGlue && w0.isBox && w0.value.word != "" && w2.isBox && w2.value.word != "") {
                var l0 = getUtf8Length(w0.value.word);
                var l2 = getUtf8Length(w2.value.word);
                if (l0 > 1 && l2 > 1) {
                    skipCount = 1;
                }
            }
            words.push(w0);
        };
        var wlast = words.length() - 1;
        words.each { &(node, i):
            if (node.isUndefined) {
                return;
            }
            if (skipCount > 0) {
                --skipCount;
                return;
            }
            var prev = i > 0 ? words[i-1] : null;
            if (node.isGlue && (prev.isUndefined || lbr_.find(prev.value.word) >= 0)) {
                return; // skip.
            }
            var next = words[i+1];
            var value = node.value;
            if (node.isGlue && next.isGlue) {
                if (node.stretch == Linebreak.Infinity) {
                    nodes.push(node);
                    skipCount = 1;
                    return;
                }
                if (next.stretch == Linebreak.Infinity) {
                    nodes.push(next);
                    skipCount = 1;
                    return;
                }
            }
            if (value.isImage) {
                if (prev) {
                    if (prev.isGlue) {
                        nodes.pop();
                    }
                    nodes.push(Linebreak.Glue(0, Linebreak.Infinity, 0));
                    nodes.push(Linebreak.Penalty(0, -Linebreak.Infinity, 0));
                    nodes.push(node);
                } else {
                    nodes.push(node);
                }
                if (next.isGlue) {
                    nodes.push(Linebreak.Glue(0, Linebreak.Infinity, 0));
                    nodes.push(Linebreak.Penalty(0, -Linebreak.Infinity, 0));
                    var indent = new Typesetting.Word(info).setWord(info.context.font.fontObj, info.context.font.fontSize, '');
                    indent.noGlue = true;
                    nodes.push(Linebreak.Box(info.base.indentSize, indent));
                    skipCount = 1;
                }
                return;
            }
            if (value.isFootnote) {
                if (nodes[-1].isGlue) {
                    nodes.pop();
                    nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                    nodes.push(node);
                    return;
                }
            }
            nodes.push(node);
            var noSpaceForNext = node.isBox && (value.word != '') && (noSpaceForNext_.find(value.word) >= 0);
            if (noSpaceForNext && next.value.isInlineImage) {
                node.width = value.size / 2;
                var width = node.width;
                var stretch = (width * 3) / 6;
                var shrink = (width * 3) / 9;
                nodes.push(Linebreak.Glue(width, stretch, shrink));
                return;
            }
            if (value.isInlineImage || prev.value.isInlineImage || next.value.isInlineImage) {
                return;
            }
            if (node.isBox && (value.noGlue || value.word == '')) {
                if (next.isGlue) {
                    skipCount = 1;
                    return;
                }
            }
            if (node.isBox && !value.noGlue && value.word != '') {
                if (next.isBox) {
                    if (specialCheck(info, Linebreak, nodes, i, prev, node, next)) {
                        return;
                    }
                }

                if (notHead_.find(value.word) >= 0) {
                    if (smallCharacters_.find(value.word) >= 0 && node.width > 0 && node.width < (value.size * 0.8)) {
                        node.width = value.size * 0.8;  # minimum size adjustment.
                        if (next.isGlue) {
                            next.width = 0;
                        }
                    }
                    nodes.pop();
                    if (nodes[-1].isGlue) {
                        nodes.pop();
                    }
                    if (noSpaceForNext) {
                        nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                        node.width = value.size;
                        nodes.push(node);
                        if (next.isBox && (lbr_.find(next.value.word) >= 0 || rbr_.find(next.value.word) >= 0)) {
                            node.width = value.size / 2;
                        }
                        if (next.isGlue) {
                            next.width = 0;
                            nodes.push(next);
                            skipCount = 1;
                        } else {
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 0));
                        }
                    } else {
                        nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                        nodes.push(node);
                    }
                } else if (notTail_.find(value.word) >= 0) {
                    var prev = words[i-1];
                    if (prev.isBox && !prev.value.isUtf8) {
                        nodes.pop();
                        if (nodes[-1].isGlue) {
                            nodes.pop();
                        }
                        setupSpace(info, value);
                        nodes.push(Linebreak.Glue(0, space_.stretch, 1));
                        nodes.push(node);
                    }
                    nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                    return;
                }

                if (next.isBox && nodes[-1].isBox) {
                    var nextv = next.value;
                    var l1 = getUtf8Length(value.word);
                    if (value.offsetX == 0 && value.offsetY == 0) {
                        if (l1 > 1 && value.word.length() == l1) {
                            var d = value.size - node.width;
                            if (d > 0 && !noSpaceForNext) {
                                value.offsetX = d / 2;
                            }
                            node.width = value.size;
                        }
                    }

                    if (i != wlast) {
                        var l2 = getUtf8Length(nextv.word);
                        if (l1 > 1 && noSpaceForNext) {
                            node.width /= 2;
                            var width = value.size / 2;
                            var stretch = (width * 3) / 6;
                            var shrink = (width * 3) / 9;
                            nodes.push(Linebreak.Glue(width, stretch, shrink));
                        } else if (l1 > 1 && l2 > 1) {
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 0));
                        } else if (l1 == 1 && l2 > 1) {
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 0));
                        }
                    }
                }
            }
        };
    };

    Typesetting.insertGlue.en = Typesetting.insertGlue.ja;

} # namespace Typesetting
