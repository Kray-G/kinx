
namespace Typesetting {

    # Not place to the head.
    var notHead_ = ",)]｝、，〕〉》」』】〙〗〟’”｠»ゝゞーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇷ゚ㇺㇻㇼㇽㇾㇿ々〻‐゠–〜～?!‼⁇⁈⁉・:;/.．。";
    # Not place to the tail.
    var notTail_ = "([（｛〔〈《「『【〘〖〝‘“｟«";
    # Special glue size.
    var noSpaceForNext_ = "、。，．";

    var lbr_ = "（｛〔〈《「『【〘〖｟";
    var rbr_ = "）｝〕〉》」』】〙〗｠";
    var nextNeedGlue_ = "？！";

    var space_ = {};

    function setupSpace(info, value) {
        if (space_.prevsize != value.size) {
            space_.prevsize = value.size;
            space_.width = info.measure.spaceWidth(value.font, value.size);
            space_.stretch = (space_.width * 3) / 6;
            space_.shrink = (space_.width * 3) / 9;
        }
    }

    function isSmallWord(node) {
        return node.width < (node.value.size / 2 + 1);
    }

    function specialCheck(info, Linebreak, nodes, i, prev, node, next) {
        var value = node.value;

        if (nextNeedGlue_.find(value.word) >= 0) {
            if (nodes[-2].isGlue) {
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
            }
            node.width = value.size;
            var width = node.width;
            var stretch = (width * 3) / 6;
            var shrink = (width * 3) / 9;
            nodes.push(Linebreak.Glue(width, stretch, shrink));
            return true;
        }

        var prevv = prev.value;
        var nextv = next.value;
        var isLbr = lbr_.find(value.word) >= 0;
        var isLbrPrev = prevv ? lbr_.find(prevv.word) >= 0 : false;
        var isRbr = rbr_.find(value.word) >= 0;
        var isRbrPrev = prevv ? rbr_.find(prevv.word) >= 0 : false;
        if (isRbrPrev && isLbr) {
            var n2 = nodes[-2];
            if (n2.isGlue) {
                value.offsetX = 0;
                var width = value.size / 2;
                if (isSmallWord(node)) {
                    n2.width = width;
                    n2.stretch = (width * 3) / 6;
                    n2.shrink = (width * 3) / 9;
                } else {
                    n2.width = 0;
                    n2.stretch = (width * 3) / 6;
                    n2.shrink = 0;
                }
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isLbrPrev && isLbr) {
            var n2 = nodes[-2];
            if (n2.isGlue || n2.isPenalty) {
                if (isSmallWord(node)) {
                    value.offsetX = 0;
                } else {
                    value.offsetX = -(value.size / 2);
                    node.width = value.size / 2;
                }
                if (n2.isGlue) {
                    nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
                }
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isRbrPrev && isRbr) {
            var n2 = nodes[-2];
            if (n2.isGlue) {
                value.offsetX = 0;
                if (!isSmallWord(node)) {
                    node.width = value.size / 2;
                }
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
                return true;
            }
        }
        if (isLbr) {
            var n2 = nodes[-2];
            if (!n2.isGlue) {
                if (i == 0 && nodes.length() == 2 && nodes[0].isBox && nodes[0].value.word == '') {
                    if (!isSmallWord(node)) {
                        value.offsetX = -(value.size / 2);
                    }
                    node.width = value.size / 2;
                    nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                    return true;
                }
            } else {
                if (!isSmallWord(node)) {
                    value.offsetX = -(value.size / 2);
                } else {
                    value.offsetX = 0;
                }
                node.width = value.size / 2;
                n2.width = node.width;
                n2.stretch = (n2.width * 3) / 6;
                n2.shrink = (n2.width * 3) / 9;
                nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                return true;
            }
        }
        if (isRbr) {
            var n2 = nodes[-2];
            if (n2.isGlue) {
                nodes[-2] = Linebreak.Penalty(0, Linebreak.Infinity, 0);
            }
            value.offsetX = 0;
            node.width = value.size / 2;
            var width = node.width;
            var stretch = (width * 3) / 6;
            var shrink = (width * 3) / 9;
            nodes.push(Linebreak.Glue(width, stretch, shrink));
            return true;
        }
    }

    Typesetting.insertGlue.ja = _function(info, Linebreak, words, nodes) {
        var wlast = words.length() - 1;
        words.each { &(node, i):
            nodes.push(node);
            if (node.isBox && node.value.word != '') {
                var next = words[i+1];
                if (next.isBox) {
                    if (specialCheck(info, Linebreak, nodes, i, words[i-1], node, next)) {
                        return;
                    }

                    var value = node.value;
                    var nextv = next.value;
                    var noSpaceForNext = noSpaceForNext_.find(value.word) >= 0;
                    var l1 = System.isUtf8Bytes(value.word[0]);
                    if (l1 > 1 && value.word.length() == l1) {
                        var d = value.size - node.width;
                        if (d > 0 && !noSpaceForNext) {
                            value.offsetX = d / 2;
                        }
                        node.width = value.size;
                    }

                    if (notHead_.find(value.word) >= 0) {
                        nodes.pop();
                        if (nodes[-1].isGlue) {
                            nodes.pop();
                        }
                        nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                        nodes.push(node);
                    } else if (notTail_.find(value.word) >= 0) {
                        var prev = words[i-1];
                        if (prev.isBox && !prev.value.isUtf8) {
                            nodes.pop();
                            if (nodes[-1].isGlue) {
                                nodes.pop();
                            }
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 1));
                            nodes.push(node);
                        }
                        nodes.push(Linebreak.Penalty(0, Linebreak.Infinity, 0));
                    }

                    if (nodes[-1].isBox && i != wlast) {
                        var l2 = System.isUtf8Bytes(nextv.word[0]);
                        if (l1 > 1 && noSpaceForNext) {
                            node.width /= 2;
                            var width = value.size / 2;
                            var stretch = (width * 3) / 6;
                            var shrink = (width * 3) / 9;
                            nodes.push(Linebreak.Glue(width, stretch, shrink));
                        } else if (l1 > 1 && l2 > 1) {
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 0));
                        } else if (l1 == 1 && l2 > 1) {
                            setupSpace(info, value);
                            nodes.push(Linebreak.Glue(0, space_.stretch, 0));
                        }
                    }
                }
            }
        };
    };

} # namespace Typesetting
