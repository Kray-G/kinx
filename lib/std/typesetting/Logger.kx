using DateTime;

namespace Typesetting {

    class LoggerImpl(opts_) {
        var writer_;
        var debugOutput_ = opts_.debug;
        var infoOutput_ = opts_.info;
        var warnOutput_ = opts_.warn;
        var errorOutput_ = opts_.error;
        var fatalOutput_ = opts_.fatal;
        private makeMessage(level, levelString, msg) {
            var dt = DateTime.now();
            var res = "[%{dt.toString()}] %{levelString}: " + msg.trimRight();
            if (writer_ && level > 1) {
                res = res.trimRight(".") + " at the page %{writer_.getPageNumber()}.";
            }
            return res;
        }
        private makeString(msg) {
            if (msg.isString) {
                return msg;
            }
            return msg.toString();
        }
        public setWriter(writer) {
            writer_ = writer;
        }
        public debug(msg) {
            if (debugOutput_) {
                msg = makeString(msg);
                msg.split(/\r?\n/).each { &(m):
                    debugOutput_.println(makeMessage(0, "Debug", m));
                };
            }
        }
        public info(msg) {
            if (infoOutput_) {
                msg = makeString(msg);
                msg.split(/\r?\n/).each { &(m):
                    infoOutput_.println(makeMessage(1, "Info", m));
                };
            }
        }
        public warn(msg) {
            if (warnOutput_) {
                msg = makeString(msg);
                msg.split(/\r?\n/).each { &(m):
                    var mm = makeMessage(2, "Warning", m);
                    warnOutput_.println(mm);
                    @warns.push(mm);
                };
            }
        }
        public error(msg) {
            if (errorOutput_) {
                msg = makeString(msg);
                msg.split(/\r?\n/).each { &(m):
                    var mm = makeMessage(3, "Error", m);
                    errorOutput_.println(mm);
                    @errors.push(mm);
                };
            }
        }
        public fatal(msg) {
            if (fatalOutput_) {
                msg = makeString(msg);
                msg.split(/\r?\n/).each { &(m):
                    fatalOutput_.println(makeMessage(4, "Fatal", m));
                };
                throw RuntimeException("Fatal error occurred, stop the process.");
            }
        }
    }

    class Logger() : LoggerImpl({
            debug: null,
            info: System,
            warn: System,
            error: System,
            fatal: System,
        }) {
        private initialize() {
            @warns = [];
            @errors = [];
        }
        public report() {
            if (@warns.length() == 0 && @errors.length() == 0) {
                System.println("Processing a typestting successfully completed.");
            }
            if (@warns.length() > 0) {
                System.println("Warning detected: %d" % @warns.length());
                @warns.each { &(m):
                    System.println(m);
                };
            }
            if (@errors.length() > 0) {
                System.println("Error detected: %d" % @errors.length());
                @errors.each { &(m):
                    System.println(m);
                };
            }
        }
    }

} # namespace Typesetting
