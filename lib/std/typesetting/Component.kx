namespace Typesetting {

    namespace Component {

        class Base(opts_) {
            public setOptionValue(opts) {
                opts_ = opts;
            }
            public setLabel(label) {
                opts_.label = label;
            }
            public applyDoc(doc, intrf, options, value) {
                return doc[intrf](options, value);
            }
            public appendListOf(info, context, target, level, number, header, linetop) {
                context.tocinfo[target] ??= {};
                context.tocinfo[target].push({
                    page: info.writer.getPageNumber(),
                    level: level,
                    number: number,
                    header: header,
                    y: linetop,
                });
            }
            public makeCountrNumber(context, counterName) {
                var level = context.counter[counterName][0];
                if (context.counter.section[level] != context.counter[counterName][2]) {
                    context.counter[counterName][1] = 0;
                }
                context.counter[counterName][2] = context.counter.section[level];
                var num = ++context.counter[counterName][1];
                var lt = [];
                for (var i = 1; i <= level; ++i) {
                    lt.push(context.counter.section[i]);
                }
                lt.push("" + num);
                return lt.join('.');
            }
            public imageCaption(info, core, caption, linetop) {
                var context = info.context;
                var fontSize = context.font.fontSize;
                var lineFeedWidth = fontSize * context.page.lineFeedWidthRatio;

                linetop ??= info.writer.getLineTop(context.font.fontObj, fontSize);
                var number = makeCountrNumber(context, "image");
                var cap = info.base.image.label + ' ' + number + ' ' + caption;
                var fullname = info.base.image.fulllabel + ' ' + number + ' ' + caption;
                if (opts_.label) {
                    var pagenum = info.writer.getPageIndex();
                    context.xref[opts_.label] = {
                        page:      pagenum,
                        counter:   number,
                        name:      fullname,
                        text:      caption,
                        y:         linetop,
                    };
                }

                core.util.writeCenter({}, cap, context.font.fontObj, fontSize, lineFeedWidth);
                appendListOf(info, context, "lof", info.base.image.level + 1, number, caption, linetop);

                info.writer.lineBreak(lineFeedWidth);
            }
            public floatingImageCaption(info, context, label, caption, fontObj, fontSize, center, y, imageY, height) {
                if (!caption) {
                    return;
                }
                var counter = @makeCountrNumber(context, "image");
                var name = info.base.image.label + ' ' + counter + ' ' + caption;
                var fullname = info.base.image.fulllabel + ' ' + counter + ' ' + caption;
                var textWidth = info.measure.textWidth(fontObj, fontSize, name);
                var writer = info.writer;
                var margin = writer.makeMarginSize();
                var ytop = imageY + height;

                if (label) {
                    var pagenum = writer.getPageIndex();
                    context.xref[label] = {
                        page:      pagenum,
                        counter:   counter,
                        name:      fullname,
                        text:      caption,
                        y:         ytop,
                    };
                }

                var x = center - textWidth / 2;
                var n = Typesetting.Linebreak.Box(0, new Typesetting.Word(info).setWord(fontObj, fontSize, name));
                writer.writeFloatingCaption(n, x, y);
                @appendListOf(info, context, "lof", info.base.image.level + 1, counter, caption, ytop);
            }
            public columnBreak(info, core) {
                core.flushParagraph();
                info.writer.columnBreak();
            }
            public pageBreak(info, core) {
                core.flushParagraph();
                info.writer.pageBreak();
            }
            public set(core, opts, func) {
                core.util.setOpts(opts);
                func();
                core.util.setOpts(null);
            }
        }

    } # namespace Component

} # namespace Typesetting

using typesetting.component.*;
