using Parsek;
using typesetting.Hypher;
using typesetting.WordSet;
using typesetting.Util;
using typesetting.command.Command;
using typesetting.command.ParagraphCommand;
using typesetting.command.MathCommand;

namespace Typesetting {

    var Linebreak = Typesetting.Linebreak;
    var hyphenate_ = new Hypher(Hypher.en).hyphenate;
    var hyphenPenalty_ = Hypher.hyphenPenalty_;
    var Word = Typesetting.Word;
    var WordSet = Typesetting.WordSet;

    class ParagraphParser(context_, info_) {
        var $ = new Parsek();
        var measure_ = info_.measure;
        var paragraph_;
        var word_ = $.regex(/([^\s\\\{\}\$])+|\\\{|\\\}|\\\\(\r?\n)?|\\\$/).map { &(word):
            if (word == "\\{" || word == "\\}" || word == "\\\\" || word == "\\$") {
                return new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, *word[1]);
            }
            if (word == "\\\\\n" || word == "\\\\\r\n") {
                return new Typesetting.Command.ForceBreak(info_, context_).exec();
            }
            var hyphenWidth = measure_.hyphenWidth(context_.font.fontObj, context_.font.fontSize);
            var words = [];
            var len = word.length();
            for (var i = 0; i < len; ) {
                var c = word[i];
                var l = System.isUtf8Bytes(c);
                if (l > 1) {
                    words.push(word.subString(i, l));
                    i += l;
                } else {
                    var s = i;
                    do {
                        ++i;
                        c = word[i];
                        if (!(('0'[0] <= c && c <= '9'[0]) || ('a'[0] <= c && c <= 'z'[0]) || ('A'[0] <= c && c <= 'Z'[0]))) {
                            if (word[i+1] == ' '[0]) {
                                break;
                            }
                        }
                        l = System.isUtf8Bytes(c);
                    } while (i < len && l == 1);
                    var hyphenated = [];
                    var wlen = i - s;
                    var text = word.subString(s, wlen);
                    if (wlen > 6 && text =~ /^[-a-zA-Z]+$/) {
                        hyphenated = hyphenate_(text);
                        if (hyphenated.length() > 1) {
                            var len = hyphenated.length();
                            hyphenated.each { &(part, i):
                                var partobj = new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, part);
                                words.push(Linebreak.Box(partobj.width, partobj));
                                if (i != len - 1) {
                                    words.push(Linebreak.Penalty(hyphenWidth, hyphenPenalty_, 1));
                                }
                            };
                        } else {
                            words.push(text);
                        }
                    } else {
                        words.push(text);
                    }
                }
            }
            if (words.length() == 1) {
                return new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, words[0]);
            }
            return new WordSet(info_).addWord(words.map {
                if (_1.isBox || _1.isGlue || _1.isPenalty) {
                    return _1;
                }
                return new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, _1);
            });
        };
        var commandValuePack_;
        var commandNames = Typesetting.Command.keySet()
            .filter { => Typesetting.Command[_1].create.isFunction }
            .join('|');
        var commandHead_ = $.regex(new Regex(%!\\(%{commandNames.toLower()})(?:\[([^\]]*)\])?!), [1, 2]).map { &([name, pbase])
            var name = name.toUpper(0, 1);
            var params;
            if (pbase.length() > 0) {
                if (pbase.find('=') >= 0) {
                    params = {};
                    pbase.split(",").map { &(p):
                        var e = p.split('=');
                        params[e[0].trim()] = e[1].trim();
                    };
                } else {
                    params = pbase;
                }
            } else {
                params = {};
            }
            var command = new Typesetting.Command[name](info_, context_);
            context_.commands.push({
                command: command,
                name: name,
                params: params,
            });
        };
        var commandStart_ = $.string('{');
        var commandEnd_ = $.string('}');
        var commandValue_ = $.regex(/[^\{\}]+/);
        commandValuePack_ = $.lazy {
            => (commandValue_ / (commandStart_ + commandValuePack_.many() + commandEnd_).map { => '{' + _1[1].join('') + '}' })
        };
        var command_ = (commandHead_ + (commandStart_ + commandValuePack_.many() + commandEnd_).option().map { => _1[1] }).map {
            var c = context_.commands.pop();
            var command = c.command;
            var value = _1[1];
            if (value) {
                value = value.join('');
            }
            if (command.exec.isFunction) {
                value = command.exec(c.params, value);
            }
            return @parseEach(value);
        };
        commandNames = Typesetting.ParagraphCommand.keySet()
            .filter { => Typesetting.ParagraphCommand[_1].create.isFunction }
            .join('|');
        var parCommandStart_ = $.regex(new Regex(%!\\(%{commandNames.toLower()})\s*(?:\[([^\]]+)\]\s*)?\{!), [1, 2]).map { &([name, pbase]):
            name = name.toUpper(0, 1);
            var command = new Typesetting.ParagraphCommand[name](info_, context_);
            var params;
            if (pbase.length() > 0) {
                if (pbase.find('=') >= 0) {
                    params = {};
                    pbase.split(",").map { &(p):
                        var e = p.split('=');
                        params[e[0].trim()] = e[1].trim();
                    };
                } else {
                    params = pbase;
                }
            } else {
                params = {};
            }
            context_.commands.push({
                command: command,
                name: name,
            });
            if (command.start.isFunction) {
                command.start(params);
            }
        };
        var parCommandEnd_ = $.string('}').map {
            var c = context_.commands.pop();
            var command = c.command;
            if (command.end.isFunction) {
                command.end();
            }
        };
        var paragraphMap_ = $.lazy { => paragraph_ }.map {
            var value = @parseEach(_1);
            if (context_.commands.length() > 0) {
                var c = context_.commands[-1];
                var command = c.command;
                if (command.translate.isFunction) {
                    value = command.translate(value);
                }
            }
            return value;
        };
        var parCommand_ = (parCommandStart_ + paragraphMap_ + parCommandEnd_).map { &(value):
            return @parseEach(value[1]);
        };
        var inlineMathCommand_ = $.regex(/\$([^\$]+)\$/, 1).map { &(value):
            var command = new Typesetting.MathCommand.InlineMath(info_, context_);
            if (command.exec.isFunction) {
                value = command.exec(false, value);
            }
            return @parseEach(value);
        };
        var unknownCommand_ = ($.regex(/\\[a-zA-Z][0-9a-zA-Z]*/) + $.index).map { &(value):
            var name = value[0];
            var index = value[1];
            throw RuntimeException('Unknown command (%{name}) at the line ' + index.line);
        };
        var urlLink_ = ($.regex(/(https?|ftp)(:\/\/[^<>#"%\}\|\\\^\[\]`\s]+[^<>#"%\}\|\\\^\[\]`,.\s])/)).map { &(word):
            var value = new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, word);
            value.isUrl = true;
            value.link = word;
            value = Typesetting.Linebreak.Box(value.width, value);
            return value;
        };
        var optWhitespace_ = $.regex(/(\r?\n(?:[ \t]*\r?\n)+\s*)|(\s*)/, [1, 2]).map { &([para, spc])
            if (para) {
                return new Typesetting.Command.BreakWithIndentSpace(info_, context_).exec();
            }
            if (spc == "") {
                return;
            }
            var width = info_.measure.spaceWidth(context_.font.fontObj, context_.font.fontSize);
            var stretch = (width * 3) / 6;
            var shrink = (width * 3) / 9;
            return Linebreak.Glue(width, stretch, shrink);
        };
        paragraph_ = (optWhitespace_ + (urlLink_ / word_ / parCommand_ / command_ / inlineMathCommand_ / unknownCommand_)).many().map { &(elem)
            var words = new WordSet(info_);
            elem.each {
                if (_1[0]) {
                    words.addWord(_1);
                } else {
                    words.addWord(_1[1]);
                }
            };
            return words;
        };

        public wrapLineBreak(words) {
            return words;
        }

        public parseEach(word) {
            if (word.isBox) {
                return word;
            }
            if (word.isString) {
                return new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, word);
            }
            if (word.isArray) {
                var words = new WordSet(info_);
                word.each {
                    words.addWord(parseEach(_1));
                };
                return words;
            }
            if (word.isWordSet || word.isWord || word.isInlineImage) {
                return word;
            }
            throw RuntimeException("Invalid word");
        }

        public parse(text) {
            var r = paragraph_.parseAll(text.trim());
            if (!r.status) {
                throw RuntimeException("Parsing failed: " + text);
            }
            return new WordSet(info_).addWord(r.value);
        }
    }

} # namespace Typesetting
