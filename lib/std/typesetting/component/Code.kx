namespace Typesetting {

    namespace Component {

        class Code(opts_, code_) : Component.Base(opts_) {
            private initialize() {
                if (code_.isUndefined) {
                    [code_, opts_] = [opts_];
                }
            }
            public showBox(type) {
                opts_.box = type ?? Typesetting.BOX_NORMAL;
            }
            public showLineNumber(tf) {
                opts_.lineNumber = tf ?? true;
            }
            public write(info, context, core) {
                core.flushParagraph();

                [opts_, code_] = core.util.makeOption(opts_, code_, false);
                var fontObj = context.font.fontObj;
                var fontObjBase = context.font.fontObjBase;
                core.fontType("Monotype");

                var writer = info.writer;
                var margin = writer.getMargin();
                var numberSize = info.base.code.numberSize;
                var codeFontSize = info.base.code.fontSize;

                const shadowWidth = 3;
                var base = margin.left + info.base.code.margin.left + shadowWidth + 1;
                var lbase = base;
                var rbase = margin.right + info.base.code.margin.right - shadowWidth - 1;
                if (opts_.lineNumber) {
                    var width = info.measure.textWidth(context.font.fontObj, numberSize, "999999");
                    opts_.margin.right = rbase;
                    opts_.margin.left = lbase + width;
                    lbase = opts_.margin.left - info.base.code.labelsep;
                } else {
                    opts_.margin.left = lbase;
                    opts_.margin.right = rbase;
                }
                var pageMargin = writer.makeMarginSize();
                var left = base - info.base.code.padding;
                var right = pageMargin.pageWidth - opts_.margin.right;
                var linetop1 = writer.getLineTop(context.font.fontObj, codeFontSize);
                var lineWidth = opts_.box.isArray ? opts_.box[0] : opts_.box;
                var linelength = right - left;
                var shadow = opts_.box[1] == 0x01;
                if (lineWidth > 0) {
                    writer.drawLine(left, linetop1, linelength, 0, lineWidth, info.base.code.lineColor);
                    writer.addY(info.base.code.padding);
                }

                var isTop = false;
                var lineprev = linetop1;
                var texts = code_.trim().split(/\r?\n/);
                var tlast = texts.length() - 1;
                var lineFeedWidthBase = codeFontSize * 1.3;
                texts.each { &(line, i):
                    if (opts_.lineNumber) {
                        var num = "" + (i+1);
                        var x = lbase - info.measure.textWidth(fontObj, numberSize, num);
                        core.util.writeX(x, num, fontObj, numberSize);
                    }
                    core.util.writeLine(opts_, line, context.font.fontObj, codeFontSize, lineFeedWidthBase);

                    var isBreak = (writer.getPos(true).y < 0);
                    if (!isBreak) {
                        linetop1 = writer.getLineTop(context.font.fontObj, context.font.codeFontSize);
                        var height = lineprev - linetop1;
                        writer.drawLine(left, lineprev, 0, height, lineWidth, info.base.code.lineColor);
                        writer.drawLine(right, lineprev, 0, height, lineWidth, info.base.code.lineColor);
                        if (shadow) {
                            var top = isTop ? lineprev : (lineprev-2);
                            var height2 = isTop ? (height+5) : (height+3);
                            writer.drawLine(right+2, top, 0, height2, shadowWidth, info.base.code.lineColor);
                        }
                        lineprev = linetop1;
                        isTop = false;
                    } else {
                        var height = lineFeedWidthBase;
                        writer.drawLine(left, lineprev, 0, height, lineWidth, info.base.code.lineColor, -1);
                        writer.drawLine(right, lineprev, 0, height, lineWidth, info.base.code.lineColor, -1);
                        if (i == tlast) {
                            if (shadow) {
                                writer.drawLine(right+2, lineprev-2, 0, height+1, shadowWidth, info.base.code.lineColor, -1);
                            }
                            var top = lineprev - height;
                            writer.drawLine(left, top, linelength, 0, lineWidth, info.base.code.lineColor, -1);
                            if (shadow) {
                                writer.drawLine(left+2, top-2, linelength+1, 0, shadowWidth, info.base.code.lineColor, -1);
                            }
                            lineWidth = 0;  # no more drawing a line.
                        } else {
                            if (shadow) {
                                writer.drawLine(right+2, lineprev-2, 0, height-2, shadowWidth, info.base.code.lineColor, -1);
                            }
                            lineprev = pageMargin.pageHeight - margin.top;
                            isTop = true;
                        }
                    }
                };

                if (lineWidth > 0) {
                    writer.addY(lineFeedWidthBase);
                    var linetop2 = writer.getLineTop(context.font.fontObj, codeFontSize);
                    var height = lineprev - linetop2;
                    writer.drawLine(left, lineprev, 0, height, lineWidth, info.base.code.lineColor);
                    writer.drawLine(right, lineprev, 0, height, lineWidth, info.base.code.lineColor);
                    writer.drawLine(left, linetop2, linelength, 0, lineWidth, info.base.code.lineColor);
                    if (shadow) {
                        writer.drawLine(left+2, linetop2-2, linelength+1, 0, shadowWidth, info.base.code.lineColor);
                    }
                }
                writer.addY(lineFeedWidthBase);

                context.font.fontObjBase = fontObjBase;
                context.font.fontObj = fontObj;
            }
        }

    } # namespace Component

} # namespace Typesetting
