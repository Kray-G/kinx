namespace Typesetting {

    namespace Component {

        class Math(opts_, str_) : Component.Base(opts_) {
            var caption_;
            private initialize() {
                if (str_.isUndefined) {
                    [str_, opts_] = [opts_];
                }
            }
            public setLabel(label) {
                opts_.label ??= [];
                opts_.label.push(label);
            }
            public setCaption(caption) {
                caption_ = caption;
            }
            public write(info, context, core) {
                if (str_.isUndefined) {
                    str_ = opts_;
                    opts_ = null;
                }
                core.flushParagraph();

                var writer = info.writer;
                var fontSize = context.font.fontSize;
                var lineFeedWidth = fontSize * context.page.lineFeedWidthRatio;
                var img = Typesetting.Util.compileMath(str_, true, writer);
                var [bottom, height] = writer.imageCenter(img, 0.25);
                var linetop = bottom + height;
                if (opts_.label) {
                    context.counter.math ??= 0;
                    var nexty;
                    var labels = opts_.label.isArray ? opts_.label : [opts_.label];
                    labels.each { &(labelinfo):
                        var label = labelinfo.isString ? labelinfo : (labelinfo.isArray ? labelinfo[0] : null);
                        if (label) {
                            var offsetYRatio = labelinfo.isArray ? labelinfo[1] : 0;
                            var fontObj = context.font.fontObj;
                            var ascent = fontObj.getAscent() * fontSize / 1000;
                            var descent = fontObj.getDescent() * fontSize / 1000;
                            ++context.counter.math;
                            var counter = "(" + context.counter.math + ")";
                            var caption = new Typesetting.Word(info).setWord(fontObj, fontSize, counter);
                            var n = Typesetting.Linebreak.Box(caption.width, caption);
                            var y = offsetYRatio > 0
                                ? (linetop - (height * offsetYRatio))
                                : (bottom + (height / 2) - ((ascent - descent) / 2 + descent));
                            var pagenum = writer.getPageIndex();
                            context.xref[label] = {
                                page:      pagenum,
                                counter:   counter,
                                name:      counter,
                                text:      counter,
                                y:         nexty ?? linetop,
                            };
                            writer.writeMathCaption(n, y);
                            nexty = y + descent - 4;
                        }
                    };
                }
                writer.lineBreak(lineFeedWidth);
                if (caption_) {
                    @imageCaption(info, core, caption_, linetop);
                }
                return linetop;
            }
        }

    } # namespace Component

} # namespace Typesetting
