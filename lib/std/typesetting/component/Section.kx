namespace Typesetting {

    namespace Component {

        class Section(opts_, text_) : Component.Base {
            private initialize() {
                if (text_.isUndefined) {
                    [text_, opts_] = [opts_];
                }
                opts_ ??= {};
                @setOptionValue(opts_);
                @text = text_;
                @opts = opts_;
                @opts.label ??= @text;
            }
            public setText(text) {
                @text = text;
                @opts.label ??= @text;
            }
            public write(info, context, core) {
                context.outputSection = info.base.noIndentTopOfParagraph;
                info.writer.setColumn(info.base.columns);
                core.pendingParagraphList.push({
                    isSection: true,
                    lineFeedWidth: core.section.getHeight(1),
                    func: &() => {
                        var level = info.base.sectionLevel;
                        var [linetop, header] = core.section.exec(level, @opts, @text);
                        if (info.base.outline && level <= info.base.toc.level) {
                            var ol = info.writer.createOutline(context.outline[level - 1], core.makePlainText(header), true);
                            info.writer.setCurrentPage(ol, linetop);
                            context.outline[level] = ol;
                        }
                    },
                });
            }
        }

        class SubSection(opts_, text_) : Section(opts_, text_) {
            public write(info, context, core) {
                context.outputSection = info.base.noIndentTopOfParagraph;
                core.pendingParagraphList.push({
                    isSection: true,
                    lineFeedWidth: core.section.getHeight(2),
                    func: &() => {
                        var level = info.base.sectionLevel + 1;
                        var [linetop, header] = core.section.exec(level, @opts, @text);
                        if (info.base.outline && level <= info.base.toc.level) {
                            var ol = info.writer.createOutline(context.outline[level - 1], core.makePlainText(header), true);
                            info.writer.setCurrentPage(ol, linetop);
                            context.outline[level] = ol;
                        }
                    },
                });
            }
        }

        class SubSubSection(opts_, text_) : Section(opts_, text_) {
            public write(info, context, core) {
                context.outputSection = info.base.noIndentTopOfParagraph;
                core.pendingParagraphList.push({
                    isSection: true,
                    lineFeedWidth: core.section.getHeight(3),
                    func: &() => {
                        var level = info.base.sectionLevel + 2;
                        var [linetop, header] = core.section.exec(level, @opts, @text);
                        if (info.base.outline && level <= info.base.toc.level) {
                            var ol = info.writer.createOutline(context.outline[level - 1], core.makePlainText(header), true);
                            info.writer.setCurrentPage(ol, linetop);
                            context.outline[level] = ol;
                        }
                    },
                });
            }
        }

        class Chapter(opts_, text_) : Component.Base {
            private initialize() {
                if (text_.isUndefined) {
                    [text_, opts_] = [opts_];
                }
                opts_.label ??= text_;
            }
            public setText(text) {
                text_ = text;
                opts_.label ??= text_;
            }
            public write(info, context, core) {
                var chapterName = info.base.chapter.style;
                var chapterFunc = Typesetting.Style.Chapter[chapterName];
                if (!chapterFunc.isFunction) {
                    info.logger.warn("Not specified a chapter style...");
                    return;
                }

                # Chapter is an independent page and always an odd page.
                context.outputSection = info.base.noIndentTopOfParagraph;
                @pageBreak(info, core);

                var writer = info.writer;
                writer.setPageToOdd();
                writer.setColumn(1);

                var chapterInfo = chapterFunc(info, context, core, text_, opts_, this);
                var level = chapterInfo.level;
                if (info.base.footnote.resetSectionLevel == level) {
                    context.counter.footnote = 0;
                }
                if (opts_.label) {
                    var pagenum = writer.getPageIndex();
                    context.xref[opts_.label] = {
                        page:    pagenum,
                        counter: chapterInfo.number,
                        name:    chapterInfo.plain,
                        text:    chapterInfo.header,
                        y:       chapterInfo.linetop,
                    };
                }
                if (level <= info.base.toc.level) {
                    context.tocinfo.list.push({
                        isChapter: true,
                        page:   context.counter.page,
                        level:  level,
                        number: chapterInfo.number,
                        header: chapterInfo.header,
                        y:      chapterInfo.linetop,
                    });
                }
                if (info.base.outline) {
                    var margin = writer.makeMarginSize();
                    var ol = writer.createOutline(context.outline[0], core.makePlainText(chapterInfo.plain), true);
                    writer.setCurrentPage(ol, chapterInfo.linetop);
                    context.outline[1] = ol;
                }

                writer.setColumn(info.base.columns);
            }
        }

    } # namespace Component

} # namespace Typesetting
