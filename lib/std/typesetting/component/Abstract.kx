namespace Typesetting {

    namespace Component {

        class Abstract(opts_, text_) : Component.Base(opts_) {
            private initialize() {
                if (text_.isUndefined) {
                    [text_, opts_] = [opts_];
                }
            }

            public setText(text) {
                text_ = text;
            }

            public write(info, context, core) {
                [opts_, text_] = core.util.makeOption(opts_, text_);
                var titleText;
                var abstbase = info.base.abstract;
                var linetop = info.writer.getLineTop(context.font.fontObj, abstbase.fontSize);
                if (!abstbase.noTitle) {
                    var fontObj = context.font.fontObj;
                    context.font.fontObj = context.font.fontObjBase.bold;
                    var title = abstbase.title;
                    titleText = title.text;
                    if (title.center) {
                        core.util.writeCenter(opts_, titleText, context.font.fontObj, abstbase.fontSize, abstbase.lineFeedWidth);
                    } else if (title.right) {
                        core.util.writeRight(opts_, titleText, context.font.fontObj, abstbase.fontSize, abstbase.lineFeedWidth);
                    } else {
                        core.util.writeLeft(opts_, titleText, context.font.fontObj, abstbase.fontSize, abstbase.lineFeedWidth);
                    }
                    context.font.fontObj = fontObj;
                }
                var writer = info.writer;
                var pageWidth = writer.getPage().getWidth();
                var margin = writer.getPageMargin();
                var width = (pageWidth - margin.left - margin.right) - abstbase.margin.left - abstbase.margin.right;
                @set(core, { margin: { left: margin.left + abstbase.margin.left, right: margin.right + abstbase.margin.right } }) {
                    var lines = core.paragraph.exec(opts_, text_);
                    core.util.write(lines, info.base.abstract.adjustment);
                };
                writer.addY(abstbase.paragraphSkipWidth, true);
                writer.setYHead();
                if (titleText && info.base.outline) {
                    var ol = writer.createOutline(null, core.makePlainText(titleText), true);
                    writer.setCurrentPage(ol, linetop);
                }
            }
        }

    } # namespace Component

} # namespace Typesetting
