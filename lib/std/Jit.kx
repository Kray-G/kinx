const Jit;
(_function() {
    var JitCompiler = _import("kxjit");
    Jit = JitCompiler.setup();
    Jit.dump = JitCompiler.dumpBinary;

    Jit.MEM = 0x80;
    Jit.MEM0 = _function(offset) { return [Jit.MEM, offset ?? 0, 'm'[0]]; };
    Jit.MEM1 = _function(r1, offset, isV) { return [(Jit.MEM | (r1[0])), offset ?? 0, isV ?? 'm'[0]]; };
    Jit.MEM2 = _function(r1, r2, offset) { return [(Jit.MEM | (r1[0]) | ((r2[0]) << 8)), offset ?? 0, 'm'[0]]; };
    Jit.IMM = _function(v) { return [0x40, v, 'c'[0]]; };
    Jit.VAR = _function(n) { return Jit.MEM1(Jit.SP, n * 8, 'l'[0]); };

    Jit.ArgType.SW =
    Jit.ArgType.SW_SW =
    Jit.ArgType.SW_SW_SW = (1 << 4) | (1 << 8) | (1 << 12);
    Jit.ArgType.SW_SW_UW = (1 << 4) | (1 << 8) | (2 << 12);
    Jit.ArgType.SW_SW_FP = (1 << 4) | (1 << 8) | (6 << 12);
    Jit.ArgType.SW_UW =
    Jit.ArgType.SW_UW_SW = (1 << 4) | (2 << 8) | (1 << 12);
    Jit.ArgType.SW_UW_UW = (1 << 4) | (2 << 8) | (2 << 12);
    Jit.ArgType.SW_UW_FP = (1 << 4) | (2 << 8) | (6 << 12);
    Jit.ArgType.SW_FP =
    Jit.ArgType.SW_FP_SW = (1 << 4) | (6 << 8) | (1 << 12);
    Jit.ArgType.SW_FP_UW = (1 << 4) | (6 << 8) | (2 << 12);
    Jit.ArgType.SW_FP_FP = (1 << 4) | (6 << 8) | (6 << 12);

    Jit.ArgType.UW =
    Jit.ArgType.UW_SW =
    Jit.ArgType.UW_SW_SW = (2 << 4) | (1 << 8) | (1 << 12);
    Jit.ArgType.UW_SW_UW = (2 << 4) | (1 << 8) | (2 << 12);
    Jit.ArgType.UW_SW_FP = (2 << 4) | (1 << 8) | (6 << 12);
    Jit.ArgType.UW_UW =
    Jit.ArgType.UW_UW_SW = (2 << 4) | (2 << 8) | (1 << 12);
    Jit.ArgType.UW_UW_UW = (2 << 4) | (2 << 8) | (2 << 12);
    Jit.ArgType.UW_UW_FP = (2 << 4) | (2 << 8) | (6 << 12);
    Jit.ArgType.UW_FP =
    Jit.ArgType.UW_FP_SW = (2 << 4) | (6 << 8) | (1 << 12);
    Jit.ArgType.UW_FP_UW = (2 << 4) | (6 << 8) | (2 << 12);
    Jit.ArgType.UW_FP_FP = (2 << 4) | (6 << 8) | (6 << 12);

    Jit.ArgType.FP =
    Jit.ArgType.FP_SW =
    Jit.ArgType.FP_SW_SW = (6 << 4) | (1 << 8) | (1 << 12);
    Jit.ArgType.FP_SW_UW = (6 << 4) | (1 << 8) | (2 << 12);
    Jit.ArgType.FP_SW_FP = (6 << 4) | (1 << 8) | (6 << 12);
    Jit.ArgType.FP_UW =
    Jit.ArgType.FP_UW_SW = (6 << 4) | (2 << 8) | (1 << 12);
    Jit.ArgType.FP_UW_UW = (6 << 4) | (2 << 8) | (2 << 12);
    Jit.ArgType.FP_UW_FP = (6 << 4) | (2 << 8) | (6 << 12);
    Jit.ArgType.FP_FP =
    Jit.ArgType.FP_FP_SW = (6 << 4) | (6 << 8) | (1 << 12);
    Jit.ArgType.FP_FP_UW = (6 << 4) | (6 << 8) | (2 << 12);
    Jit.ArgType.FP_FP_FP = (6 << 4) | (6 << 8) | (6 << 12);

    class JitCodeRunner(bin_, argTypes_) {
        public run(a, b, c) {
            return JitCompiler.runBinary(bin_, argTypes_ ?? Jit.ArgType.SW, a, b, c);
        }
        public frun(a, b, c) {
            return JitCompiler.frunBinary(bin_, argTypes_ ?? Jit.ArgType.SW, a, b, c);
        }
    }

    _class JitCode(c_) {
        public dump() {
            return c_.dumpCode();
        }
        public getBinary() {
            return c_.getBinary();
        }
        public run(a, b, c) {
            return c_.runCode(a, b, c);
        }
        public frun(a, b, c) {
            return c_.runCodeDouble(a, b, c);
        }
    }

    _class JumpTarget(c_, repl_, i_) {
        public setLabel(label) {
            repl_.push(_function() { c_.setLabel(i_, label); });
        }
    }

    _class ConstTarget(c_, i_) {
        public setLabel(label) {
            if (!c_.fixed) {
                throw RuntimeException("Setting a const value should be after generated a code");
            }
            c_.setConstByLabel(i_, label);
        }
        public setValue(value) {
            if (!c_.fixed) {
                throw RuntimeException("Setting a const value should be after generated a code");
            }
            if (value.isInteger) {
                c_.setConstInt(i_, value);
            } else if (value.isDouble) {
                c_.setConstDbl(i_, value);
            } else if (value.isString) {
                c_.setConstStr(i_, value);
            } else if (value.isBinary) {
                c_.setConstBin(i_, value);
            } else {
                throw RuntimeException("Unsupported type of constant value");
            }
        }
    }

    _class Compiler() {
        var c_ = new JitCompiler();
        var func_ = [], repl_ = [];
        var chk_, inst_, label_ = 0, jump_ = 0, const_ = 0;
        private isMEM(v) {
            return v[2] == 'm'[0] || v[2] == 'l'[0];
        }
        private isImmFP(v) {
            return v[1].isDouble && v[0] == 0x40 && v[2] == 'c'[0];
        }
        private isFP(...a) {
            for (var i = 0, l = a.length(); i < l; ++i) {
                var v = a[i];
                if (v[2] == 'c'[0]) {
                    return false;
                }
                if (v[2] == 'm'[0] || v[2] == 'l'[0]) {
                    return false;
                }
                if (v[2] != 'r'[0] && v[2] != 's'[0]) {
                    return false;
                }
            }
            return true;
        }
        private isNotFP(...a) {
            for (var i = 0, l = a.length(); i < l; ++i) {
                var v = a[i];
                if (v[2] == 'm'[0] || v[2] == 'c'[0] || v[2] == 'l'[0]) {
                    continue;
                }
                if (v[2] == 'r'[0] || v[2] == 's'[0]) {
                    return false;
                }
            }
            return true;
        }
        private checkIsDstNotFP(dst) {
            if (isFP(dst)) {
                throw RuntimeException("Can not use a floating point register");
            }
        }
        private checkRegister(op) {
            if (op.isUndefined || !op.isArray) {
                return;
            }
            if (op.length() <= 2) {
                return;
            }
            var key = op[2] ?? 0;
            var n = op[3];
            if (key == 'l'[0]) {
                var index = Integer.parseInt(op[1] / 8);
                if (index.isInteger && chk_.local <= index) {
                    chk_.local = index + 1;
                }
            } else if (key.isDefined && n.isInteger) {
                key = *key;
                ++n;
                if (chk_[key] < n) {
                    chk_[key] = n;
                }
            }
        }
        private makeLiteral(op1) {
            if (op1.isInteger || op1.isDouble) {
                op1 = Jit.IMM(op1);
            }
            return op1;
        }
        public label() {
            inst_.push(_function() { c_.label(); });
            return label_++;
        }
        public makeConst(reg, init) {
            checkRegister(reg);
            checkRegister(init);
            if (isFP(reg)) {
                inst_.push(_function() { c_.makeConstDbl(reg, init ?? 0); });
            } else {
                inst_.push(_function() { c_.makeConst(reg, init ?? 0); });
            }
            return new ConstTarget(c_, const_++);
        }
        public localp(dst, offset) {
            checkIsDstNotFP(dst);
            checkRegister(dst);
            if (offset.isUndefined || offset.isInteger) {
                inst_.push(_function() { c_.getLocalAddress(dst, offset ?? 0); });
            } else {
                checkRegister(offset);
                inst_.push(_function() { c_.getLocalAddressBy(dst, offset); });
            }
        }
        public enter(argType) {
            inst_ = [];
            chk_ = { R: 3, S: 3, r: 3, s: 0, local: 0, entry: label(), fast: false, argType: argType ?? Jit.ArgType.SW_SW_SW };
            func_.push({ inst: inst_, chk: chk_ });
            inst_.push(_function(callback) { callback.enter(); });
            return chk_.entry;
        }
        public fastEnter(reg) {
            inst_ = [];
            chk_ = { R: 0, S: 0, r: 0, s: 0, local: 0, entry: label(), fast: true, reg: reg };
            func_.push({ inst: inst_, chk: chk_ });
            checkRegister(reg);
            inst_.push(_function(callback) { callback.enter(reg); });
            return chk_.entry;
        }
        public ret(val) {
            val = makeLiteral(val);
            checkRegister(val);
            if (chk_.fast) {
                if (isFP(val)) {
                    inst_.push(_function() { c_.fmov(Jit.FR0, val); });
                } else if (Jit.R0[0] != val[0] || Jit.R0[1] != val[1]) {
                    inst_.push(_function() { c_.mov(Jit.R0, val); });
                }
                inst_.push(_function() { c_.fastRet(chk_.reg); });
            } else {
                if (isFP(val)) {
                    if (Jit.FR0[0] != val[0] || Jit.FR0[1] != val[1]) {
                        inst_.push(_function() { c_.fmov(Jit.FR0, val); });
                    }
                    inst_.push(_function() { c_.ret(Jit.R0); });
                } else {
                    inst_.push(_function() { c_.ret(val); });
                }
            }
        }
        private operate1(intf, dst, op1) {
            checkRegister(dst);
            checkRegister(op1);
            inst_.push(_function() { c_[intf](dst, op1); });
        }
        private operate2(intf, dst, op1, op2) {
            checkRegister(dst);
            checkRegister(op1);
            checkRegister(op2);
            inst_.push(_function() { c_[intf](dst, op1, op2); });
        }
        public div32(dst, op1, op2) {
            if (dst.isUndefined && op1.isUndefined && op2.isUndefined) {
                # (unsigned) Jit.R0 / Jit.R1 => Jit.R0
                inst_.push(_function() { c_.div32(); });
            } else if (isFP(dst, op1, op2)) {
                operate2("fdiv32", dst, op1, op2);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public sdiv32() {
            # (signed) Jit.R0 / Jit.R1 => Jit.R0
            inst_.push(_function() { c_.sig_div32(); });
        }
        public divmod32() {
            # (unsigned) Jit.R0 / Jit.R1 => Jit.R0 ... Jit.R1
            inst_.push(_function() { c_.divmod32(); });
        }
        public sdivmod32() {
            # (signed) Jit.R0 / Jit.R1 => Jit.R0 ... Jit.R1
            inst_.push(_function() { c_.sig_divmod32(); });
        }
        public div(dst, op1, op2) {
            if (dst.isUndefined && op1.isUndefined && op2.isUndefined) {
                # (unsigned) Jit.R0 / Jit.R1 => Jit.R0
                inst_.push(_function() { c_.div(); });
            } else if (isFP(dst, op1, op2)) {
                operate2("fdiv", dst, op1, op2);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public sdiv() {
            # (signed) Jit.R0 / Jit.R1 => Jit.R0
            inst_.push(_function() { c_.sig_div(); });
        }
        public divmod() {
            # (unsigned) Jit.R0 / Jit.R1 => Jit.R0 ... Jit.R1
            inst_.push(_function() { c_.divmod(); });
        }
        public sdivmod() {
            # (signed) Jit.R0 / Jit.R1 => Jit.R0 ... Jit.R1
            inst_.push(_function() { c_.sig_divmod(); });
        }
        public f2i(dst, op1) {
            if (isNotFP(dst) && isFP(op1)) {
                operate1("conv_f64_sw", dst, op1);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public i2f(dst, op1) {
            if (isFP(dst) && isNotFP(op1)) {
                operate1("conv_sw_f64", dst, op1);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        private fmovX(dst, op1, fm, conv) {
            op1 = makeLiteral(op1);
            if (isFP(dst)) {
                if (isMEM(op1) || isFP(op1)) {
                    operate1(fm, dst, op1);
                } else {
                    operate1(conv, dst, op1);
                }
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public fmov32(dst, op1) {
            return fmovX(dst, op1, "fmov32", "conv_s64_f32");
        }
        public fmov(dst, op1) {
            return fmovX(dst, op1, "fmov", "conv_sw_f64");
        }
        public movX(dst, op1, mv) {
            op1 = makeLiteral(op1);
            if (!isFP(dst)) {
                if (!isFP(op1)) {
                    operate1(mv, dst, op1);
                } else {
                    throw RuntimeException("Type mismatch");
                }
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public mov8s(dst, op1) {
            return movX(dst, op1, "mov8s");
        }
        public mov16s(dst, op1) {
            return movX(dst, op1, "mov16s");
        }
        public mov32s(dst, op1) {
            return movX(dst, op1, "mov32s");
        }
        public mov8(dst, op1) {
            return movX(dst, op1, "mov8");
        }
        public mov16(dst, op1) {
            return movX(dst, op1, "mov16");
        }
        public mov32(dst, op1) {
            op1 = makeLiteral(op1);
            if (!isFP(dst)) {
                if (isFP(op1)) {
                    operate1("conv_f64_s32", dst, op1);
                } else {
                    operate1("mov32", dst, op1);
                }
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public mov(dst, op1) {
            op1 = makeLiteral(op1);
            if (isFP(dst)) {
                if (isMEM(op1) || isFP(op1)) {
                    operate1("fmov", dst, op1);
                } else if (isImmFP(op1)) {
                    operate1("fmovimm", dst, op1);
                } else {
                    operate1("conv_sw_f64", dst, op1);
                }
            } else if (isMEM(dst)) {
                if (isFP(op1) || isImmFP(op1)) {
                    operate1("fmov", dst, op1);
                } else if (op1.isString) {
                    operate1("movs", dst, op1);
                } else if (op1.isBinary) {
                    operate1("movb", dst, op1);
                } else {
                    operate1("mov", dst, op1);
                }
            } else {
                if (isFP(op1)) {
                    operate1("conv_f64_sw", dst, op1);
                } else if (isImmFP(op1)) {
                    op1[1] = Integer.parseInt(op1[1]);
                    operate1("mov", dst, op1);
                } else if (op1.isString) {
                    operate1("movs", dst, op1);
                } else if (op1.isBinary) {
                    operate1("movb", dst, op1);
                } else {
                    operate1("mov", dst, op1);
                }
            }
        }
        private op1convX(dst, op1, conv, s) {
            checkIsDstNotFP(dst);
            if (isFP(op1)) {
                operate1(conv, dst, op1);
            }
            operate1(s, dst, dst);
        }
        public not32(dst, op1) {
            return op1convX(dst, op1, "conv_f64_s32", "not32");
        }
        public neg32(dst, op1) {
            return op1convX(dst, op1, "conv_f64_s32", "neg32");
        }
        public clz32(dst, op1) {
            return op1convX(dst, op1, "conv_f64_s32", "clz32");
        }
        public not(dst, op1) {
            return op1convX(dst, op1, "conv_f64_sw", "not");
        }
        public neg(dst, op1) {
            return op1convX(dst, op1, "conv_f64_sw", "neg");
        }
        public clz(dst, op1) {
            return op1convX(dst, op1, "conv_f64_sw", "clz");
        }
        private op2x(dst, op1, op2, f, s) {
            op1 = makeLiteral(op1);
            op2 = makeLiteral(op2);
            if (isFP(dst, op1, op2)) {
                operate2(f, dst, op1, op2);
            } else if (isNotFP(dst, op1, op2)) {
                operate2(s, dst, op1, op2);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        private op1x(dst, op1, op2, s) {
            op1 = makeLiteral(op1);
            op2 = makeLiteral(op2);
            if (isNotFP(dst, op1, op2)) {
                operate2(s, dst, op1, op2);
            } else {
                throw RuntimeException("Type mismatch");
            }
        }
        public add32(dst, op1, op2) {
            return op2x(dst, op1, op2, "fadd32", "add32");
        }
        public sub32(dst, op1, op2) {
            return op2x(dst, op1, op2, "fsub32", "sub32");
        }
        public mul32(dst, op1, op2) {
            return op2x(dst, op1, op2, "fmul32", "mul32");
        }
        public and32(dst, op1, op2) {
            return op2x(dst, op1, op2, "and32");
        }
        public or32(dst, op1, op2) {
            return op2x(dst, op1, op2, "or32");
        }
        public xor32(dst, op1, op2) {
            return op2x(dst, op1, op2, "xor32");
        }
        public shl32(dst, op1, op2) {
            return op2x(dst, op1, op2, "shl32");
        }
        public lshr32(dst, op1, op2) {
            return op2x(dst, op1, op2, "lshr32");
        }
        public ashr32(dst, op1, op2) {
            return op2x(dst, op1, op2, "ashr32");
        }
        public add(dst, op1, op2) {
            return op2x(dst, op1, op2, "fadd", "add");
        }
        public sub(dst, op1, op2) {
            return op2x(dst, op1, op2, "fsub", "sub");
        }
        public mul(dst, op1, op2) {
            return op2x(dst, op1, op2, "fmul", "mul");
        }
        public and(dst, op1, op2) {
            return op2x(dst, op1, op2, "and");
        }
        public or(dst, op1, op2) {
            return op2x(dst, op1, op2, "or");
        }
        public xor(dst, op1, op2) {
            return op2x(dst, op1, op2, "xor");
        }
        public shl(dst, op1, op2) {
            return op2x(dst, op1, op2, "shl");
        }
        public lshr(dst, op1, op2) {
            return op2x(dst, op1, op2, "lshr");
        }
        public ashr(dst, op1, op2) {
            return op2x(dst, op1, op2, "ashr");
        }
        public call(label) {
            inst_.push(_function() { c_.call(label); });
            return new JumpTarget(c_, repl_, jump_++);
        }
        public fastCall(label) {
            inst_.push(_function() { c_.fastCall(label); });
            return new JumpTarget(c_, repl_, jump_++);
        }
        public jmp(label) {
            inst_.push(_function() { c_.jump(label); });
            return new JumpTarget(c_, repl_, jump_++);
        }
        public ijmp(dst) {
            dst = makeLiteral(dst);
            checkRegister(dst);
            inst_.push(_function() { c_.ijump(dst); });
        }
        public icall(dst) {
            dst = makeLiteral(dst);
            checkRegister(dst);
            inst_.push(_function() { c_.icall(dst); });
        }
        private operateCmp(intf, op1, op2) {
            checkRegister(op1);
            checkRegister(op2);
            inst_.push(_function() { c_[intf](op1, op2); });
        }
        private operateCmpX(op1, op2, s, f) {
            op1 = makeLiteral(op1);
            op2 = makeLiteral(op2);
            if (isNotFP(op1, op2)) {
                operateCmp(s, op1, op2);
            } else {
                if (isImmFP(op2)) {
                    throw RuntimeException("Immediate value cannot be used with Floating point comparison, assign it to the register first.");
                }
                operateCmp(f, op1, op2);
            }
            return new JumpTarget(c_, repl_, jump_++);
        }
        private operateCmpSX(op1, op2, s) {
            op1 = makeLiteral(op1);
            op2 = makeLiteral(op2);
            operateCmp(s, op1, op2);
            return new JumpTarget(c_, repl_, jump_++);
        }
        public eq32(op1, op2) {
            return operateCmpX(op1, op2, "eq32", "feq32");
        }
        public neq32(op1, op2) {
            return operateCmpX(op1, op2, "neq32", "fneq32");
        }
        public lt32(op1, op2) {
            return operateCmpX(op1, op2, "lt32", "flt32");
        }
        public le32(op1, op2) {
            return operateCmpX(op1, op2, "le32", "fle32");
        }
        public gt32(op1, op2) {
            return operateCmpX(op1, op2, "gt32", "fgt32");
        }
        public ge32(op1, op2) {
            return operateCmpX(op1, op2, "ge32", "fge32");
        }
        public slt32(op1, op2) {
            return operateCmpSX(op1, op2, "sig_lt32");
        }
        public sle32(op1, op2) {
            return operateCmpSX(op1, op2, "sig_le32");
        }
        public sgt32(op1, op2) {
            return operateCmpSX(op1, op2, "sig_gt32");
        }
        public sge32(op1, op2) {
            return operateCmpSX(op1, op2, "sig_ge32");
        }
        public eq(op1, op2) {
            return operateCmpX(op1, op2, "eq", "feq");
        }
        public neq(op1, op2) {
            return operateCmpX(op1, op2, "neq", "fneq");
        }
        public lt(op1, op2) {
            return operateCmpX(op1, op2, "lt", "flt");
        }
        public le(op1, op2) {
            return operateCmpX(op1, op2, "le", "fle");
        }
        public gt(op1, op2) {
            return operateCmpX(op1, op2, "gt", "fgt");
        }
        public ge(op1, op2) {
            return operateCmpX(op1, op2, "ge", "fge");
        }
        public slt(op1, op2) {
            return operateCmpSX(op1, op2, "sig_lt");
        }
        public sle(op1, op2) {
            return operateCmpSX(op1, op2, "sig_le");
        }
        public sgt(op1, op2) {
            return operateCmpSX(op1, op2, "sig_gt");
        }
        public sge(op1, op2) {
            return operateCmpSX(op1, op2, "sig_ge");
        }
        public generate() {
            func_.each(function(f) {
                var chk = f.chk;
                var enter = chk.fast
                    ? _function(reg) {
                        c_.fastEnter({ R: chk.R, S: chk.S, FR: chk.r, FS: chk.s, local: 0 }, reg);
                    }
                    : _function() {
                        c_.enter({ R: chk.R, S: chk.S, FR: chk.r, FS: chk.s, local: chk.local * 8, argType: chk.argType });
                    };
                f.inst.each(_function(inst) {
                    inst({ enter: enter });
                });
            });
            repl_.each(&(inst) => {
                inst();
            });
            c_.fix();
            c_.fixed = true;
            return new JitCode(c_);
        }
    }

    Jit.Compiler = Compiler;
    Jit.Runner = JitCodeRunner;

})();
