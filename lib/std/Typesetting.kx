using PdfCore;
using typesetting.LineBreak;
using typesetting.Measurement;
using typesetting.PdfWriter;
using typesetting.ParagraphParser;
using typesetting.lang;

namespace Typesetting {

    var Linebreak = Typesetting.Linebreak;
    var hyphenPenalty_ = Hypher.hyphenPenalty_;
    var Word = Typesetting.Word;

    class Document(options_) {
        var info_, context_, opts_;
        var fontObjSerifBase_, fontObjSansBase_;
        var fontObjSerif_, fontObjSans_;
        var fontObjMonotype_, fontObjMonotypeBase_;
        var pendings_ = [];
        var defs_ = {};

        private initialize() {
            if (options_.create.isFunction) {
                options_ = new options_().style;
            }
            var pagesize = options_.pagesize ?? PDF_PAGE_SIZE_A4;
            var direction = options_.direction ?? PDF_PAGE_PORTRAIT;
            var fontSize = options_.fontSize[0] ?? 10.0;
            var writer = new Typesetting.PdfWriter(pagesize, direction, options_.writer);
            [fontObjSerif_, fontObjSans_, fontObjMonotype_, fontObjSerifBase_, fontObjSansBase_, fontObjMonotypeBase_] = writer.getFontObjBase();
            var measure = new Typesetting.Measurement(writer.getPdf(), writer.getPage());
            info_.base = options_.clone();
            info_.measure = measure;
            info_.writer = writer;
            writer.setPageMargin(info_.base.margin);
            var pageSize = measure.getPageSize();
            context_ = {
                commands: [],
                sectionNumber: [],
                imageCounter: [1, 0],
                noIndent: false,
                page: {
                    width: pageSize.width,
                    height: pageSize.height,
                    paragraphSkipWidth: info_.base.paragraphSkipWidthRatio[0] * fontSize,
                    lineFeedWidthRatio: info_.base.lineFeedWidthRatio[0],
                },
                font: {
                    fontObj: fontObjSerif_,
                    fontObjBase: fontObjSerifBase_,
                    fontSize: fontSize,
                },
                fontSet: {
                    serif: {
                        fontObj: fontObjSerif_,
                        fontObjBase: fontObjSerifBase_,
                    },
                    sans: {
                        fontObj: fontObjSans_,
                        fontObjBase: fontObjSansBase_,
                    },
                    monotype: {
                        fontObj: fontObjMonotype_,
                        fontObjBase: fontObjMonotypeBase_,
                    },
                },
            };
            info_.paragraphParser = new Typesetting.ParagraphParser(context_, info_);
            info_.context = context_;

            @define("TeX", %!T\hspace[width=-0.152em]\lower[height=0.171em]{E}\hspace[width=-0.084em]X!);
            @define("LaTeX", %!L\hspace[width=-0.3em]\raise[height=0.3ex]{\font[size=0.8em]{A}}\hspace[width=-0.132em]\TeX!);
        }

        public justifyLines(lines) {
            var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
            var llast = lines.length() - 1;
            if (llast >= 0) {
                lines[-1].lineFeedWidth = context_.page.paragraphSkipWidth; 
            }
            lines.each { &(line, li):
                var lineFeedWidth = 0;
                var x1 = 0.0;
                var spaces = 0;
                var expected = line.width;
                var alen = line.nodes.length();
                var alast = alen - 1;
                line.nodes.each { &(n, i):
                    var value = n.value;
                    var word = value ? value.word : '';
                    if (n.isBox && word != '') {
                        var lfs = lineFeedWidthRatio * value.size;
                        if (lineFeedWidth < lfs) {
                            lineFeedWidth = lfs;
                        }
                        x1 += n.width;
                    } else if (n.isBox && word == '') {
                        # indent.
                        x1 += n.width;
                    } else if (n.isGlue && i != alast) {
                        x1 += n.width;
                        if (n.stretch > 0 || n.shrink > 0) {
                            ++spaces;
                        }
                    } else if (n.isGlue) {
                        # end of line.
                        ;
                    } else if (n.isPenalty && n.penalty == hyphenPenalty_ && i == alast) {
                        x1 += n.width;
                    }
                };
                if (li > 0) {
                    lines[li-1].lineFeedWidth = lineFeedWidth;
                }
                var diff = spaces > 0 ? ((x1 - expected) / spaces) : 0;
                x1 = 0.0;
                line.nodes.each(function(n, i) {
                    var d = li == llast ? 0 : diff;
                    var value = n.value;
                    var word = value ? value.word : '';
                    if (n.isBox && word != '') {
                        value.x = x1;
                        x1 += n.width;
                    } else if (n.isBox && word == '') {
                        x1 += n.width;
                    } else if (n.isGlue && i != alast) {
                        if (n.stretch > 0 || n.shrink > 0) {
                            n.width -= d;
                        }
                        x1 += n.width;
                    } else if (n.isGlue) {
                        n.width = 0.0;
                    } else if (n.isPenalty && n.penalty == hyphenPenalty_ && i == alast) {
                        value.x = x1;
                        n.value.word = "-";
                        x1 += n.width;
                    } else {
                        n.width = 0.0;
                    }
                });
            };
        }

        public write(lines) {
            if (lines.length() == 0) {
                return;
            }
            var writer = info_.writer;
            var pos = writer.getPositionBase();
            var y = pos.y;
            var y1 = pos.y;
            var bottom = pos.bottom;
            var ll = lines.length();
            var widowCheck = ll - info_.base.widowPenalty;
            var doColumnBreak;
            if (y > 0) {
                for (var i = 0; i < widowCheck; ++i) {
                    y -= lines[i].lineFeedWidth;
                }
                for (var i = widowCheck; i < ll; ++i) {
                    y -= lines[i].lineFeedWidth;
                    if (y < bottom) {
                        doColumnBreak = true;
                        break;
                    }
                }
            }
            --widowCheck;
            lines.each { &(line, i):
                if (doColumnBreak && widowCheck == i) {
                    writer.columnBreak();
                }
                line.nodes.each { => writer.write(_1) };
                var colBreaked = writer.lineBreak(line.lineFeedWidth);
                if (colBreaked) {
                    doColumnBreak = false;
                }
            };
        }

        private makeOption(opts, text, replaceText) {
            if (text.isUndefined && opts.isString) {
                text = opts;
                opts = null;
            }
            if (opts_ && !opts.isObject) {
                opts = opts_;
            }
            if (text && (replaceText.isUndefined || replaceText)) {
                defs_.each {
                    text = text.replace(_1.regex, _1.value);
                };
            }
            return [opts, text];
        }

        private makeMargin(opts) {
            var margin = info_.base.margin.clone();
            if (opts.margin.left) {
                margin.left = opts.margin.left;
            }
            if (opts.margin.right) {
                margin.right = opts.margin.right;
            }
            return margin;
        }

        public columnBreak() {
            info_.writer.columnBreak();
        }

        public pageBreak() {
            info_.writer.pageBreak();
        }

        public define(name, value) {
            defs_.unshift({
                regex: new Regex("\\\\" + name + "\\b"),
                value: value,
            });
        }

        private writeCenter(opts, text, fontObj, fontSize, lineFeedWidth) {
            var textWidth = info_.measure.textWidth(fontObj.utf8, fontSize, text);
            var writer = info_.writer;
            var margin = writer.makeMarginSize();
            var x = (margin.width - textWidth) / 2 + margin.left;
            var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
            writer.write(n, x);
            writer.lineBreak(lineFeedWidth);
            writer.setYHead();
        }

        private writeLine(opts, text, fontObj, fontSize, lineFeedWidth) {
            var writer = info_.writer;
            var textWidth = info_.measure.textWidth(fontObj.utf8, fontSize, text);
            var margin = writer.makeMarginSize();
            var x = margin.left;
            var n = Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, text));
            writer.write(n, x);
            writer.lineBreak(lineFeedWidth);
        }

        private paragraphBase(opts, text, settings) {
            [opts, text] = makeOption(opts, text, false);

            var fontObj = context_.font.fontObj;
            var fontSize = context_.font.fontSize;
            var margin = makeMargin(opts);
            info_.writer.setMargin(margin);
            var marginSize = info_.writer.makeMarginSize();
            var areaWidth = marginSize.width;
            var wordSet = info_.paragraphParser.parse(text);
# wordSet.display();
            var words = wordSet.flatten();
            var nodes = [];
            if (!context_.noIndent) {
                nodes.push(Linebreak.Box(info_.base.indentSize, new Word(info_).setWord(fontObj, fontSize, '')));
            }
            if (settings.preText) {
                var textWidth = info_.measure.textWidth(fontObj.utf8, fontSize, settings.preText);
                nodes.push(Linebreak.Box(textWidth, new Word(info_).setWord(fontObj, fontSize, settings.preText)));
                if (settings.preTextSpace) {
                    var width = settings.preTextSpace;
                    var stretch = (fontSize * 3) / 6;
                    var shrink = (fontSize * 3) / 9;
                    nodes.push(Linebreak.Glue(width, stretch, shrink));
                }
            }
            Typesetting.insertGlue.ja(info_, Linebreak, words, nodes);
            if (nodes[-1].isGlue) {
                nodes.pop();
            }
            nodes.push(Linebreak.Glue(0, Linebreak.Infinity, 0));
            nodes.push(Linebreak.Penalty(0, -Linebreak.Infinity, 1));
# nodes.each { => _1.display() };
            var breaks;
            for (var i = 1; i < 10; ++i) {
                breaks = new Linebreak(nodes, [areaWidth], { tolerance: i }).parse();
                if (breaks.length() > 0) {
                    break;
                }
            }

            var lines = [];
            if (breaks.length() == 0) {
                var spaceWidth = info_.measure.spaceWidth(fontObj.utf8, fontSize);
                var nl = nodes.length();
                var ns = [];
                var x = 0.0;
                for (var i = 0; i < nl; ++i) {
                    var n = nodes[i];
                    x += n.width;
                    if (x < areaWidth) {
                        ns.push(n);
                    } else {
                        lines.push({
                            ratio: 0,
                            nodes: ns,
                            position: 0,
                            width: areaWidth,
                            lineFeedWidth: 0,
                        });
                        ns = [];
                        x = 0.0;
                    }
                }
                if (ns.length() > 0) {
                    lines.push({
                        ratio: 0,
                        nodes: ns,
                        position: 0,
                        width: areaWidth,
                        lineFeedWidth: 0,
                    });
                }
                # TODO: warning.
                System.println("Warning: no lines...; ", lines.length());
                System.println("----");
                System.println(text);
                System.println("----");
            } else {
                var lineStart = 0;
                for (var i = 1, blen = breaks.length(); i < blen; ++i) {
                    var point = breaks[i].position;
                    var r = breaks[i].ratio;
                    for (var j = lineStart, nlen = nodes.length(); j < nlen; ++j) {
                        # After a line break, we skip any nodes unless they are boxes or forced breaks.
                        if (nodes[j].isBox || (nodes[j].isPenalty && nodes[j].penalty == -Linebreak.Infinity)) {
                            lineStart = j;
                            break;
                        }
                    }
                    lines.push({
                        ratio: r,
                        nodes: nodes.subArray(lineStart, point + 1 - lineStart),
                        position: point,
                        width: areaWidth,
                        lineFeedWidth: 0,
                    });
                    lineStart = point;
                }
            }
            if (opts.label.isBox) {
                lines[0].nodes.unshift(opts.label);
            }
            justifyLines(lines);
            return lines;
        }

        private sectionBase(level, opts, text) {
            [opts, text] = makeOption(opts, text);

            var sectionNumber = context_.sectionNumber[level] ?? 0;
            var numText = [];
            if (context_.check) {
                for (var i = 1, l = context_.sectionNumber.length(); i < l; ++i) {
                    if (i <= level) {
                        numText.push(context_.sectionNumber[i]);
                    }
                }
            } else {
                context_.sectionNumber[level] = ++sectionNumber;
                var newNumbers = [];
                for (var i = 1, l = context_.sectionNumber.length(); i < l; ++i) {
                    if (i <= level) {
                        newNumbers[i] = context_.sectionNumber[i];
                        numText.push(newNumbers[i]);
                    } else {
                        newNumbers[i] = 0;
                    }
                }
                context_.sectionNumber = newNumbers;
            }
            var sectionNumberText = numText.join('.');
            var font = context_.font;
            context_.font = {
                fontObj: context_.font.fontObjBase.bold,
                fontSize: info_.base.fontSize[level],
            };

            var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
            context_.page.lineFeedWidthRatio = info_.base.lineFeedWidthRatio[level];
            var paragraphSkipWidth = context_.page.paragraphSkipWidth;
            context_.page.paragraphSkipWidth = context_.font.fontSize * info_.base.paragraphSkipWidthRatio[level];
            if (!info_.writer.isTopOfPage()) {
                var marginSize = info_.base.paragraphSkipWidthRatio[level] * context_.font.fontSize;
                info_.writer.setMarginAbove(marginSize / 2);
            }
            var indent = context_.noIndent;
            context_.noIndent = true;
            var lines = paragraphBase(opts, text, { preText: sectionNumberText, preTextSpace: context_.font.fontSize });
            write(lines);
            context_.noIndent = indent;
            context_.page.paragraphSkipWidth = paragraphSkipWidth;
            context_.page.lineFeedWidthRatio = lineFeedWidthRatio;
            context_.font = font;
        }

        private flushParagraph() {
            var writer = info_.writer;
            var totalLineFeeds = pendings_.sum({ => _1.lineFeedWidth ?? 0 });
            writer.checkColumnBreak(totalLineFeeds);
            pendings_.each { => _1.func() };
            pendings_ = [];
        }

        public title(opts, text) {
            [opts, text] = makeOption(opts, text);
            info_.writer.setColumn(1);
            writeCenter(opts, text, context_.font.fontObj, info_.base.title.fontSize, info_.base.title.lineFeedWidth);
        }

        public abstract(opts, text) {
            [opts, text] = makeOption(opts, text);
            var fontObj = context_.font.fontObj;
            context_.font.fontObj = context_.font.fontObjBase.bold;
            writeCenter(opts, info_.base.abstract.title, context_.font.fontObj, info_.base.abstract.fontSize, info_.base.abstract.lineFeedWidth);
            context_.font.fontObj = fontObj;
            var writer = info_.writer;
            var pageWidth = writer.getPage().getWidth();
            var margin = makeMargin(opts);
            var width = (pageWidth - margin.left - margin.right) * info_.base.abstract.widthRatio;
            var marginWidth = (pageWidth - width) / 2;
            @set({ margin: { left: marginWidth, right: marginWidth } }) {
                var lines = paragraphBase(opts, text);
                write(lines);
            };
            writer.addY(info_.base.abstract.paragraphSkipWidth, true);
        }

        private itemizeItem(opts, items, level, itemType, itemMarginBase, itemMargin, writer, margin) {
            var bullet = items.label ?? (info_.base.itemize.itemLabels[itemType][level] || '-');
            var textWidth = info_.measure.textWidth(context_.font.fontObj.utf8, context_.font.fontSize, bullet);
            var label = new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, bullet);
            label.offsetX = -info_.base.itemize.labelsep[level] - textWidth;
            var n = Linebreak.Box(0, label);
            var itemx = itemMarginBase + itemMargin;
            var itemlist = items.items;
            var ll = itemlist.length();
            for (var i = 0; i < ll; ++i) {
                var item = itemlist[i];
                if (item.items.isArray) {
                    item.level = level + 1;
                    @itemize({ margin: margin, itemMarginBase: itemx }, item);
                } else if (item.isString) {
                    [opts, item] = makeOption(opts, item);
                    var lines = paragraphBase({ label: n, margin: { left: margin.left + itemx } }, item || "((none))");
                    write(lines);
                }
            }

            if (level == 0) {
                writer.addY(context_.page.paragraphSkipWidth, false);
            }
        }

        private itemizeEnum(opts, items, level, itemType, counterInit, itemMarginBase, itemMargin, writer, margin) {
            var numberFormat = items.label ?? (info_.base.itemize.itemLabels[itemType][level] || '1. ');
            var format, counter, getCounter;
            if (numberFormat.find('1') >= 0) {
                counter = 1;
                format = '1';
                getCounter = function() { return counter + 1; };
            } else if (numberFormat.find('a') >= 0) {
                counter = 'a';
                format = 'a';
                getCounter = function() { return counter.next(); };
            } else if (numberFormat.find('i') >= 0) {
                var counterBase = 1;
                counter = Typesetting.Util.romanize(1);
                format = 'i';
                getCounter = function() { return Typesetting.Util.romanize(++counterBase); };
            } else if (numberFormat.find('I') >= 0) {
                var counterBase = 1;
                counter = Typesetting.Util.romanizeCap(1);
                format = 'i';
                getCounter = function() { return Typesetting.Util.romanizeCap(++counterBase); };
            } else if (numberFormat.find('A') >= 0) {
                counter = 'A';
                format = 'A';
                getCounter = function() { return counter.next(); };
            }
            while (--counterInit) {
                counter = getCounter();
            }
            var itemx = itemMarginBase + itemMargin;
            var itemlist = items.items;
            var ll = itemlist.length();
            for (var i = 0; i < ll; ++i) {
                var item = itemlist[i];
                if (item.items.isArray) {
                    item.level = level + 1;
                    @itemize({ margin: margin, itemMarginBase: itemx }, item);
                } else if (item.isString) {
                    var number = numberFormat.replace(format, ""+counter);
                    var textWidth = info_.measure.textWidth(context_.font.fontObj.utf8, context_.font.fontSize, number);
                    var label = new Word(info_).setWord(context_.font.fontObj, context_.font.fontSize, number);
                    label.offsetX = -info_.base.itemize.labelsep[level] - textWidth;
                    var n = Linebreak.Box(0, label);
                    [opts, item] = makeOption(opts, item);
                    var lines = paragraphBase({ label: n, margin: { left: margin.left + itemx } }, item || "((none))");
                    write(lines);
                    counter = getCounter();
                }
            }

            if (level == 0) {
                writer.addY(context_.page.paragraphSkipWidth, false);
            }
        }

        private itemizeImpl(opts, items) {
            if (items.isUndefined) {
                items = opts;
                opts = null;
            }
            var level = items.level ?? 0;
            var itemType = items.labelType ?? 'item';
            var fontSize = context_.font.fontSize;
            context_.font.fontSize = info_.base.itemize.fontSize[level];
            var indent = context_.noIndent;
            context_.noIndent = true;
            var paragraphSkipWidth = context_.page.paragraphSkipWidth;
            context_.page.paragraphSkipWidth = info_.base.itemize.paragraphSkipWidth[level];
            var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
            context_.page.lineFeedWidthRatio = info_.base.itemize.lineFeedWidthRatio[level];
            var itemMargin = info_.base.itemize.margin[level];
            var itemMarginBase = opts.itemMarginBase ?? 0;
            var margin = makeMargin(opts);
            if (itemType == "item") {
                itemizeItem(opts, items, level, itemType,
                    itemMarginBase,
                    itemMargin,
                    info_.writer,
                    margin);
            } else if (itemType == "enum") {
                itemizeEnum(opts, items, level, itemType, items.counter || 1,
                    itemMarginBase,
                    itemMargin,
                    info_.writer,
                    margin);
            }

            context_.page.lineFeedWidthRatio = lineFeedWidthRatio;
            context_.page.paragraphSkipWidth = paragraphSkipWidth;
            context_.font.fontSize = fontSize;
            context_.noIndent = indent;
        }

        public itemize(opts, items) {
            flushParagraph();
            itemizeImpl(opts, items);
        }

        public image(opts) {
            flushParagraph();

            info_.writer.imageCenter(opts.file);
            var fontSize = context_.font.fontSize;
            var lineFeedWidth = fontSize * context_.page.lineFeedWidthRatio;
            var level = context_.imageCounter[0];
            var num = ++context_.imageCounter[1];
            var lt = [];
            for (var i = 1; i <= level; ++i) {
                lt.push(context_.sectionNumber[i]);
            }
            lt.push("" + num);
            var caption = info_.base.image.label + ' ' + lt.join('.') + ' ' + opts.caption;
            writeCenter({}, caption, context_.font.fontObj, fontSize, lineFeedWidth);
            info_.writer.lineBreak(lineFeedWidth);
        }

        public paragraph(opts, text) {
            [opts, text] = makeOption(opts, text);
            var lines = paragraphBase(opts, text);
            var lineFeedWidth = 0;
            var ll = lines.length();
            var op = info_.base.orphanPenalty + 1;
            for (var i = 0, l = (op < ll ? op : ll); i < l; ++i) {
                lineFeedWidth += lines[i].lineFeedWidth;
            }
            pendings_.push({
                isParagraph: true,
                lineFeedWidth: lineFeedWidth,
                func: &() => {
                    write(lines);
                },
            });
            flushParagraph();
        }

        private getSectionHeight(level) {
            var lineFeedWidth = info_.base.fontSize[level] * info_.base.lineFeedWidthRatio[level];
            var paragraphSkipWidth = context_.font.fontSize * context_.page.lineFeedWidthRatio;
            var marginSize = info_.base.paragraphSkipWidthRatio[level] * context_.font.fontSize;
            return lineFeedWidth + paragraphSkipWidth + marginSize / 2;
        }

        public section(opts, text) {
            info_.writer.setColumn(info_.base.columns);
            pendings_.push({
                isSection: true,
                lineFeedWidth: getSectionHeight(1),
                func: &() => {
                    sectionBase(1, opts, text);
                },
            });
        }

        public subSection(opts, text) {
            pendings_.push({
                isSection: true,
                lineFeedWidth: getSectionHeight(2),
                func: &() => {
                    context_.imageCounter = [1, 0];
                    sectionBase(2, opts, text);
                },
            });
        }

        public subSubSection(opts, text) {
            pendings_.push({
                isSection: true,
                lineFeedWidth: getSectionHeight(3),
                func: &() => {
                    sectionBase(3, opts, text);
                },
            });
        }

        public fontType(type) {
            switch (type) {
            case "Serif":
                context_.font.fontObj = fontObjSerif_;
                context_.font.fontObjBase = fontObjSerifBase_;
                break;
            case "Sans":
                context_.font.fontObj = fontObjSans_;
                context_.font.fontObjBase = fontObjSansBase_;
                break;
            case "Monotype":
                context_.font.fontObj = fontObjMonotype_;
                context_.font.fontObjBase = fontObjMonotypeBase_;
                break;
            }
        }

        public code(opts, text) {
            flushParagraph();

            [opts, text] = makeOption(opts, text);
            var fontObj = context_.font.fontObj;
            var fontObjBase = context_.font.fontObjBase;
            fontType("Monotype");

            var margin = makeMargin(opts);
            var fontSize = context_.font.fontSize;
            opts.margin.left = margin.left + fontSize;
            var texts = text.split(/\r?\n/);
            var tlast = texts.length() - 1;
            var lineFeedWidthBase = fontSize * 1.3;
            texts.each { &(line, i):
                var lineFeedWidth = i == tlast ? (lineFeedWidthBase + context_.page.paragraphSkipWidth) : lineFeedWidthBase;
                writeLine(opts, line, context_.font.fontObj, fontSize, lineFeedWidth);
            };

            context_.font.fontObjBase = fontObjBase;
            context_.font.fontObj = fontObj;
        }

        public set(opts, func) {
            var fontObj = context_.font.fontObj;
            var fontObjBase = context_.font.fontObjBase;
            fontType(opts.fontType);
            opts_ = opts;
            func();
            opts_ = null;
            context_.font.fontObjBase = fontObjBase;
            context_.font.fontObj = fontObj;
        }

        public save(file) {
            flushParagraph();
            info_.writer.save(file);
        }
    }

} # namespace Typesetting
