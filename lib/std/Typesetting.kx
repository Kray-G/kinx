using PdfCore;
using typesetting.Logger;
using typesetting.LineBreak;
using typesetting.Measurement;
using typesetting.PdfWriter;
using typesetting.ParagraphParser;
using typesetting.lang;
using typesetting.ProcessDoc;
using typesetting.Component;

namespace Typesetting {

    var ProcessDoc = Typesetting.ProcessDoc;
    var Component = Typesetting.Component;
    var Linebreak = Typesetting.Linebreak;
    var Word = Typesetting.Word;

    class Document(style_, opts_) {
        var info_, context_, outline_;
        var fontObjSerifBase_, fontObjSansBase_;
        var fontObjSerif_, fontObjSans_;
        var fontObjMonotype_, fontObjMonotypeBase_;
        var core_ = {};

        private initialize() {
            if (style_.create.isFunction) {
                style_ = new style_();
            }
            info_.style = style_;
            style_ = style_.style;
            info_.logger = new Typesetting.Logger();
            info_.base = style_.clone();
            outline_ = info_.base.outline;
            var pagesize = style_.pagesize ?? PDF_PAGE_SIZE_A4;
            var direction = style_.direction ?? PDF_PAGE_PORTRAIT;
            var fontSize = style_.fontSize[0] ?? 10.0;
            var writer = new Typesetting.PdfWriter(pagesize, direction, info_);
            [fontObjSerif_, fontObjSans_, fontObjMonotype_, fontObjSerifBase_, fontObjSansBase_, fontObjMonotypeBase_] = writer.getFontObjBase();
            var measure = new Typesetting.Measurement(writer.getPdf(), writer.getPage());
            info_.measure = measure;
            info_.writer = writer;
            var pageSize = measure.getPageSize();
            context_ = {
                noIndent: false,
                indentSize: info_.base.indentSize,
                outputSection: info_.base.noIndentTopOfParagraph,
                commands: [],
                outline: [],
                counter: {
                    page: 1,
                    section: [],
                    image: [info_.base.image.level, 0, 0],
                    table: [info_.base.table.level, 0, 0],
                    footnote: 0,
                },
                name: {
                    section: [],
                },
                toc: opts_.toc,
                lof: opts_.lof,
                lot: opts_.lot,
                filepath: opts_.filepath,
                ligature: info_.base.ligature,
                inPack: 0,
                tocinfo: {
                    lastPage: 0,
                    page: -1,
                    pos: {},
                    list: [],
                },
                footnotes: [],
                page: {
                    width: pageSize.width,
                    height: pageSize.height,
                    paragraphSkipWidth: info_.base.paragraphSkipWidthRatio[0] * fontSize,
                    lineFeedWidthRatio: info_.base.lineFeedWidthRatio[0],
                },
                font: {
                    fontType: "serif",
                    fontObj: fontObjSerif_,
                    fontObjBase: fontObjSerifBase_,
                    fontSize: fontSize,
                    footnoteSize: info_.base.footnoteSize,
                },
                fontSet: {
                    serif: {
                        fontObj: fontObjSerif_,
                        fontObjBase: fontObjSerifBase_,
                    },
                    sans: {
                        fontObj: fontObjSans_,
                        fontObjBase: fontObjSansBase_,
                    },
                    monotype: {
                        fontObj: fontObjMonotype_,
                        fontObjBase: fontObjMonotypeBase_,
                    },
                },
            };
            info_.paragraphParser = new Typesetting.ParagraphParser(context_, info_);
            info_.context = context_;
            if (opts_.xref) {
                if (File.exists(opts_.xref)) {
                    context_.xref = JSON.parse(File.load(opts_.xref));
                    context_.xrefCache = context_.xref.clone();
                }
            }

            core_.util = new ProcessDoc.DocumentUtil(info_, context_);
            core_.paragraph = new ProcessDoc.Paragraph(info_, context_, core_.util);
            core_.section = new ProcessDoc.Section(info_, context_, core_.util, core_.paragraph);
            core_.itemize = new ProcessDoc.Itemize(info_, context_, core_.util, core_.paragraph);

            @define("TeX", %!T\hspace[width=-0.152em]\lower[height=0.171em]{E}\hspace[width=-0.084em]X!);
            @define("LaTeX", %!L\hspace[width=-0.3em]\raise[height=0.3ex]{\font[size=0.8em]{A}}\hspace[width=-0.132em]\TeX!);
            @define("KaTeX", %!K\hspace[width=-0.2em]\raise[height=0.3ex]{\font[size=0.8em]{A}}\hspace[width=-0.132em]\TeX!);

            core_.pendingParagraphList = [];
            core_.pageBreak = @pageBreak;
            core_.fontType = @fontType;
            core_.flushParagraph = function() {
                var writer = info_.writer;
                var totalLineFeeds = core_.pendingParagraphList.sum({ => _1.lineFeedWidth ?? 0 });
                writer.checkColumnBreak(totalLineFeeds);
                core_.pendingParagraphList.each { &(p):
                    if (!p.isParagraph && p.lineFeedWidth > 0) {
                        writer.clearFloatingImage(p.lineFeedWidth);
                    }
                    p.func();
                };
                core_.pendingParagraphList = [];
            };
        }

        public setMultibyteFont(lang) {
            context_.font.mb = info_.writer.loadAdditionalFonts(lang);
        }

        public define(name, value) {
            core_.util.add(name, value);
        }

        public columnBreak() {
            core_.flushParagraph();
            info_.writer.columnBreak();
        }

        public pageBreak() {
            core_.flushParagraph();
            info_.writer.pageBreak();
        }

        public toc() {
            if (context_.toc) {
                context_.tocinfo.page = context_.counter.page;
                context_.tocinfo.pos = info_.writer.getPos();
                if (info_.base.outline) {
                    context_.contentsOutline = info_.writer.createOutline(null, info_.base.toc.header, true);
                }
                @pageBreak();
            }
        }

        public fontType(type) {
            switch (type) {
            case "Serif":
                context_.font.fontObjBase = fontObjSerifBase_;
                context_.font.fontObj = fontObjSerif_;
                break;
            case "Sans":
                context_.font.fontObjBase = fontObjSansBase_;
                context_.font.fontObj = fontObjSans_;
                break;
            case "Monotype":
                context_.font.fontObjBase = context_.font.mb ? context_.font.mb[2] : fontObjMonotypeBase_;
                context_.font.fontObj = context_.font.fontObjBase.regular;
                break;
            }
        }

        public flushToc() {
            info_.writer.initTocPage(context_.tocinfo.page);
            info_.context.tocinfo.lastPage = 1;

            var fontObj = context_.font.fontObj;
            if (context_.contentsOutline.isDefined) {
                var y = info_.writer.getPos().y;
                if (y < 0) {
                    var margin = info_.writer.makeMarginSize();
                    y = margin.pageHeight - margin.top;
                } else {
                    y += (fontObj.getAscent() * info_.base.toc.headerSize) / 1000;
                }
                info_.writer.setContentsPage(context_.contentsOutline, y);
            }

            var fontSize = context_.font.fontSize;
            var lineFeedWidthRatio = context_.page.lineFeedWidthRatio;
            var paragraphSkipWidth = context_.page.paragraphSkipWidth;
            var indent = context_.indentSize;
            var tocPages = 0, pn1, pn2;

            var tocinfo = [{ header: info_.base.toc.header, list: info_.context.tocinfo.list }];
            if (context_.lof) {
                tocinfo.push({ header: info_.base.toc.lof, list: info_.context.tocinfo.lof });
            }
            if (context_.lot) {
                tocinfo.push({ header: info_.base.toc.lot, list: info_.context.tocinfo.lot });
            }
            pn1 = info_.writer.getPageNumber();
            tocinfo[-1].isLast = true;
            tocinfo.each { &(info):
                if (info.header) {
                    context_.font.fontSize = info_.base.toc.headerSize;
                    context_.indentSize = 0;
                    context_.page.lineFeedWidthRatio = info_.base.toc.lineFeedWidthRatio[0];
                    context_.page.paragraphSkipWidth = context_.page.lineFeedWidthRatio * context_.font.fontSize;
                    var lines = core_.paragraph.exec({}, info.header);
                    core_.util.write(lines);
                }
                var list = info.list || [];
                list.each { &(tocdata, i):
                    var nlevel = list[i+1].level || 0;
                    var nFontSize = info_.base.toc.fontSize[nlevel];
                    context_.font.fontSize = info_.base.toc.fontSize[tocdata.level];
                    context_.page.lineFeedWidthRatio = info_.base.toc.lineFeedWidthRatio[nlevel];
                    context_.page.paragraphSkipWidth = context_.page.lineFeedWidthRatio * nFontSize;
                    context_.indentSize = (tocdata.level - 1) * info_.base.toc.indentSize;
                    var lines = core_.paragraph.exec({}, tocdata.number + '\\hspace[width=%{context_.font.fontSize}pt]' + tocdata.header);
                    core_.util.writeTocLine(lines, tocdata.y, tocdata.page - info_.context.tocinfo.lastPage, context_.font.fontObj, context_.font.fontSize, tocdata.isHeader);
                };
                if (!info.isLast) {
                    info_.writer.lineBreak(context_.page.lineFeedWidthRatio * info_.base.toc.headerSize);
                }
                ++tocPages;
            };
            var pn2 = info_.writer.getPageNumber();
            if (((pn2 - pn1) & 0x01) == 0x01) {
                info_.writer.adjustTopPageToOdd();
            }
            context_.indentSize = indent;
            context_.page.paragraphSkipWidth = paragraphSkipWidth;
            context_.page.lineFeedWidthRatio = lineFeedWidthRatio;
            context_.font.fontSize = fontSize;
        }

        public save(file) {
            core_.flushParagraph();
            if (info_.context.toc) {
                flushToc();
            }
            info_.writer.save(file);
            if (opts_.xref && context_.xref) {
                File.open(opts_.xref, File.WRITE) { &(f):
                    f.println(context_.xref.toJsonString(true));
                };
                info_.logger.info("Saved the Xref information. [%{opts_.xref}]");
            }
        }

        public apply(component) {
            if (component.write.isFunction) {
                return component.write(info_, context_, core_);
            }
            # return component.apply(this);
        }
    }

    Typesetting.BOX_NOLINE = 0;
    Typesetting.BOX_NORMAL = 0.4;
    Typesetting.BOX_THIN   = 0.1;
    Typesetting.BOX_THICK  = 1.5;
    Typesetting.BOX_SHADOW = [0.4, 0x01];

} # namespace Typesetting
