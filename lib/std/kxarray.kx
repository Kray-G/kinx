Array.apply = _function(ary, func) {
    return func(ary);
};

Array.stringify = _function(ary, quote) {
    var ret = [];
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        if ((ary[i].isObject || ary[i].isBinary) && ary[i].toString.isFunction) {
            if (ary[i]._format) {
                ret[i] = ary[i].format();
                if (quote) {
                    ret[i] = ret[i].quote();
                }
            } else {
                ret[i] = ary[i].toString();
            }
        } else {
            ret[i] = (quote && ary[i].isString) ? ary[i].quote() : ary[i];
        }
    }
    return ret;
};

Array.each = _function(ary, callback) {
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        var r = callback(ary[i], i);
        if (r.isDefined && !r) {
            break;
        }
    }
};

Array.map = _function(ary, callback) {
    var ret = [];
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        ret[i] = callback(ary[i], i);
    }
    return ret;
};

Array.flatMap = _function(ary, func) {
    return ary.map(func).flatten();
};

Array.filter = _function(ary, callback) {
    var ret = [];
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        ret.push(ary[i]) if (callback(ary[i], i));
    }
    return ret;
};

Array.reject = _function(ary, callback) {
    var ret = [];
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        ret.push(ary[i]) if (!callback(ary[i], i));
    }
    return ret;
};

Array.reduce = _function(ary, callback, initr) {
    var r = initr;
    var len = ary.length();
    for (var i = 0; i < len; ++i) {
        r = callback(r, ary[i], i);
    }
    return r;
};

Array.join = _function(ary, delm) {
    return Array.joinImpl(ary.stringify(), delm);
};

Array.toString = (_function() {
    var depth = 0;
    return _function(ary) {
        try {
            ++depth;
            if (depth > 100) {
                throw RuntimeException("Too deep to stringify the object.");
            }
            return Array.toStringImpl(ary.stringify(true));
        } finally {
            --depth;
        }
    };
})();

Array.sort = (_function() {
    _function _quicksort(a, first, last, comp) {
        var i = first;
        var j = last;
        var x = a[(first + last) / 2];
        while (true) {
            while (comp(a[i], x) < 0) i++;
            while (comp(x, a[j]) < 0) j--;
            if (i >= j) break;
            [a[i], a[j]] = [a[j], a[i]];
            ++i; --j;
        }
        if (first  < i - 1)
            _quicksort(a, first , i - 1, comp);
        if (j + 1 < last)
            _quicksort(a, j + 1, last, comp);
    }

    return _function(ary, comp) {
        ary = ary.clone();
        _quicksort(ary, 0, ary.length() - 1, comp ?? (_function(a,b) { return a<=>b; }));
        return ary;
    };
})();

Array.clone = (_function() {
    var depth = 0;
    return _function(ary) {
        if (depth > 100) {
            throw RuntimeException('Too deep at clone()');
        }
        var res;
        try {
            ++depth;
            if (ary.isArray) {
                res = ary.map(_function(e) { return e.isObject ? e.clone() : e; });
            } else if (ary.isObject) {
                var r = {};
                ary.keySet().each(_function(key) {
                    if (ary[key].isObject) {
                        r[key] = ary[key].clone();
                    } else {
                        r[key] = ary[key];
                    }
                });
                res = r;
            } else {
                res = ary;
            }
        } finally {
            --depth;
        }
        return res;
    };
})();

Array.extend = (_function() {
    var depth = 0;
    return _function(ary, tgt) {
        if (depth > 100) {
            throw RuntimeException('Too deep at extend()');
        }
        try {
            ++depth;
            var keys = tgt.keySet();
            var size = keys.length();
            for (var i = 0; i < size; ++i) {
                var key = keys[i];
                if (tgt[key].isArray) {
                    ary[key] = tgt[key].clone();
                } else {
                    if (tgt[key].isObject) {
                        if (ary[key].extend.isFunction) {
                            ary[key].extend(tgt[key]);
                        } else {
                            ary[key] = {}.extend(tgt[key]);
                        }
                    } else {
                        ary[key] = tgt[key];
                    }
                }
            }
        } finally {
            --depth;
        }
        return ary;
    };
})();

Array.toJsonString = (_function() {
    var makeNewline, makeIndent, outputArray, outputObject, outputElement;
    makeNewline = _function(useIndent, output) {
        if (useIndent) {
            output("\n");
        }
    };
    makeIndent = _function(useIndent, output, i) {
        if (useIndent && i > 0) {
            output(" " * i);
        }
    };
    outputArray = _function(elem, useIndent, output, level) {
        output('[');
        ++level;
        elem.each(_function(e, i) {
            if (i > 0) {
                output(",");
                makeIndent(useIndent, output, 1);
            }
            if (e.isArray) {
                outputArray(e, useIndent, output, level);
            } else if (e.isObject) {
                outputObject(e, useIndent, output, level);
            } else {
                outputElement(e, useIndent, output, level);
            }
        });
        --level;
        output(']');
    };
    outputObject = _function(elem, useIndent, output, level) {
        if (elem.isTrue) {
            output("true");
            return;
        }
        if (elem.isFalse) {
            output("false");
            return;
        }
        if (elem.instanceOf.isFunction && elem.toString.isFunction) {
            output(elem.toString());
            return;
        }
        output('{'); makeNewline(useIndent, output);
        ++level;
        elem.keySet().each(_function(key, i) {
            if (i > 0) {
                output(",");
                makeNewline(useIndent, output);
            }
            makeIndent(useIndent, output, level * 4);
            output(key.quote() + ":");
            makeIndent(useIndent, output, 1);
            var e = elem[key];
            if (e.isArray) {
                outputArray(e, useIndent, output, level);
            } else if (e.isObject) {
                outputObject(e, useIndent, output, level);
            } else {
                outputElement(e, useIndent, output, level);
            }
        });
        makeNewline(useIndent, output);
        --level;
        makeIndent(useIndent, output, level * 4);
        output('}');
    };
    outputElement = _function(elem, useIndent, output, level) {
        if (elem.isInteger || elem.isDouble) {
            output(elem);
        } else if (elem.isString) {
            output(elem.quote());
        } else if (elem.isBinary) {
            var sz = elem.length();
            output('[');
            for (var i = 0; i < sz; ++i) {
                if (i > 0) {
                    output(",");
                    makeIndent(useIndent, output, 1);
                }
                output("0x%02x" % elem[i]);
            }
            output(']');
        } else {
            output("null");
        }
    };
    return _function(ary, output, useIndent) {
        if (!output.isFunction && useIndent.isUndefined) {
            var s = "";
            ary.toJsonString(_function(e) { s += e; }, output);
            return s;
        }
        if (ary.isArray) {
            outputArray(ary, useIndent, output, 0);
        } else {
            outputObject(ary, useIndent, output, 0);
        }
        makeNewline(useIndent, output);
    };
})();

Array.println = _function(ary) {
    return ary.each(_function(e) { System.println(e); });
};

Array.[] = _function(ary, obj) {
    if (obj.isRange) {
        var b = obj.begin() ?? 0;
        var e = obj.end();
        if (!e) {
            return ary.subArray(b);
        }
        var l = obj.isEndExcluded() ? (e - b) : (e - b + 1);
        return ary.subArray(b, l);
    }
    throw RuntimeException('Invalid index for Array');
};
