String.apply = _function(str, func) {
    return func(str);
};

String.find = _function(str, cond) {
    if (cond.isString) {
        return str.findByString(cond);
    } else if (cond.isRegex) {
        cond.reset(str);
        return cond =~ str;
    } else {
        throw RuntimeException('Invalid find condition');
    }
};

String.split = _function(str, cond) {
    if (cond.isString) {
        return str.splitByString(cond);
    } else if (cond.isRegex) {
        return cond.splitOf(str);
    } else {
        throw RuntimeException('Invalid split condition');
    }
};

String.each = _function(str, callback) {
    var len = str.length();
    for (var i = 0; i < len; ++i) {
        var r, c = str[i];
        var l = System.isUtf8Bytes(c);
        if (l > 1) {
            var s = *c;
            while (--l) {
                s += *str[++i];
            }
            r = callback(s, i);
        } else {
            r = callback(*c, i);
        }
        if (r.isDefined && !r) {
            break;
        }
    }
};

String.replace = _function(str, cond, newstr) {
    if (cond.isString) {
        if (!newstr.isString) {
            throw RuntimeException('Replacing must be done by string');
        }
        return str.replaceByString(cond, newstr);
    } else if (cond.isRegex) {
        if (newstr.isString) {
            return cond.replaceOf(str, newstr);
        } else if (newstr.isFunction) {
            var start = 0, end = 0;
            var rstr = "";
            cond.reset(str);
            while (cond.find()) {
                var matched = cond.group[0];
                var mb = matched.begin;
                end = matched.end;
                rstr += str.subString(start, mb - start);
                rstr += newstr(cond.group);
                start = end;
            }
            if (start > 0) {
                rstr += str.subString(start);
            } else {
                rstr = str;
            }
            return rstr;
        }
        throw RuntimeException('Invalid replace condition');
    } else {
        throw RuntimeException('Invalid replace condition');
    }
};

String.match = _function(str, regex, isGlobal) {
    isGlobal ??= regex.isGlobal;
    var results = [];
    regex.reset(str);
    if (isGlobal) {
        if (regex.isUndefined) {
            return [""];
        }
        while (regex.find()) {
            results.push(regex.group[0].string);
        }
        return results;
    }

    if (regex.find()) {
        var l = regex.group.length();
        for (var i = 0; i < l; ++i) {
            results.push(regex.group[i].string);
        }
        return results;
    }

    return null;
};

String._addObject = _function(str, obj) {
    return str + obj.toString();
};

String.== = _function(str, obj) {
    return obj == str;
};

String.[] = _function(str, obj) {
    if (obj.isRange) {
        var b = obj.begin() ?? 0;
        var e = obj.end();
        if (!e) {
            return str.subString(b);
        }
        var l = obj.isEndExcluded() ? (e - b) : (e - b + 1);
        return str.subString(b, l);
    }
    throw RuntimeException('Invalid index for String');
};

String.Buffer = (_function() {
    _class StringBuffer(value_) {
        value_ = "";
        public value() {
            return value_;
        }
        public clear() {
            var v = value_;
            value_ = "";
            return v;
        }
        public append(rhs) {
            value_ += rhs;
            return this;
        }
    }
    return StringBuffer;
})();

String.escapeHtml = (_function() {
    var repl = {
        "&": "&amp;",
        '"': "&quot;",
        "<": "&lt;",
        ">": "&gt;",
    };
    return _function(str) {
        return str.replace(/[&"<>]/, _function(c) {
            return repl[c];
        });
    };
})();

String.slice = _function(str, start, end) {
    if (end < 0) {
        return str.subString(start, (str.length() + end) - start);
    }
    if (end > 0) {
        return str.subString(start, end - start);
    }
    return "";
};

var StringAnsiColor = {
    Colors: {
        black:      { black:   true, color: 30, bgcolor: 40 },
        red:        { red:     true, color: 31, bgcolor: 41 },
        green:      { green:   true, color: 32, bgcolor: 42 },
        yellow:     { yellow:  true, color: 33, bgcolor: 43 },
        blue:       { blue:    true, color: 34, bgcolor: 44 },
        magenta:    { magenta: true, color: 35, bgcolor: 45 },
        cyan:       { cyan:    true, color: 36, bgcolor: 46 },
        white:      { white:   true, color: 37, bgcolor: 47 },
    },
    Attrs: {
        bold:       { value: 1 },
        italic:     { value: 3 },
        underline:  { value: 4 },
        blink:      { value: 5 },
        reverse:    { value: 7 },
    },
};

_class StringAnsiColor(str_) {
    var attrs_ = [];
    var color_ = 37;
    var bgcolor_;
    private applyBackgroundColor(isBgColor) {
        for (var key in Array.keySet(StringAnsiColor.Colors)) {
            if (isBgColor(StringAnsiColor.Colors[key])) {
                bgcolor_ = StringAnsiColor.Colors[key].bgcolor;
                return;
            }
        }
    }
    private makeColorMethod(fgColor) {
        return _function(bgColor) {
            if (bgColor.isFunction) applyBackgroundColor(bgColor);
            color_ = fgColor;
            return this;
        };
    }
    private makeDecorationMethod(value) {
        return _function() {
            attrs_.push(value);
            return this;
        };
    }
    private initialize() {
        for (var key in Array.keySet(StringAnsiColor.Colors)) {
            this[key] = makeColorMethod(StringAnsiColor.Colors[key].color);
        }
        for (var key in Array.keySet(StringAnsiColor.Attrs)) {
            this[key] = makeDecorationMethod(StringAnsiColor.Attrs[key].value);
        }
    }
    public color(name, bgColor) {
        return this[name](bgColor);
    }
    public decorate(name) {
        return this[name]();
    }
    public +(str) {
        return @toString() + str;
    }
    public toString() {
        var attrs = ((bgcolor_.isDefined ? [color_, bgcolor_] : [color_]) + attrs_).join(';');
        color_ = 37;
        bgcolor_ = null;
        attrs_ = [];
        return "\e%{attrs}[m%{str_}\e[0m";
    }
}

// Text color.
_function _make_string_color_hook(name) {
    return _function(str, bgColor) {
        return new StringAnsiColor(str).color(name, bgColor);
    };
}
const _colorkeys = Array.keySet(StringAnsiColor.Colors);
for (var i = 0, l = _colorkeys.length(); i < l; ++i) {
    const _colorkey = _colorkeys[i];
    String[_colorkey] = _make_string_color_hook(_colorkey);
}

// Text attrbutes.
_function _make_string_attribute_hook(name) {
    return _function(str) {
        return new StringAnsiColor(str).decorate(name);
    };
}
const _attrkeys = Array.keySet(StringAnsiColor.Attrs);
for (var i = 0, l = _attrkeys.length(); i < l; ++i) {
    const _attrkey = _attrkeys[i];
    String[_attrkey] = _make_string_attribute_hook(_attrkey);
}
