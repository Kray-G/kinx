String.apply = _function(str, func) {
    return func(str);
};

String.find = _function(str, cond) {
    if (cond.isString) {
        return str.findByString(cond);
    } else if (cond.isRegex) {
        cond.reset(str);
        return cond =~ str;
    } else {
        throw RuntimeException('Invalid split condition');
    }
};

String.split = _function(str, cond) {
    if (cond.isString) {
        return str.splitByString(cond);
    } else if (cond.isRegex) {
        return cond.splitOf(str);
    } else {
        throw RuntimeException('Invalid split condition');
    }
};

String.each = _function(str, callback) {
    var len = str.length();
    for (var i = 0; i < len; ++i) {
        var r = callback(*str[i], i);
        if (r.isDefined && !r) {
            break;
        }
    }
};

String.replace = _function(str, cond, newstr) {
    if (!newstr.isString) {
        throw RuntimeException('Replacing must be done by string');
    }
    if (cond.isString) {
        return str.replaceByString(cond, newstr);
    } else if (cond.isRegex) {
        return cond.replaceOf(str, newstr);
    } else {
        throw RuntimeException('Invalid replace condition');
    }
};

String._addObject = _function(str, obj) {
    return str + obj.toString();
};

String.== = _function(str, obj) {
    return obj == str;
};

String.[] = _function(str, obj) {
    if (obj.isRange) {
        var b = obj.begin() ?? 0;
        var e = obj.end();
        if (!e) {
            return str.subString(b);
        }
        var l = obj.isEndExcluded() ? (e - b) : (e - b + 1);
        return str.subString(b, l);
    }
    throw RuntimeException('Invalid index for String');
};

String.Buffer = (_function() {
    _class StringBuffer(value_) {
        public value() {
            return value_;
        }
        public clear() {
            var v = value_;
            value_ = null;
            return v;
        }
        public append(rhs) {
            value_ += rhs;
            return this;
        }
    }
    return StringBuffer;
})();
