
_class TestException(what) { @_type = 'TestException'; @_what = what; }
TestException = TestException.create;

class SpecTestResult(res_) {

    private indentSpaces(indent, add) {
        return ("    " * (indent || 0)) + (add * " ");
    }

    private showIndent(indent) {
        System.print(indentSpaces(indent));
    }

    public showResult(indent) {
        indent ??= 0;
        if (res_.name) {
            showIndent(indent);
            if(res_.isTestCase) {
                var len = res_.name.length();
                var dotlen = len < 47 ? (50 - len - (indent * 4)) : 3;
                var dot = dotlen * ".";
                var sec = (res_.elapsed).toInt();
                var m10 = ((res_.elapsed * 100).toInt() % 100);
                System.println("Case[%d] (%s) %s %-10s (%3d.%02ds)"
                    % res_.index
                    % res_.name
                    % dot
                    % (res_.failed ? "failed" : "successful")
                    % sec
                    % m10);
                if (res_.failed) {
                    var idt = indent + 1;
                    var seplen = 78 - (indent * 4);
                    showIndent(idt);
                    System.println("-" * seplen);
                    showIndent(idt);
                    System.println("Expected: ", res_.expect.replace("\n", "\n"+indentSpaces(idt, 10)));
                    showIndent(idt);
                    System.println("-" * seplen);
                    showIndent(idt);
                    System.println("Actual:   ", res_.actual.replace("\n", "\n"+indentSpaces(idt, 10)));
                }
            } else {
                if (res_.elapsed) {
                    var sec = (res_.elapsed).toInt();
                    var m10 = ((res_.elapsed * 100).toInt() % 100);
                    System.println("%s (%d.%02ds)" % res_.name % sec % m10);
                } else {
                    System.println(res_.name);
                }
            }
        }
    }

}

class SpecTestCase(id_, index_, testinfo_, spectest_) {

    @entry = id_;
    @name = testinfo_.name;
    @code = testinfo_.code;
    @result = testinfo_.result;
    @id = "(%02d)-[%04d]" % id_ % index_;
    @progress = spectest_.progress;
    var compiler_ = spectest_.spec.compiler;
    var interpreter_ = testinfo_.interpreter || spectest_.spec.interpreter;
    var testfile_ = spectest_.spec.testfile;
    var resfile_ = spectest_.spec.resultfile;
    var result_;

    private initialize() {
        interpreter_ += " " + testfile_;
    }

    public setup() {
    }

    public teardown() {
    }

    public test() {
        if (!testfile_) {
            throw TestException("No test code temporary file name");
        }
        if (!resfile_) {
            throw TestException("No test result temporary file name");
        }
        var res = {
            name: @name,
            id: @id,
            index: index_,
            isTestCase: true,
        };
        @progress.startTestCase(index_, @name);
        var tmr = new SystemTimer();
        try {
            var code = @code.join('\n');
            res.code = code;
            File.open(testfile_, File.TEXT|File.WRITE, function(f) {
                f.println(code);
            });
            if (compiler_) {
                System.exec(compiler_ + " " + testfile_);
            }
            System.exec(interpreter_ + " > " + resfile_);
            var buf = File.load(resfile_);
            res.actual = buf.trim();
            var rvl = @result.join('\n');
            res.expect = rvl.trim();
            res.failed = res.actual != res.expect;
        } catch (e) {
            res.message = "%{e.type()}: %{e.what()}";
            res.failed = true;
        } finally {
            File.unlink(resfile_);
            File.unlink(testfile_);
        }
        res.elapsed = tmr.elapsed();
        res.result = res.failed ? "failed" : "successful";
        @progress.endTestCase(res, res.elapsed);
        result_ = new SpecTestResult(res);
    }

    public showResult(indent) {
        if (result_) {
            result_.showResult(indent);
        }
    }

    public print() {
        System.println("  Case[%d]: %s" % index_ % @name);
        System.println("    Code:");
        @code.each(function(line, i) {
            System.println("    %4d: %s" % i % line);
        });
        System.println("    Result:");
        @result.each(function(line, i) {
            System.println("    %4d: %s" % i % line);
        });
        System.println("");
    }

    public count() {
        return 1;
    }

}

class SpecTestSuite(id_, info_, spectest_) {

    @testCaseList = [];
    @progress = spectest_.progress;
    var result_;

    public initialize() {
        var test = info_.test;
        for (var i = 0, len = test.length(); i < len; ++i) {
            var testcase = new SpecTestCase(id_, i, test[i], spectest_);
            @testCaseList.push(testcase);
        }
    }

    public test() {
        @progress.startSuite(info_.targetName);
        var tmr = new SystemTimer();
        @testCaseList.each(function(testcase) {
            try {
                testcase.setup();
                testcase.test();
            } catch (e) {
                ;
            } finally {
                testcase.teardown();
            }
        });
        var elapsed = tmr.elapsed();
        @progress.endSuite();
        result_ = new SpecTestResult({
            file: info_.name,
            name: info_.targetName,
            elapsed: elapsed,
        });
    }

    public showResult(indent) {
        if (result_) {
            result_.showResult(indent);
        }
        @testCaseList.each(function(testcase) {
            testcase.showResult(indent + 1);
        });
    }

    public print() {
        System.println("Entry: %s" % info_.name);
        System.println("* %s" % info_.targetName);
        @testCaseList.each(function(testcase) {
            testcase.print();
        });
    }

    public count() {
        return @testCaseList.reduce(&(r, tc) => r + tc.count());
    }

}

class SpecTestNolinkEntry(id_, entry_, spectest_) {

    @progress = spectest_.progress;
    var result_;

    public test() {
        @progress.startEntry(entry_.stem());
        @progress.startTestCase(0, "-");
        @progress.endTestCase({ result: "warning" }, 0.0);
        @progress.endEntry();
        result_ = new SpecTestResult({
            name: "Entry(nolink): "+entry_,
        });
    }

    public showResult(indent) {
        if (result_) {
            result_.showResult(indent);
        }
    }

    public print() {
    }

    public count() {
        return 1;
    }

}

class SpecTestSkipEntry(id_, entry_, spectest_) {

    var result_;

    public test() {
        return new SpecTestResult({
            name: "Entry(skipped): "+entry_,
        });
    }

    public showResult(indent) {
        if (result_) {
            result_.showResult(indent);
        }
    }

    public print() {
    }

    public count() {
        return 0;
    }

}

class SpecTestEntry(id_, entry_, spectest_) {
    @link = [];
    @nolink = [];
    @entry = [];
    @progress = spectest_.progress;
    var info_ = { name: entry_, test: [] };
    var suite_;
    var result_;

    private makeTest(testarea) {
        var index = 0;
        var spec_ = spectest_.spec;
        var ctx = { testcode: false, result: false, inCode: false };
        testarea.each(function(line) {
            var g;
            if (g = (line =~ spec_.testNamePattern)) {
                info_.test.push({
                    name: g[1].string,
                    code: [],
                    result: []
                });
                ctx.testcode = false;
                ctx.result = false;
                return;
            } else if (g = (line =~ spec_.startCodePattern)) {
                if (g[1].string && info_.test.length() > 0) {
                    info_.test[-1].interpreter = g[1].string;
                }
                ctx.testcode = true;
                ctx.result = false;
                return;
            } else if (line =~ spec_.startResultPattern) {
                ctx.testcode = false;
                ctx.result = true;
                return;
            } else if (!ctx.inCode && line =~ spec_.codeBlockStart) {
                ctx.inCode = true;
                return;
            } else if (ctx.inCode && line =~ spec_.codeBlockEnd) {
                ctx.inCode = false;
                return;
            }
            if (ctx.inCode) {
                if (info_.test.length() == 0) {
                    System.println("Warning: no test name");
                } else if (ctx.testcode) {
                    info_.test[-1].code.push(line);
                } else if (ctx.result) {
                    info_.test[-1].result.push(line);
                }
            }
        });
    }

    private listupLinks() {
        var spec_ = spectest_.spec;
        var started = false;
        var ppath = entry_.parentPath();
        var file = new File(entry_, File.TEXT|File.READ);
        var testarea = [];
        file.eachLine(function(line, i) {
            var g;
            if (started) {
                if (spec_.endTestCasePattern && line =~ spec_.endTestCasePattern) {
                    started = false;
                    return;
                }
                testarea.push(line);
                return;
            }
            if (g = (line =~ spec_.linkPattern)) {
                var mdfile = ppath / g[2].string;
                if (File.exists(mdfile)) {
                    @link.push(mdfile);
                } else {
                    @nolink.push(mdfile);
                }
                return;
            }
            if (!info_.targetName && (g = (line =~ spec_.targetNamePattern))) {
                info_.targetName = g[1].string;
                return;
            }
            if (g = (line =~ spec_.startTestPattern)) {
                started = true;
                return;
            }
        });
        file.close();
        makeTest(testarea);
        suite_ = new SpecTestSuite(id_, info_, spectest_);
    }

    public setup() {
        listupLinks();
        var entries = [];
        @link.each(_function(mdfile) {
            var e = @addEntry(mdfile);
            if (e) {
                # Setup it later because the order by written it in document is more natural.
                entries.push(e);
            }
        });
        entries.each(_function(e) {
            e.setup();
        });
        @nolink.each(_function(mdfile) {
            @entry.push(new SpecTestNolinkEntry(id_++, mdfile, spectest_));
        });
    }

    public addEntry(entry) {
        if (!spectest_.isEntried(entry)) {
            spectest_.addEntry(entry);
            var e = new SpecTestEntry(id_++, entry, spectest_);
            @entry.push(e);
            return e;
        }
        @entry.push(new SpecTestSkipEntry(id_++, entry, spectest_));
        # return nothing.
    }

    public test() {
        @progress.startEntry(entry_);
        if (suite_) {
            suite_.test();
        }
        @entry.each(function(e) {
            e.test();
        });
        @progress.endEntry();
        result_ = new SpecTestResult({
            name: "Entry: "+entry_,
        });
    }

    public showResult(indent) {
        if (result_) {
            result_.showResult(indent);
        }
        suite_.showResult(indent + 1);
        @entry.each(function(entry) {
            entry.showResult(indent + 1);
        });
    }

    public print() {
        suite_.print();
        @entry.each(function(entry) {
            System.println("");
            entry.print();
        });
    }

    public count() {
        return @entry.reduce(&(r, ts) => r + ts.count()) + suite_.count();
    }
}

class SpecTestProgress(system_) {

    @info = {};

    public startTest(opts) {
        @info.total = opts.total;
        @info.done = 0;
        @info.success = 0;
        @info.failed = 0;
        @info.warning = 0;
    }

    public endTest() {
        system_.println("");
    }

    public startEntry(name) {
        system_.print("[");
    }

    public endEntry() {
        system_.print("]");
    }

    public startSuite(name) {
        system_.print("<");
    }

    public endSuite(elapsed) {
        system_.print(">");
    }

    public startTestCase(index, name) {
    }

    public endTestCase(res, elapsed) {
        switch (res.result) {
        case "successful":
            system_.print("*");
            ++(@info.success);
            break;
        case "failed":
            system_.print("E");
            ++(@info.failed);
            break;
        case "warning":
            system_.print("W");
            ++(@info.warning);
            break;
        }
        ++(@info.done);
    }

    public showResult() {
        System.println("");
        System.println("<Test Result>");
        System.println("    Total Test Cases: %8d" % @info.total);
        System.println("        Successful  : %8d" % @info.success);
        System.println("        Failed      : %8d" % @info.failed);
        System.println("        Warning     : %8d" % @info.warning);
    }

}

class SpecTestProgressDetail(system_) : SpecTestProgress(system_) {

    var indent_ = 0;
    var dotlen_;

    private indentSpaces(indent, add) {
        return ("    " * (indent ?? indent_)) + (add * " ");
    }

    private showIndent(indent) {
        system_.print("    " * (indent ?? indent_));
    }

    public endTest() {
    }

    public startEntry(name) {
        showIndent();
        system_.println("Entry: %s" % name);
        ++indent_;
    }

    public endEntry() {
        --indent_;
    }

    public startSuite(name) {
        showIndent();
        system_.println("Suite: %s" % name);
        ++indent_;
    }

    public endSuite(elapsed) {
        --indent_;
    }

    public startTestCase(index, name) {
        showIndent();
        system_.print("Case[%d]: %s" % index % name);
        dotlen_ = 60 - name.length() - 6 - (indent_ * 4);
        if (dotlen_ < 0) dotlen_ = 3; 
    }

    public endTestCase(res, elapsed) {
        var sec = (elapsed).toInt();
        var m10 = ((elapsed * 100).toInt() % 100);
        switch (res.result) {
        case "successful":
            system_.println(" %s successful (%3d.%02ds)" % (dotlen_ * '.') % sec % m10);
            ++(@info.success);
            break;
        case "failed":
            system_.println(" %s failed     (%3d.%02ds)" % (dotlen_ * '.') % sec % m10);
            ++(@info.failed);
            break;
        case "warning":
            system_.println(" %s warning    (%3d.%02ds)" % (dotlen_ * '.') % sec % m10);
            ++(@info.warning);
            break;
        }
        ++(@info.done);
        if (res.failed) {
            var idt = indent_ + 1;
            var seplen = 78 - (indent_ * 4);
            showIndent(idt);
            System.println("-" * seplen);
            showIndent(idt);
            System.println("Expected: ", res.expect.replace("\n", "\n"+indentSpaces(idt, 10)));
            showIndent(idt);
            System.println("-" * seplen);
            showIndent(idt);
            System.println("Actual:   ", res.actual.replace("\n", "\n"+indentSpaces(idt, 10)));
        }
    }

}

class SpecTest(args_) {
    var spec_;
    var top_;
    var id_ = 0;
    var analyzed_ = false;
    var result_;

    private hasOptArg(opts, ch) {
        for (var i = 0, len = opts.length(); i < len; ++i) {
            if (opts[i] == ch && ((i + 1) < len) && opts[i+1] == ':'[0]) {
                return true;
            }
        }
        return false;
    }

    private getopt(args, opts) {
        for (var i = 0, len = args.length(); i < len; i++) {
            var argstr = args[i];
            if (argstr[0] == '-'[0] && argstr[1] != '-'[0]) {
                var arg, type = argstr[1];
                if (hasOptArg(opts, type)) {
                    i++;
                    arg = args[i];
                } else {
                    arg = "";
                }
                yield {
                    type: argstr[1],
                    arg: arg,
                };
            }
        }
    }

    public analyzeOptions() {
        while (c = getopt(args_, "vf:")) {
            switch (c.type) {
            case 'v'[0]:
                @options.verbose = true;
                break;
            case 'f'[0]:
                @options.file = c.arg;
                break;
            }
        }
    }

    private initialize() {
        @target = {};
    }

    private loadSpecFile() {
        @options = {};
        analyzeOptions();
        spec_ = JSON.parse(File.load(@options.file || ".spectest"));
        @spec.topLevelFilePattern = new Regex(spec_.topLevelFilePattern || %{README|CONTENTS)\.md});
        @spec.linkPattern = new Regex(spec_.linkPattern);
        @spec.targetNamePattern = new Regex(spec_.targetNamePattern);
        @spec.startTestPattern = new Regex(spec_.startTestPattern);
        @spec.endTestCasePattern = spec_.endTestCasePattern ? new Regex(spec_.endTestCasePattern) : null;
        @spec.testNamePattern = new Regex(spec_.testNamePattern);
        @spec.startCodePattern = new Regex(spec_.startCodePattern);
        @spec.startResultPattern = new Regex(spec_.startResultPattern);
        @spec.codeBlockStart = new Regex(spec_.codeBlockStart);
        @spec.codeBlockEnd = new Regex(spec_.codeBlockEnd);
        @spec.compiler = spec_.compiler;
        @spec.interpreter = spec_.interpreter;
        @spec.testfile = spec_.testfile;
        @spec.resultfile = spec_.resultfile;
        @root = spec_.root;
    }

    public isEntried(entry) {
        return @target[entry];
    }

    public addEntry(entry) {
        @target[entry] = true;
    }

    public analyze() {
        loadSpecFile();
        @progress = @options.verbose
            ? new SpecTestProgressDetail({
                print: System.print,
                println: System.println,
            })
            : new SpecTestProgress({
                print: System.print,
                println: System.println,
            });
        Directory.walk(spec_.root, &(entry, i) => {
            if (entry.extension() == ".md") {
                if (spec_.topLevelFilePattern && entry =~ spec_.topLevelFilePattern) {
                    @addEntry(entry);
                    top_ = new SpecTestEntry(id_++, entry, this);
                    top_.setup();
                    return false;
                }
            }
        });
        analyzed_ = true;
    }

    public start() {
        if (!analyzed_) {
            analyze();
        }
        @progress.startTest({ total: @count() });
        top_.test();
        @progress.endTest();
    }

    public showResult(indent) {
        System.println("");
        System.println("<Test Result Detail>");
        System.println("");
        top_.showResult(indent);
        @progress.showResult();
    }

    public print() {
        if (!analyzed_) {
            analyze();
        }
        top_.print();
    }

    public count() {
        if (!analyzed_) {
            analyze();
        }
        return top_.count();
    }
}

# try {
    var st = new SpecTest($$);
    # st.print();
    System.println("Test Cout = " + st.count());
    st.start();
    st.showResult();
# } catch (e) {
#     ;
# }
