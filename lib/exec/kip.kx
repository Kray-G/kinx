using SemanticVersion;
using DateTime;
using MarkdownConsole;
using pkg.Develop;

const MAIN_PACKAGE_CENTRAL_REPO = "https://github.com/Kray-G/kinx-package-repository";
const PACKAGE_INFO_FILE = "package.json";
const DEVELOPMENT_VERSION = "99.99.99";

Kip.progress = _function(...args) {
    var date = "[" + new DateTime().toString().bold().green() + "] ";
    System.print(date, ...args);
};
Kip.progressln = _function(...args) {
    var date = "[" + new DateTime().toString().bold().green() + "] ";
    System.println(date, ...args);
};
Kip.warningln = _function(...args) {
    var date = "[" + new DateTime().toString().bold().yellow() + "] ";
    System.println(date, ...args);
};
Kip.errorln = _function(...args) {
    var date = "[" + new DateTime().toString().bold().red() + "] ";
    System.println(date, ...args);
};
Kip.info = _function(...args) {
    System.print(...args);
};
Kip.infoln = _function(...args) {
    System.println(...args);
};
Kip.verbose = _function(...args) {
    var opts = args.shift();
    if (opts.verbose) {
        var date = "[" + new DateTime().toString().cyan() + "] ";
        System.println(date, ...args);
    }
};

PackageUpdater.print = Kip.progress;
PackageUpdater.println = Kip.progressln;
PackageUpdater.errorln = Kip.errorln;
PackageUpdater.warningln = Kip.warningln;

class KinxPackageManagerConfig(configFile_, defFile_) {

    var config_, def_;
    var chgdConfig_ = false;
    var chgdDef_ = false;

    private saveData(data) {
        File.open(configFile_, File.WRITE) { &(f: File)
            f.println(data.toJsonString(true));
        };
        Kip.progressln("Saved a new configuration.");
    }

    private saveDef(data) {
        File.open(defFile_, File.WRITE) { &(f: File)
            data.keySet().each {
                if (data[_1]) {
                    f.println("%s = %s" % _1 % data[_1]);
                }
            };
        };
    }

    private initialize() {
        if (!File.exists(configFile_)) {
            config_ = { repository: [{ "url": MAIN_PACKAGE_CENTRAL_REPO }] };
            saveData(config_);
        } else {
            config_ = JSON.parse(File.load(configFile_));
        }
        if (!File.exists(defFile_)) {
            def_ = {};
        } else {
            def_ = File.load(defFile_).split(/\r?\n/).map { => _1.split('=').map { => _1.trim() } }
                .reduce({ &(r, e)
                    r[e[0]] = e[1];
                    return r;
                }, {});
        }
    }

    public getPackageDef(name) {
        return def_[name];
    }

    public setPackageDef(name, latest) {
        def_[name] = latest;
        chgdDef_ = true;
    }

    public save() {
        if (chgdConfig_ && config_) {
            saveData(config_);
            chgdConfig_ = false;
        }
        if (chgdDef_ && def_) {
            saveDef(def_);
            chgdDef_ = false;
        }
    }

    private makePackageJsonPath(url) {
        var [, user, repo] = url.match(%m!^https://github.com/([^/]+)/([^/]+)!);
        return "https://raw.githubusercontent.com/%{user}/%{repo}/main/packages.json";
    }

    public getRepository() {
        return config_.repository.map { => { url: _1.url, jsonUrl: makePackageJsonPath(_1.url) } };
    }

    public list() {
        if (config_.values) {
            config_.values.keySet().each {
                Kip.infoln(_1, "=", config_.values[_1]);
            };
        }
        return true;
    }

    public set(name, value) {
        if (name && value) {
            config_.values[name] = value;
            chgdConfig_ = true;
        }
        return true;
    }

    public remove(name) {
        if (name) {
            config_.values.remove(name);
            chgdConfig_ = true;
        }
        return true;
    }

    public addRepo(repo) {
        if (repo) {
            if (config_.repository.filter({ => _1.url == repo }).length() == 0) {
                config_.repository.push({ url: repo });
            }
            chgdConfig_ = true;
        }
        return true;
    }

    public removeRepo(repo) {
        if (repo) {
            config_.repository = config_.repository.filter { => _1.url != repo };
            chgdConfig_ = true;
        }
        return true;
    }

    public httpGet(url) {
        var http = new Net.Http();
        http.sslVerifyPeer(false);
        http.sslVerifyHost(false);
        http.addHeader("User-Agent", "Kinx Package Manager");
        if (config_.values["proxy.url"]) {
            http.setProxy(config_.values["proxy.url"]);
            if (config_.values["proxy.username"] && config_.values["proxy.password"]) {
                http.setProxyUserPassword(config_.values["proxy.username"], config_.values["proxy.password"]);
            }
        }
        Kip.verbose(this, "[http] " + url);
        var json = "";
        var res = http.get(url, &(data) => {
            json += data;
        });
        if (res.code == 200) {
            return JSON.parse(json);
        }
        return [];
    }

    public download(url, name, version, size) {
        var tmpdir = ($env.TMPDIR || $env.TMP || "/tmp");
        var http = new Net.Http();
        http.sslVerifyPeer(false);
        http.sslVerifyHost(false);
        http.setRedirect(true);
        http.addHeader("User-Agent", "Kinx Package Manager");
        if (config_.values["proxy.url"]) {
            http.setProxy(config_.values["proxy.url"]);
            if (config_.values["proxy.username"] && config_.values["proxy.password"]) {
                http.setProxyUserPassword(config_.values["proxy.username"], config_.values["proxy.password"]);
            }
        }

        var filename = name + version + ".zip";
        zipfile = tmpdir / filename;
        Directory.change(tmpdir) {
            if (File.exists(filename)) {
                Kip.progressln("The file(%{filename.bold().yellow()}) is found.");
                Kip.progressln("The package of %s(%s) has been already downloaded." % name % version);
                return;
            }
            File.open(filename, File.WRITE|File.BINARY) { &(f)
                var total = 0;
                http.get(url, &(data) => {
                    total += data.length();
                    var prog = Integer.parseInt(total * 100 / size);
                    Kip.progress("Received %d/%d (%d%%)\r" % total % size % prog);
                    f.write(data);
                });
            };
            Kip.progressln("");
            Kip.progressln("Created %s done." % zipfile);
        };
        return zipfile;
    }

}

class KinxPackage(key_, info_, cfgMgr_) {

    var user_, repo_;

    private initialize() {
        [, user_, repo_] = info_.url.match(%m!^https://github.com/([^/]+)/([^/]+)!);
    }

    public show() {
        if (info_.base) {
            Kip.infoln("* ", info_.base);
        }
        Kip.infoln("  - %{key_.bold()} - %{info_.name.yellow()}");
        if (info_.url) {
            Kip.infoln("    ", info_.url);
        }
    }

    public getReleaseUrl() {
        return "https://api.github.com/repos/%{user_}/%{repo_}/releases";
    }

    public getReleaseList() {
        return cfgMgr_.httpGet(getReleaseUrl());
    }

    public packagePath() {
        var version = info_.version ?? "v${version}";
        var file = info_.file ?? "package.zip";
        return "https://github.com/%{user_}/%{repo_}/releases/download" / version / file;
    }

}

class KinxPackageRepositoryManager(cfgMgr_) {

    public getConfigManager() {
        return cfgMgr_;
    }

    public getPackageInfo() {
        var repolist = cfgMgr_.getRepository();
        return repolist.reduce({ &(packages, access)
            var pkgs = cfgMgr_.httpGet(access.jsonUrl);
            pkgs.keySet().each { &(key)
                if (packages[key].isUndefined) {
                    var json = pkgs[key];
                    json.base = access.url;
                    packages[key] = new KinxPackage(key, json, cfgMgr_);
                }
            };
            return packages;
        }, {});
    }

    public list(args) {
        var repolist = cfgMgr_.getRepository();
        repolist.each { &(access)
            json = cfgMgr_.httpGet(access.jsonUrl);
            if (json) {
                if (args[3] == "detail") {
                    Kip.infoln("* ", access.url);
                    json.keySet().each { &(key)
                        new KinxPackage(key, json[key], cfgMgr_).show();
                    };
                } else {
                    var count = json.keySet().length();
                    Kip.infoln("* ", access.url.bold(), (" (%{count} package%{count > 1 ? 's' : ''})").green());
                }
            } else {
                Kip.infoln("* ", access.url);
            }
        };
        return true;
    }

    public add(args) {
        cfgMgr_.addRepo(args[3]);
        return true;
    }

    public remove(args) {
        cfgMgr_.removeRepo(args[3]);
        return true;
    }

}

class KinxPackageLibraryManager(repoMgr_) {

    var cfgMgr_;
    var installed_;

    private initialize() {
        cfgMgr_ = repoMgr_.getConfigManager();
    }

    private getRemotePackages(info) {
        var list = info.getReleaseList().flatMap({
            &(i) => i.assets.map({ &(a) => { url: a.browser_download_url, size: a.size, prerelease: i.prerelease } })
        });
        var re = new Regex(info.packagePath().replace("${version}", "(([0-9]+)\\.([0-9]+)\\.([0-9]+))"));
        list = list
            .map { => { url: _1.url, ver: _1.url.match(re), size: _1.size, prerelease: _1.prerelease } }
            .filter { => _1.ver.isDefined }
            .map { => {
                url: _1.url,
                prerelease: _1.prerelease,
                version: {
                    semver: new SemanticVersion(_1.ver[1]),
                    string: _1.ver[1],
                    major: _1.ver[2],
                    minor: _1.ver[3],
                    patch: _1.ver[4],
                },
                size: _1.size
            }
        };
        return list;
    }

    private isInstalled(name, version) {
        if (installed_.isUndefined) {
            installed_ = [];
            var dir = $pkgpath / name;
            if (File.isDirectory(dir)) {
                Directory.walk(dir) { &(verpath)
                    var ver = verpath.filename();
                    installed_[name][ver] = true;
                };
            }
        }
        return installed_[name][version];
    }

    private makeSizeString(size) {
        if (size > (1024 * 1024 * 1024 * 1024)) {
            return ("%5.1f TB" % Double.parseDouble(size / 1024 / 1024 / 1024 / 1024)).format();
        } else if (size > (1024 * 1024 * 1024)) {
            return ("%5.1f GB" % Double.parseDouble(size / 1024 / 1024 / 1024)).format();
        } else if (size > (1024 * 1024)) {
            return ("%5.1f MB" % Double.parseDouble(size / 1024 / 1024)).format();
        } else if (size > 1024) {
            return ("%5.1f KB" % Double.parseDouble(size / 1024)).format();
        }
        return size + "bytes";
    }

    private listRemotePackages(info, key) {
        if (!info) {
            Kip.errorln("No package(%{key}) found");
            return;
        }
        var list = getRemotePackages(info);
        Kip.infoln("* ", key) if (key);
        list.each {
            var version = _1.version.string;
            var installed = isInstalled(key, version);
            Kip.infoln("    - %{version.bold()} (%{makeSizeString(_1.size)}) ",
                (_1.prerelease ? "[Pre-release]" : "").yellow(),
                (installed ? " - Installed" : "").yellow().bold());
        };
    }

    public search(target) {
        var packages = repoMgr_.getPackageInfo();
        if (packages) {
            if (target) {
                listRemotePackages(packages[target], target);
            } else {
                packages.keySet().each { => listRemotePackages(packages[_1], _1) };
            }
        }
        return true;
    }

    private getVersionString(ver) {
        if (ver == DEVELOPMENT_VERSION) {
            return ("<development>".bold().green()).toString();
        }
        return ver;
    }

    private getVersionList(name) {
        var l = [];
        var dir = $pkgpath / name;
        if (File.isDirectory(dir)) {
            var packdef = name ? cfgMgr_.getPackageDef(name) : null;
            Directory.walk(dir) { &(verpath)
                var ver = verpath.filename();
                var isDevelopment = (ver == DEVELOPMENT_VERSION);
                l.push({
                    latest: packdef && packdef == ver,
                    version: ver,
                    semanticVersion: new SemanticVersion(ver),
                    development: isDevelopment,
                });
            };
        }
        return l.sort { => _1.semanticVersion <=> _2.semanticVersion };
    }

    public list(pkgname) {
        Directory.walk($pkgpath) { &(path)
            if (File.isDirectory(path)) {
                var name = path.filename();
                if (pkgname.isUndefined || pkgname == name) {
                    var l = getVersionList(name);
                    var last = l.length() - 1;
                    Kip.info(name, ": [");
                    l.map { => _1.development
                        ? getVersionString(_1.version)
                        : (_1.latest ? getVersionString(_1.version).bold() : getVersionString(_1.version).yellow())
                    }.each { &(e, i)
                        Kip.info(_1);
                        if (i != last) {
                            Kip.info(", ");
                        }
                    };
                    Kip.infoln("]");
                }
            }
        };
        return true;
    }

    private isExecutable(file) {
        if (File.isDirectory(file)) {
            return false;
        }
        if (file.extension() == ".sh") {
            return true;
        }
        var header = File.read(file, 4);
        return header == <0x7f, 0x45, 0x4c, 0x46>;
    }

    public install(name, version) {
        if (name.isUndefined) {
            Kip.errorln("No package name specified");
            return false;
        }
        var verlist;
        var packages = repoMgr_.getPackageInfo();
        if (packages && packages[name]) {
            verlist = getRemotePackages(packages[name]);
        }
        if (!verlist || verlist.length() == 0) {
            Kip.infoln("No package found.");
            return false;
        }
        var semvlist = verlist.map({ => _1.version.semver });
        if (!version) {
            // Install the latest version.
            version = semvlist.sort()[-1].version();
        }
        var installed = getVersionList(name);
        if (installed.isArray && installed.length() > 0) {
            if (installed.filter({ => _1.version == version }).length() > 0) {
                Kip.infoln("The package %s(%s) has been already installed." % name.bold().underline().toString() % version);
                return false;
            }
        }

        // Download package data.
        var actver = verlist.filter { => _1.version.string == version } [0];
        var url = actver.url;
        var size = actver.size;
        Kip.progressln("Downloading the package %s(%s) with %d bytes." % name % version % size);
        Kip.progressln("from " + url);
        var zipfile = cfgMgr_.download(url, name, version, size);

        // Extract package data.
        var packagedir = $pkgpath / name / version;
        var zip = new Zip(zipfile, File.READ);
        var files = zip.totalFiles;
        var extracted = 0;
        zip.each { &(e)
            var filename = e.filename;
            if (filename.startsWith(version + "/")) {
                filename = filename.subString(version.length() + 1);
            } else if (filename.startsWith("v" + version + "/")) {
                filename = filename.subString(version.length() + 2);
            }
            e.extractTo(packagedir / filename);
            var prog = Integer.parseInt((++extracted) * 100 / files);
            Kip.progress("Extracted %d/%d (%d%%)\r" % extracted % files % prog);
        };
        Kip.progressln("");

        // Update .def file.
        installed = getVersionList(name).map { => _1.semanticVersion };
        var latest = (installed.isArray && installed.length() > 0) ? installed.sort()[-1].version() : null;
        cfgMgr_.setPackageDef(name, latest);
        Kip.progressln("Set the latest version of %s to %s" % name % getVersionString(latest));

        // Auto detaction of exec candidate.
        var candidates = [];
        Directory.walk(packagedir / "bin") { &(f)
            if (f.extension() == ".kx") {
                candidates.push(f.filename());
            }
        };
        Directory.recursiveWalk(packagedir / "bin") { &(f)
            if (isExecutable(f)) {
                File.chmod(f, 755);
                Kip.progressln("Made the file of %{_1.filename().bold().yellow()} executable");
            }
        };
        [ "kxrepl", "kxrepl.exe" ].each { &(exefile)
            var src = $kinxpath / exefile;
            var exe = exefile.extension() == ".exe";
            if (File.exists(src)) {
                candidates.each {
                    var dst = $kinxpath / _1.stem() + (exe ? ".exe" : "");
                    if (File.exists(dst)) {
                        Kip.progressln("Skipped generating a command of %s" % _1);
                        return;
                    }
                    File.copy(src.replace("\\", "/"), dst.replace("\\", "/"));
                    File.chmod(dst, 755);
                    Kip.progressln("Generated a command of %{dst.filename().bold().yellow()}");
                };
            }
        };
        return true;
    }

    private removeFile(file) {
        System.try({ => File.remove(file) }).else({ => Kip.errorln("Failed to remove: %s" % file) });
        return !File.exists(file);
    }

    private removeDir(dir) {
        var success = true;
        Directory.walk(dir) { &(f)
            if (File.isDirectory(f)) {
                removeDir(f);
            }
            if (!removeFile(f)) {
                success = false;
            }
        };
        if (!removeFile(dir)) {
            success = false;
        }
        return success;
    }

    public uninstallVersion(name, version, isDevOnly) {
        // Remove a specific binary.
        var exe = File.exists($kinxpath / "kxrepl.exe");
        var packagebase = $pkgpath / name;
        var packagedir = packagebase / version;
        if (!File.exists(packagedir)) {
            Kip.errorln("No package of %s(%s)" % name % getVersionString(version));
            return false;
        }
        if (isDevOnly && version != DEVELOPMENT_VERSION) {
            Kip.errorln("Not a development package of %s(%s)" % name % getVersionString(version));
            return false;
        }
        var vers = [];
        Directory.walk(packagebase) { &(ver)
            vers.push(ver.filename());
        };
        if (vers.length() == 1 && vers[0] == version) {
            Directory.walk(packagedir / "bin") { &(f)
                if (f.extension() == ".kx") {
                    var dst = $kinxpath / f.stem() + (exe ? ".exe" : "");
                    if (File.exists(dst)) {
                        if (removeFile(dst)) {
                            Kip.progressln("Removed an executable of %s" % dst.filename());
                        }
                    }
                }
            };
        }
        if (removeDir(packagedir)) {
            Kip.progressln("%s(%s) is successfully uninstalled" % name % getVersionString(version));
        }
        var installed = getVersionList(name).map { => _1.semanticVersion };
        var latest = (installed.isArray && installed.length() > 0) ? installed.sort()[-1].version() : null;
        cfgMgr_.setPackageDef(name, latest);
        if (latest) {
            Kip.progressln("Set the latest version of %s to %s" % name % getVersionString(latest));
        } else {
            if (removeDir(packagebase)) {
                Kip.progressln("Removed all versions of %s" % name);
            }
        }
        return true;
    }

    private uninstallAll(name) {
        var exe = File.exists($kinxpath / "kxrepl.exe");
        var packagebase = $pkgpath / name;
        Directory.walk(packagebase) { &(packagedir)
            Directory.walk(packagedir / "bin") { &(f)
                if (f.extension() == ".kx") {
                    var dst = $kinxpath / f.stem() + (exe ? ".exe" : "");
                    if (File.exists(dst)) {
                        if (removeFile(dst)) {
                            Kip.progressln("Removed an executable of %s" % dst.filename());
                        }
                    }
                }
            };
        };
        cfgMgr_.setPackageDef(name);
        if (removeDir(packagebase)) {
            Kip.progressln("All versions of %s is successfully uninstalled" % name);
        }
        return true;
    }

    public uninstall(name, version) {
        if (name.isUndefined) {
            Kip.errorln("No package name specified");
            return false;
        }
        if (version.isUndefined) {
            Kip.errorln("No version for %{name.bold()} specified");
            Kip.errorln("If you want to uninstall all versions, specify 'all'");
            return false;
        }
        if (version == "all") {
            return uninstallAll(name);
        }

        return uninstallVersion(name, version);
    }

    public update(name) {
        if (name) {
            // Install the latest version of the package.
            return install(name);
        }
        Kip.warningln("No name for update...");
        Kip.warningln("Not implemented this feature yet");
        Kip.warningln("TODO: - check if there are updates each package");
        Kip.warningln("TODO: - update those if the package has an update");
        return false;
    }

    private flushProgressText(buf) {
        if (buf.find("\n") >= 0) {
            var txts = buf.split("\n");
            buf = txts.pop();
            txts.each {
                if (_1 =~ /(?i)error/) {
                    Kip.errorln(_1);
                } else if (_1 =~ /(?i)(warning|warn)/) {
                    Kip.warningln(_1);
                } else {
                    Kip.progressln(_1);
                }
            };
        }
        return buf;
    }

    private devDefaultInstall() {
        var pkginfo = JSON.parse(File.load(PACKAGE_INFO_FILE));
        new PackageUpdater(["kip", "--inst"], pkginfo.name, DEVELOPMENT_VERSION).update { &(util)
            if (File.exists("src") && File.isDirectory("src")) {
                Directory.change("src") {
                    Directory.walk(".") {
                        // _1 will be `bin`, `etc` and `lib`.
                        util.dircopy(_1, util.root / _1);
                    };
                };
            }
            if (File.exists("docs") && File.isDirectory("docs")) {
                util.dircopy("docs", util.root / "docs");
            }
        };
        return true;
    }

    public devinstall() {
        if (!File.exists(PACKAGE_INFO_FILE)) {
            Kip.errorln("No package.json file.");
            return false;
        }
        return devDefaultInstall();
    }

    public devuninstall() {
        if (!File.exists(PACKAGE_INFO_FILE)) {
            Kip.errorln("No package.json file.");
            return false;
        }
        var pkginfo = JSON.parse(File.load(PACKAGE_INFO_FILE));
        var [name, version] = [ pkginfo.name, DEVELOPMENT_VERSION ];
        if (name.isString && version.isString) {
            Kip.progressln("Removing the versions(%s) of %s" % getVersionString(version) % name);
            return uninstallVersion(name, version, true);
        }
        return false;
    }

    private createFile(filename, text) {
        File.open(filename, File.WRITE) { => _1.println(text) };
    }

    private mkdir(dir, deffile, text, desc) {
        if (!File.exists(dir)) {
            File.mkdir(dir);
        }
        if (!File.isDirectory(dir)) {
            throw RuntimeException("Not a directory: %{dir}");
        }
        Kip.progressln("Created the directory of '%{dir}'.");
        if (deffile.isString) {
            deffile = dir / deffile;
            createFile(deffile, text);
            Kip.progressln("Created %{desc} of '%{deffile}'.");
        }
    }

    public init(name) {
        if (!name.isString) {
            Kip.errorln("Needs a package name as a key.");
            return false;
        }
        if (!File.exists(".git") || !File.isDirectory(".git")) {
            Kip.errorln("Invalid location, it is not a git repository root here.");
            return false;
        }
        if (File.exists("docs")) {
            Kip.errorln("It seems to be already initialized. Do clean it up before init.");
            return false;
        }
        createFile(PACKAGE_INFO_FILE, { name: name }.toJsonString(true));
        mkdir("docs", "README.md",
                "<!-- This is an auto-generated sample README file. Modify this as your own README file. -->\n"
                "# Kacc\n\n"
                "## Introduction\n\n"
                "This is a directory of documents for the package `%{name}` such as materials below.\n\n"
                "- Package Help - this `README.md` will be displayed by `kip help %{name}`\n"
                "- User Guide\n"
                "- API documents\n\n"
                "Kindly provide the documents for users.",
                "a default README file");
        mkdir("src/bin", "%{name}.kx",
                "# This is a sample hook script file. Feel free to modify this, and it'll be an executable automatically.\n"
                'System.println("Welcome to the package of %{name}.");',
                "a hook script file");
        mkdir("src/lib", "%{name.toUpper(0,1)}.kx",
                "# This is an auto generated library file for init, please feel free to modify it.",
                "an initial library file");
        mkdir("src/etc", "%{name}.json",
                '{}',
                "an initial setting file");
        mkdir(".github/workflows", "main.yml", File.load(__FILE__.parentPath() / "etc/kipmain.yml"), "a default CI file");
        return true;
    }

    public help(name, version) {
        if (name.isUndefined) {
            Kip.errorln("Needs a package key.");
            return false;
        }
        if (version.isUndefined) {
            var installed = getVersionList(name).map { => _1.semanticVersion };
            version = (installed.isArray && installed.length() > 0) ? installed.sort()[-1].version() : null;
        }
        var path = $pkgpath / name / version;
        var readme = path / "docs/README.md";
        if (File.exists(readme)) {
            new SmallMarkdown.MarkdownConsole(File.load(readme)).show();
        }
    }
}

class KinxPackageManager {

    const CONFIG_FILE_NAME = "config.json";
    const DEF_FILE_NAME = "kxpackage.def";
    var config_;

    private initialize() {
        if (!File.exists($pkgpath)) {
            File.mkdir($pkgpath);
        }
        var configFile = $pkgpath / CONFIG_FILE_NAME;
        var defFile = $pkgpath / DEF_FILE_NAME;
        config_ = new KinxPackageManagerConfig(configFile, defFile);
    }

    private config(args) {
        switch (args[2]) {
        case "list": case "ls": case "l": case "show": case "sh":
            config_.list();
            return true;
        case "set": case "s":
            config_.set(args[3], args[4]);
            return true;
        case "remove": case "rm": case "r":
            config_.remove(args[3]);
            return true;
        }
        return false;
    }

    private repo(args) {
        var mgr = new KinxPackageRepositoryManager(config_);
        switch (args[2]) {
        case "list": case "ls": case "l":
            mgr.list(args);
            return true;
        case "add": case "a":
            mgr.add(args);
            return true;
        case "remove": case "rm": case "r":
            mgr.remove(args);
            return true;
        }
        return false;
    }

    private package(args) {
        var mgr = new KinxPackageLibraryManager(new KinxPackageRepositoryManager(config_));
        switch (args[1]) {
        case "install": case "i":
            mgr.install(args[2], args[3]);
            return true;
        case "uninstall": case "u":
            mgr.uninstall(args[2], args[3]);
            return true;
        case "update":
            mgr.update(args[2]);
            return true;
        case "list": case "ls": case "l":
            mgr.list(args[2]);
            return true;
        case "search": case "s":
            mgr.search(args[2]);
            return true;
        case "devinst":
            mgr.devinstall();
            return true;
        case "devuninst":
            mgr.devuninstall();
            return true;
        case "init":
            mgr.init(args[2]);
            return true;
        case "help":
            mgr.help(args[2], args[3]);
            return true;
        }
        return false;
    }

    private usage() {
        Kip.infoln("Options");
        Kip.infoln("    -h                        Display this help.");
        Kip.infoln("    -v                        Verbose mode.");
        Kip.infoln("");
        Kip.infoln("Configuration");
        Kip.infoln("    config set <name> <value> Sets a value to a name.");
        Kip.infoln("    config remove <name>      Removes a name and a value.");
        Kip.infoln("    config show [<name>]      Lists up a name and a value.");
        Kip.infoln("");
        Kip.infoln("Central Repository Access");
        Kip.infoln("    repo add <repo>           Adds a central repository.");
        Kip.infoln("    repo remove <repo>        Removes a central repository.");
        Kip.infoln("    repo list                 Lists up a central repository.");
        Kip.infoln("");
        Kip.infoln("Package Control");
        Kip.infoln("    search <key>              Searches a package.");
        Kip.infoln("    install <key> [<ver>]     Installs a specified package.");
        Kip.infoln("    uninstall <key> <ver>|all Uninstalls a specified package.");
        Kip.infoln("    devinst                   Installs a develpment package.");
        Kip.infoln("    devuninst                 Uninstalls a develpment package.");
        Kip.infoln("    list                      Lists up installed packages.");
        Kip.infoln("    init <key>                Creates and initializes a package.");
        Kip.infoln("    help <key> [<ver>]        Shows README.md of a package.");
        # Kip.infoln("    update [<key>]            Updates packages to the latest version.");
    }

    private checkOptions(args) {
        var list = [];
        var opt;
        while (opt = System.getopt(args, "vh")) {
            switch (opt.type) {
            case 'v':
                config_.verbose = true;
                break;
            case 'h':
                return;
            case '-':
                list.push(opt.arg);
                break;
            }
        }
        return list;
    }

    public work(args) {
        args = checkOptions(args);
        if (args.isUndefined) {
            return usage();
        }
        switch (args[1]) {
        when "config":
            if (!config(args)) {
                return usage();
            }
        when "repo":
            if (!repo(args)) {
                return usage();
            }
        default:
            if (!package(args)) {
                return usage();
            }
        }
        config_.save();
    }

}

var mgr = new KinxPackageManager();
mgr.work($$);
