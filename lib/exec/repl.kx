Signal.trap(Signal.SIGINT, &() => {
    System.println("\nTerminate.");
    return false;
});

class ReplHelper {
    var keywords_ = "\\b(:break|class|catch|case|continue|const|do|default|else|enum|"
                    "function|for|finally|false|if|in|module|mixin|null|new|native|namespace|"
                    "public|private|protected|return|super|switch|this|throw|try|true|using|undefined|var|while|yield)\\b";
    var numbers_ = "(0[0-7]*|[1-9][0-9]*|0x[0-9a-fA-F]+)";
    var variables_ = "\\b(@|[\\$_a-zA-Z][\\$_a-zA-Z0-9]*)\\b";
    var re_ = new Regex("%{keywords_}|%{numbers_}|%{variables_}");
    var va_ = new Regex("%{variables_}");

    public coloringLine(inputLine) {
        if (inputLine) {
            inputLine = inputLine.replace(re_, &(g) => {
                if (g[1].string) {
                    return "\x1b[35m%{g[1].string}\x1b[0m";
                }
                if (g[2].string) {
                    return "\x1b[36m%{g[2].string}\x1b[0m";
                }
                if (g[3].string) {
                    return "\x1b[33m%{g[3].string}\x1b[0m";
                }
                return g[0].string;
            });
        }
        return inputLine;
    }
    public replaceVariale(code, vars) {
        return code.replace(va_, &(g) => {
            var name = g[1].string;
            if (name) {
                if (vars[name].value) {
                    return vars[name].value;
                }
                if (vars[name].func) {
                    return vars[name].func;
                }
            }
            return g[0].string;
        });
    }
}

class ReplCommand(helper_, info_) {
    public vars() {
        info_.vars.keySet().each(&(key) => {
            if (info_.vars[key].value) {
                System.println(helper_.coloringLine("%{key} = %{info_.vars[key].value}"));
            } else if (info_.vars[key].func) {
                System.println(helper_.coloringLine("(%{info_.vars[key].disp})"));
            }
        });
    }
    public history() {
        info_.history.each(&(h, i) => {
            var l = helper_.coloringLine(h.info.map(&(e) => e.str).join(''));
            System.println("[%3d]: %s" % i % l);
        });
    }
}

class Repl {

    var widthMap_, cmd_, helper_;
    var info_ = {
        line: 0,
        history: [],
        vars: {},
    };

    private initialize() {
        helper_ = new ReplHelper();
        cmd_ = new ReplCommand(helper_, info_);
    }

    private showPrompt(pos, info, lines) {
        var infolen = info.length();
        var histlen = info_.history.length();
        var prompt = ((lines > 0 ? "    [%3d]> " : "kinx[%3d]> ") % histlen).format();
        inputLine = helper_.coloringLine(info.map(&(e) => e.str).join(''));
        System.print(("\x1b[2K\r\x1b[32m%{prompt}\x1b[0m ") + inputLine);
        if (pos != infolen) {
            var linepos = 0;
            for (var i = pos; i < infolen; ++i) {
                linepos += info[i].len > 1 ? (widthMap_[info[i].str] || 2) : 1;
            }
            System.print("\x1b[%{linepos}D");
        }
    }

    private printCommand(cmd) {
        System.println("\x1b[34;1m=> %{cmd}\x1b[0m\n");
    }

    private printResult(result) {
        System.println("\x1b[32;1m=> \x1b[0m%{result}\n");
    }

    private printError(msg) {
        System.println("\x1b[91;1m=> Error: \x1b[0m%{msg}\n");
    }

    private countBrs(buf) {
        var brs = 0;
        buf.each(&(info) => {
            info.each(&(l) => {
                if (l.str == '{') brs++;
                if (l.str == '}') brs--;
            });
        });
        return brs;
    }

    public read() {
        var historyPos = info_.history.length();
        var lines = 0;
        var pos = 0;
        var buf = [];
        var info = [];
        while (true) {
            showPrompt(pos, info, lines);
            var l, c = $stdin.getKeyCode();
            switch (c) {
            case KX_KEY_ENTER:
                System.println("");
                info_.history.push({ info: info });
                buf.push(info);
                var brs = countBrs(buf);
                if (brs == 0) {
                    return buf.map(&(info) => info.map(&(e) => e.str).join('')).join('\n') + '\n';
                }
                ++lines;
                info = [];
                pos = 0;
                continue;
            case KX_KEY_TAB:
                add = (4 - (pos % 4));
                if (pos == info.length()) {
                    add.times(&() => info.push({ len: 1, str: ' ' }));
                } else {
                    var e = info.subArray(pos);
                    info = info.subArray(0, pos);
                    add.times(&() => info.push({ len: 1, str: ' ' }));
                    info += e;
                }
                pos = pos + add;
                continue;
            case KX_KEY_UP:
                if (0 < historyPos) {
                    historyPos--;
                    info = info_.history[historyPos].info.clone();
                    pos = info.length();
                }
                continue;
            case KX_KEY_DOWN:
                if (historyPos < info_.history.length() - 1) {
                    historyPos++;
                    info = info_.history[historyPos].info.clone();
                    pos = info.length();
                }
                continue;
            case KX_KEY_LEFT:
                if (0 < pos) {
                    --pos;
                }
                continue;
            case KX_KEY_RIGHT:
                if (pos < info.length()) {
                    ++pos;
                }
                continue;
            case KX_KEY_BS:
                if (pos > 0) {
                    if (pos == info.length()) {
                        l = info.pop();
                    } else {
                        var e = info.subArray(pos);
                        info = info.subArray(0, pos - 1);
                        info += e;
                    }
                    --pos;
                }
                continue;
            case KX_KEY_DEL:
                if (pos > 0) {
                    if (pos == info.length()) {
                        l = info.pop();
                    } else {
                        var e = info.subArray(pos + 1);
                        info = info.subArray(0, pos);
                        info += e;
                    }
                }
                continue;
            }
            if ((l = System.isUtf8Bytes(c)) > 1) {
                var len = l;
                var str = *c;
                while (--l) {
                    c = $stdin.getKeyCode();
                    str += *c;
                }
                if (pos == info.length()) {
                    info.push({
                        len: len,
                        str: str,
                    });
                } else {
                    var e = info.subArray(pos);
                    info = info.subArray(0, pos);
                    info.push({
                        len: len,
                        str: str,
                    });
                    info += e;
                }
                ++pos;
            } else if (20 <= c && c <= '}'[0]) {
                if (pos == info.length()) {
                    info.push({
                        len: 1,
                        str: *c,
                    });
                } else {
                    var e = info.subArray(pos);
                    info = info.subArray(0, pos);
                    info.push({
                        len: 1,
                        str: *c,
                    });
                    info += e;
                }
                ++pos;
            }
        }
    }

    private appendPreCode(code) {
        var r = info_.vars.keySet()
            .map(&(key) => {
                if (info_.vars[key].value) {
                    return "var %{key} = %{info_.vars[key].value};";
                } else if (info_.vars[key].func) {
                    return "%{info_.vars[key].name} = %{info_.vars[key].func};";
                }
                return ";";
            })
            .join('');
        if (code.isString) {
            r += helper_.replaceVariale(code, info_.vars);
        }
        return r;
    }

    public eval(input) {
        var r;
        try {
            var g;
            // assignment.
            if (g = (input =~ /^\s*(?:var)?\s*([$_a-zA-Z0-9]+)\s*=\s*(.+)\s*;?\n$/)) {
                var name = g[1].string;
                var value = g[2].string;
                input = appendPreCode() + input + ";return %{name}.isObject ? %{name}.toJsonString() : %{name};";
                # System.println(input);
                if (info_.vars[value].func) {
                    r = input.evalNew();
                    info_.vars[name] = {
                        func: info_.vars[value].func,
                        disp: 'function %{name}(%{info_.vars[value].args})',
                        name: name,
                        args: info_.vars[value].args
                    };
                } else {
                    r = input.evalNew();
                    info_.vars[name] = {
                        value: r,
                    };
                }
                return r;
            }

            if (g = (input =~ /^\s*function\s*([$_a-zA-Z0-9]+)\s*\(([^\\)]*)\)((.|\n)+)/)) {
                var name = g[1].string;
                input = "%{name} = function(%{g[2].string}) %{g[3].string}";
                input = appendPreCode() + input + ";return 'function %{name}(%{g[2].string})';";
                # System.println(input);
                r = input.evalNew();
                info_.vars[name] = {
                    func: "function(%{g[2].string}) %{g[3].string}",
                    disp: 'function %{name}(%{g[2].string})',
                    name: name,
                    args: g[2].string
                };
                return r;
            }

            var expr = input.trim().trim(';');
            if (expr.find(';') < 0) {
                // 1 line, means expression;
                input = appendPreCode() + ";_$ = (%{expr}); if (_$.isObject) return _$.toJsonString(); return _$;";
                # System.println(input);
                return input.evalNew();
            }

            v = "";
            r = "";
            while (g = (input =~ /\s*([$_a-zA-Z0-9]+)\s*=\s*([^;]+)(?:;|\s*\n)?/)) {
                var name = g[1].string;
                var value = g[2].string;
                v += "%{name},";
                r += "%{name}: %{name},";
            }

            input = appendPreCode() + "var %{v}_dummy;" + input + ";if ('%{r}' != '') return ({%{r}}.toJsonString());";
            # System.println(input);
            r = input.evalNew();
            r = System.try(&() => JSON.parse(r)).else();
            if (r) {
                r.keySet().each(&(name) => {
                    info_.vars[name] = {
                        value: r[name],
                    };
                });
            }
        } catch (e) {
            System.println("Error: " + e.what());
            System.println("Code:");
            System.println(input);
        }
        return r;
    }

    public print(result) {
        printResult(result);
    }

    public run() {
        while (1) {
            var input = read();
            if (input[0] == '.'[0]) {
                // command.
                var f = input.subString(1).trim();
                if (f == "quit") {
                    break;
                }
                if (cmd_[f].isFunction) {
                    cmd_[f]();
                } else {
                    printError("Unknown command.");
                    info_.history.pop();
                }
                continue;
            }
            if (input[0] == '!'[0]) {
                var h = Integer.parseInt(input.subString(1));
                input = info_.history[h].info;
                if (!input.isArray) {
                    printError("Invaild history number.");
                    info_.history.pop();
                    continue;
                }
                info_.history[-1].info = input;
                input = input.map(&(e) => e.str).join('');
                printCommand(input);
            }
            var result = eval(input);
            print(result);
        }
    }

}

new Repl().run();
