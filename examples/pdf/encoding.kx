using PdfCore;

const PAGE_WIDTH = 420;
const PAGE_HEIGHT = 400;
const CELL_WIDTH = 20;
const CELL_HEIGHT = 20;
const CELL_HEADER = 10;

function drawGraph(page) {
    /* Draw 16 X 15 cells */
    /* Draw vertical lines. */
    page.setLineWidth(0.5);
    for (i = 0; i <= 17; i++) {
        var x = i * CELL_WIDTH + 40;
        page.moveTo(x, PAGE_HEIGHT - 60);
        page.lineTo(x, 40);
        page.stroke();
        if (i > 0 && i <= 16) {
            page.beginText();
            page.moveTextPos(x + 5, PAGE_HEIGHT - 75);
            page.showText(("%X" % (i-1)).format());
            page.endText();
        }
    }
    /* Draw horizontal lines. */
    for (i = 0; i <= 15; i++) {
        var y = i * CELL_HEIGHT + 40;
        page.moveTo(40, y);
        page.lineTo(PAGE_WIDTH - 40, y);
        page.stroke();
        if (i < 14) {
            page.beginText();
            page.moveTextPos(45, y + 5);
            page.showText(("%X" % (15-i)).format());
            page.endText();
        }
    }
}


function drawFonts(page) {
    var i, j;
    page.beginText();

    /* Draw all character from 0x20 to 0xFF to the canvas. */
    for (i = 1; i < 17; i++) {
        for (j = 1; j < 17; j++) {
            var y = PAGE_HEIGHT - 55 - ((i - 1) * CELL_HEIGHT);
            var x = j * CELL_WIDTH + 50;

            var ch = (i - 1) * 16 + (j - 1);
            if (ch >= 32) {
                var d = x - page.textWidth(*ch) / 2;
                page.textOut(d, y, *ch);
            }
        }
    }

    page.endText();
}


encodings = [
        "StandardEncoding",
        "MacRomanEncoding",
        "WinAnsiEncoding",
        "ISO8859-2",
        "ISO8859-3",
        "ISO8859-4",
        "ISO8859-5",
        "ISO8859-9",
        "ISO8859-10",
        "ISO8859-13",
        "ISO8859-14",
        "ISO8859-15",
        "ISO8859-16",
        "CP1250",
        "CP1251",
        "CP1252",
        "CP1254",
        "CP1257",
        "KOI8-R",
        "Symbol-Set",
        "ZapfDingbats-Set",
        null
];

var pdf = new Pdf();

/* set compression mode */
pdf.setCompressionMode(PDF_COMP_ALL);

/* Set page mode to use outlines. */
pdf.setPageMode(PDF_PAGE_MODE_USE_OUTLINE);

/* get default font */
var font = pdf.getFont("Helvetica", null);

/* load font object */
var font_name = pdf.loadTTFontFromFile("fonts/NotoSerifJP-Regular.ttf", true);

/* create outline root. */
var root = pdf.createOutline(null, "Encoding list", null);
root.setOpened(true);

var i = 0;
while (encodings[i]) {
    var page = pdf.addPage();

    page.setWidth(PAGE_WIDTH);
    page.setHeight(PAGE_HEIGHT);

    var outline = pdf.createOutline(root, encodings[i], null);
    var dst = page.createDestination();
    dst.setXYZ(0, page.getHeight(), 1);
    outline.setDestination(dst);

    page.setFontAndSize(font, 15);
    drawGraph(page);

    page.beginText();
    page.setFontAndSize(font, 20);
    page.moveTextPos(40, PAGE_HEIGHT - 50);
    page.showText(encodings[i]);
    page.showText(" Encoding");
    page.endText();

    var font2;
    if (encodings[i] == "Symbol-Set")
        font2 = pdf.getFont("Symbol", null);
    else if (encodings[i] == "ZapfDingbats-Set")
        font2 = pdf.getFont("ZapfDingbats", null);
    else
        font2 = pdf.getFont(font_name, encodings[i]);

    page.setFontAndSize(font2, 14);
    drawFonts(page);

    i++;
}

/* save the document to a file */
pdf.saveToFile("pdfdemo_encoding.pdf");
