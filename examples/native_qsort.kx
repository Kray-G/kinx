
native quicksort_n(a:bin, first, last) {
    var i = first;
    var j = last;
    var x = a[(first + last) / 2];
    while (true) {
        while (a[i] < x) i++;
        while (x < a[j]) j--;
        if (i >= j) break;

        [a[i], a[j]] = [a[j], a[i]];
        ++i; --j;
    }
    if (first  < i - 1)
        quicksort_n(a, first, i - 1);
    if (j + 1 < last)
        quicksort_n(a, j + 1, last);
}

function quicksort_f(a:bin, first, last) {
    var i = first;
    var j = last;
    var x = a[(first + last) / 2];
    while (true) {
        while (a[i] < x) i++;
        while (x < a[j]) j--;
        if (i >= j) break;

        [a[i], a[j]] = [a[j], a[i]];
        ++i; --j;
    }
    if (first  < i - 1)
        quicksort_f(a, first, i - 1);
    if (j + 1 < last)
        quicksort_f(a, j + 1, last);
}

function demo(N, quicksort) {
    var a = <>; // array

    # System.print("Before:");
    for (var i = 0; i < N; i++) {
        a[i] = Integer.parseInt(Math.random() * 100);
        # System.print(" %2d" % a[i]);
    }
    # System.print("\n");

    quicksort(a, 0, N - 1);

    # System.print("After: ");
    # for (var i = 0; i < N; i++)
    #     System.print(" %2d" % a[i]);
    # System.print("\n");
}

const C = 1000;
var tmr = new SystemTimer();
tmr.restart();
for (var i = 0; i < C; ++i) {
    demo(200, quicksort_n);
}
System.println("elapsed = %f" % tmr.elapsed());
tmr.restart();
for (var i = 0; i < C; ++i) {
    demo(200, quicksort_f);
}
System.println("elapsed = %f" % tmr.elapsed());
