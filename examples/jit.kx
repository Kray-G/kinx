using Jit;

function runJit(c, ...a) {
    var code = c.generate();
    code.dump();
    var r = code.run(...a);
    System.println(r);
}

function jit_001() {
    var c = new Jit.Compiler();
    c.enter();
        c.add(Jit.VAR(0), Jit.S0, Jit.S1);
        c.add(Jit.VAR(0), Jit.VAR(0), Jit.S2);
        c.add(Jit.VAR(0), Jit.VAR(0), Jit.IMM(100));
        c.mov(Jit.R0, Jit.IMM(1));
        c.mov(Jit.R1, Jit.IMM(2));
        c.mov(Jit.R2, Jit.IMM(3));
        var call1 = c.call();
        c.add(Jit.VAR(0), Jit.VAR(0), Jit.R0);
        c.ret(Jit.VAR(0));

    var entry1 = c.enter();
        c.ret(Jit.IMM(100));

    var entry2 = c.enter();
        c.add(Jit.R1, Jit.S0, Jit.S1);
        c.add(Jit.R1, Jit.R1, Jit.S2);
        c.call(entry1);
        c.add(Jit.R0, Jit.R0, Jit.R1);
        c.ret(Jit.R0);

    call1.setLabel(entry2);

    runJit(c, 10, 20, 30);
}

function jit_002() {
    var c = new Jit.Compiler();
    c.enter();
        c.mov(Jit.R0, Jit.IMM(100));
        c.mov(Jit.R1, Jit.IMM(110));
        c.mov(Jit.R2, Jit.IMM(120));
        c.mov(Jit.R3, Jit.IMM(130));
        var c1 = c.fastCall();
        c.ret(Jit.R0);

    var e1 = c.fastEnter(Jit.R4);
        c.add(Jit.R0, Jit.R0, Jit.R1);
        c.add(Jit.R0, Jit.R0, Jit.R2);
        c.add(Jit.R0, Jit.R0, Jit.R3);
        c.ret(Jit.R0);

    c1.setLabel(e1);

    runJit(c);
}

function jit_003() {
    var c = new Jit.Compiler();
    c.enter();
        c.mov(Jit.R0, Jit.IMM(100));
        var j1 = c.jmp();
        c.ret(Jit.R0);
        var l1 = c.label();
        c.mov(Jit.R1, Jit.IMM(101));
        c.ret(Jit.R1);

    j1.setLabel(l1);

    runJit(c);
}

function jit_004() {
    var c = new Jit.Compiler();
    c.enter();
        c.mov(Jit.R0, Jit.IMM(100));
        var const1 = c.makeConst(Jit.R1);
        c.ijmp(Jit.R1);
        c.ret(Jit.R0);
        var l1 = c.label();
        c.mov(Jit.R1, Jit.IMM(102));
        c.ret(Jit.R1);

    var code = c.generate();
    const1.setLabel(l1);        # Setting a const value should be after generated a code.
    code.dump();

    var r = code.run();
    System.println(r);
}

function jit_005() {
    var c = new Jit.Compiler();
    c.enter();
        c.mov(Jit.VAR(4), Jit.IMM(0));
        var const0 = c.makeConst(Jit.VAR(0));
        var const1 = c.makeConst(Jit.VAR(1));
        var const2 = c.makeConst(Jit.VAR(2));
        var const3 = c.makeConst(Jit.VAR(3));
        c.localp(Jit.R0, Jit.S0);
        c.mov(Jit.R0, Jit.MEM1(Jit.R0));
        c.ijmp(Jit.R0);
        var l0 = c.label();
        c.mov(Jit.R1, Jit.IMM(102));
        c.ret(Jit.R1);
        var l1 = c.label();
        c.mov(Jit.R1, Jit.IMM(103));
        c.ret(Jit.R1);
        var l2 = c.label();
        c.mov(Jit.R1, Jit.IMM(104));
        c.ret(Jit.R1);
        var l3 = c.label();
        c.mov(Jit.R1, Jit.IMM(105));
        c.ret(Jit.R1);

    var code = c.generate();
    const0.setLabel(l0);
    const1.setLabel(l1);
    const2.setLabel(l2);
    const3.setLabel(l3);
    code.dump();

    for (var i = 0; i < 4; ++i) {
        var r = code.run(i);
        System.println(r);
    }
}

function jit_006() {
    var c = new Jit.Compiler();
    c.enter();
        c.mov(Jit.R0, Jit.IMM(100));
        var jump1 = c.sigge(Jit.R0, Jit.IMM(100));
        c.ret(Jit.IMM(0));
        var l1 = c.label();
        c.ret(Jit.IMM(1));

    jump1.setLabel(l1);

    var code = c.generate();
    code.dump();

    var r = code.run();
    System.println(r);
}

jit_001();
jit_002();
jit_003();
jit_004();
jit_005();
jit_006();
