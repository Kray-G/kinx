var successful = 0;
var failed = 0;
var results = [];
function testit(line, fromcode, fromVal, tocode, toVal) {
    var r;
    try {
        var conv = new Iconv({ to: tocode, from: fromcode });
        if (toVal.isBinary) {
            conv.binmode();
        }
        var val = conv.convert(fromVal);
        r = {
            exception: false,
            convVal: val,
            expected: toVal,
            result: val == toVal,
        };
    } catch (e) {
        r = {
            exception: true,
            convVal: "",
            expected: toVal,
            result: toVal == "",
        };
    }
    r.line = line;
    r.fromcode = fromcode;
    r.fromVal = fromVal;
    r.tocode = tocode;
    r.toVal = toVal;
    results.push(r);
    return r;
}
function success(line, fromcode, fromVal, tocode, toVal) {
    r = testit(line, fromcode, fromVal, tocode, toVal);
    if (!r.exception && r.result) {
        r.successful = true;
        ++successful;
    } else {
        ++failed;
        System.println(r.toJsonString(true));
    }
}
function eilseq(line, fromcode, fromVal, tocode, toVal) {
    r = testit(line, fromcode, fromVal, tocode, toVal);
    if (r.exception) {
        r.successful = true;
        ++successful;
    } else {
        ++failed;
        System.println(r.toJsonString(true));
    }
}
function einval(line, fromcode, fromVal, tocode, toVal) {
    return eilseq(line, fromcode, fromVal, tocode, toVal);
}
function report() {
    System.println("successful = %d" % successful);
    System.println("failed     = %d" % failed);
}

success(__LINE__, "ascii", "ABC", "ascii", "ABC");
success(__LINE__, "ascii", "ABC", "utf-16be", <0x00, 0x41, 0x00, 0x42, 0x00, 0x43>);
success(__LINE__, "ascii", "ABC", "ascii", "ABC");
eilseq(__LINE__, "ascii", <0x80>, "ascii", "");
eilseq(__LINE__, "ascii", <0xFF>, "ascii", "");
success(__LINE__, "utf-16", <0xFE, 0xFF, 0x01, 0x02>, "utf-16be", <0x01, 0x02>);
success(__LINE__, "utf-16", <0xFF, 0xFE, 0x02, 0x01>, "utf-16be", <0x01, 0x02>);
success(__LINE__, "utf-32", <0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x01, 0x02>, "utf-32be", <0x00, 0x00, 0x01, 0x02>);
success(__LINE__, "utf-32", <0xFF, 0xFE, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00>, "utf-32be", <0x00, 0x00, 0x01, 0x02>);
success(__LINE__, "utf-16", <0xFE, 0xFF, 0x00, 0x01>, "utf-8", <0x01>);

success(__LINE__, "utf-8", <0x01>, "utf-16", <0xFF, 0xFE, 0x01, 0x00>);
success(__LINE__, "utf-8", <0x01>, "utf-32", <0xFF, 0xFE, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00>);

success(__LINE__, "utf-16be", <0xFE, 0xFF, 0x01, 0x02>, "utf-16be", <0xFE, 0xFF, 0x01, 0x02>);
success(__LINE__, "utf-16le", <0xFF, 0xFE, 0x02, 0x01>, "utf-16be", <0xFE, 0xFF, 0x01, 0x02>);
success(__LINE__, "utf-32be", <0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x01, 0x02>, "utf-32be", <0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x01, 0x02>);
success(__LINE__, "utf-32le", <0xFF, 0xFE, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00>, "utf-32be", <0x00, 0x00, 0xFE, 0xFF, 0x00, 0x00, 0x01, 0x02>);
success(__LINE__, "utf-16be", <0xFE, 0xFF, 0x00, 0x01>, "utf-8", <0xEF, 0xBB, 0xBF, 0x01>);
success(__LINE__, "utf-8", <0xEF, 0xBB, 0xBF, 0x01>, "utf-8", <0xEF, 0xBB, 0xBF, 0x01>);

success(__LINE__, "utf-16be", <0x01, 0x02>, "utf-16le", <0x02, 0x01>);
success(__LINE__, "utf-16le", <0x02, 0x01>, "utf-16be", <0x01, 0x02>);
success(__LINE__, "utf-16be", <0xFE, 0xFF>, "utf-16le", <0xFF, 0xFE>);
success(__LINE__, "utf-16le", <0xFF, 0xFE>, "utf-16be", <0xFE, 0xFF>);
success(__LINE__, "utf-32be", <0x00, 0x00, 0x03, 0x04>, "utf-32le", <0x04, 0x03, 0x00, 0x00>);
success(__LINE__, "utf-32le", <0x04, 0x03, 0x00, 0x00>, "utf-32be", <0x00, 0x00, 0x03, 0x04>);
success(__LINE__, "utf-32be", <0x00, 0x00, 0xFF, 0xFF>, "utf-16be", <0xFF, 0xFF>);
success(__LINE__, "utf-16be", <0xFF, 0xFF>, "utf-32be", <0x00, 0x00, 0xFF, 0xFF>);
success(__LINE__, "utf-32be", <0x00, 0x01, 0x00, 0x00>, "utf-16be", <0xD8, 0x00, 0xDC, 0x00>);
success(__LINE__, "utf-16be", <0xD8, 0x00, 0xDC, 0x00>, "utf-32be", <0x00, 0x01, 0x00, 0x00>);
success(__LINE__, "utf-32be", <0x00, 0x10, 0xFF, 0xFF>, "utf-16be", <0xDB, 0xFF, 0xDF, 0xFF>);
success(__LINE__, "utf-16be", <0xDB, 0xFF, 0xDF, 0xFF>, "utf-32be", <0x00, 0x10, 0xFF, 0xFF>);
eilseq(__LINE__, "utf-32be", <0x00, 0x11, 0x00, 0x00>, "utf-16be", "");
eilseq(__LINE__, "utf-16be", <0xDB, 0xFF, 0xE0, 0x00>, "utf-32be", "");
success(__LINE__, "utf-8", <0xE3, 0x81, 0x82>, "utf-16be", <0x30, 0x42>);
einval(__LINE__, "utf-8", <0xE3>, "utf-16be", "");

success(__LINE__, "utf-16be", <0xFF, 0x5E>, "cp932", <0x81, 0x60>);
success(__LINE__, "utf-16be", <0x30, 0x1C>, "cp932", <0x81, 0x60>);
success(__LINE__, "utf-16be", <0xFF, 0x5E>, "cp932//nocompat", <0x81, 0x60>);
eilseq(__LINE__, "utf-16be", <0x30, 0x1C>, "cp932//nocompat", "");
success(__LINE__, "euc-jp", <0xA4, 0xA2>, "utf-16be", <0x30, 0x42>);
einval(__LINE__, "euc-jp", <0xA4, 0xA2, 0xA4>, "utf-16be", <0x30, 0x42>);
eilseq(__LINE__, "euc-jp", <0xA4, 0xA2, 0xFF, 0xFF>, "utf-16be", <0x30, 0x42>);
success(__LINE__, "cp932", <0x81, 0x60>, "iso-2022-jp", <0x1B, 0x24, 0x42, 0x21, 0x41, 0x1B, 0x28, 0x42>);
success(__LINE__, "UTF-16BE", <0xFF, 0x5E>, "iso-2022-jp", <0x1B, 0x24, 0x42, 0x21, 0x41, 0x1B, 0x28, 0x42>);
eilseq(__LINE__, "UTF-16BE", <0x30, 0x1C>, "iso-2022-jp//nocompat", "");
success(__LINE__, "UTF-16BE", <0x30, 0x42, 0x30, 0x44>, "iso-2022-jp", <0x1B, 0x24, 0x42, 0x24, 0x22, 0x24, 0x24, 0x1B, 0x28, 0x42>);
success(__LINE__, "iso-2022-jp", <0x1B, 0x24, 0x42, 0x21, 0x41, 0x1B, 0x28, 0x42>, "UTF-16BE", <0xFF, 0x5E>);

eilseq(__LINE__, "UTF-16BE", <0xFF, 0x41>, "iso-8859-1", "");
success(__LINE__, "UTF-16BE", <0xFF, 0x41>, "iso-8859-1//translit", "a");

eilseq(__LINE__, "UTF-16BE", <0x30, 0x42>, "ascii", "");
success(__LINE__, "UTF-16BE", <0x30, 0x42>, "ascii//translit", "?");

success(__LINE__, "UTF-8", "\xFF A \xFF B", "ascii//ignore", " A  B");
success(__LINE__, "UTF-8", "\xEF\xBC\xA1 A \xEF\xBC\xA2 B", "ascii//ignore", " A  B");
success(__LINE__, "UTF-8", "\xEF\x01 A \xEF\x02 B", "ascii//ignore", "\x01 A \x02 B");

report();
