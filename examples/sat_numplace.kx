using SatisfiablitySolver;

const N = 3;
var R = N * N;
var solution = 0;

function display(test, e) {
    var board = test.clone();
    if (e) {
        board = [];
        System.print("\nSolution %d\n" % ++solution);
        for (var key = 0, l = e.length(); key < l; ++key) {
            if (e[key] > 0) {
                var value = e[key];
                var v = value % R;
                var ij = Integer.parseInt((value-1) / R);
                var i = ij % R;
                var j = Integer.parseInt(ij / R);
                board[j][i] = v == 0 ? R : v;
            }
        }
    }
    for (var jx = 0; jx < R; ++jx) {
        if (jx % N == 0) System.println((("+" + ("-" * (3 * N + 1))) * N) + "+");
        for (var ix = 0; ix < R; ++ix) {
            if (ix % N == 0) System.print(ix == 0 ? "|" : " |");
            if (board[jx][ix]) {
                var v = ("%2d" % board[jx][ix]).format();
                if (e && test[jx][ix] > 0) {
                    System.print(" " + v.magenta().bold());
                } else {
                    System.print(" " + v);
                }
            } else {
                System.print("  .");
            }
        }
        System.println(" |");
    }
    System.println((("+" + ("-" * (3 * N + 1))) * N) + "+");
}

function makeRestriction(s, i, j, v) {
    const key = ((i + j * R) * R) + v;

    // There is at most one number in each cell. (Cell - uniqueness)
    for (var vi = 1; vi <= R; ++vi) {
        if (v != vi) {
            s.addClause([-key, -(((i + j * R) * R) + vi)]);
        }
    }

    // Each number appears at most once in each row. (Row - uniqueness)
    for (var ix = i + 1; ix < R; ++ix) {
        s.addClause([-key, -(((ix + j * R) * R) + v)]);
    }

    // Each number appears at most once in each column. (Column - uniqueness)
    for (var jx = j + 1; jx < R; ++jx) {
        s.addClause([-key, -(((i + jx * R) * R) + v)]);
    }

    var si = Integer.parseInt(i / N) * N;
    var sj = Integer.parseInt(j / N) * N;
    var ei = si + N;
    var ej = sj + N;
    // Each number appears at most once in each block. (Block - uniqueness)
    for (var ix = si; ix < ei; ++ix) {
        for (var jx = sj; jx < ej; ++jx) {
            const key2 = ((ix + jx * R) * R) + v;
            if (key2 > key) {
                s.addClause([-key, -key2]);
            }
        }
    }
}

var test = N == 3 ? [
    # [ 0, 0, 0, 0, 0, 0, 0, 7, 0],
    # [ 1, 0, 5, 0, 3, 6, 4, 0, 9],
    # [ 0, 7, 4, 9, 0, 0, 5, 0, 0],
    # [ 0, 0, 0, 0, 0, 5, 8, 0, 0],
    # [ 0, 1, 0, 3, 0, 0, 0, 0, 5],
    # [ 7, 0, 0, 0, 0, 8, 1, 0, 0],
    # [ 6, 4, 0, 0, 0, 0, 0, 0, 7],
    # [ 0, 3, 0, 6, 2, 0, 0, 8, 4],
    # [ 0, 0, 0, 5, 9, 0, 0, 0, 3],

    # [ 8, 0, 0, 0, 0, 0, 0, 0, 0],
    # [ 0, 0, 3, 6, 0, 0, 0, 0, 0],
    # [ 0, 7, 0, 0, 9, 0, 2, 0, 0],
    # [ 0, 5, 0, 0, 0, 7, 0, 0, 0],
    # [ 0, 0, 0, 0, 4, 5, 7, 0, 0],
    # [ 0, 0, 0, 1, 0, 0, 0, 3, 0],
    # [ 0, 0, 1, 0, 0, 0, 0, 6, 8],
    # [ 0, 0, 8, 5, 0, 0, 0, 1, 0],
    # [ 0, 9, 0, 0, 0, 0, 4, 0, 0],

    [ 0, 0, 0, 5, 0, 4, 0, 6, 0],
    [ 5, 4, 3, 0, 0, 8, 0, 7, 0],
    [ 0, 8, 0, 0, 0, 0, 4, 0, 0],
    [ 0, 0, 0, 0, 6, 2, 0, 0, 0],
    [ 4, 0, 0, 8, 0, 0, 0, 0, 0],
    [ 1, 2, 6, 0, 0, 0, 3, 8, 0],
    [ 9, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 1],
] : N == 4 ? [
    [ 5, 0, 0, 0, 0, 0, 9,14,10, 2, 0, 0, 0, 0, 0, 3],
    [10, 0,16, 0,13, 4, 6, 0, 0,11, 3, 9, 0,14, 0, 1],
    [ 0,11,14,13,16, 0, 0, 1,12, 0, 0, 8, 4, 6, 9, 0],
    [ 3, 0, 9, 0, 8, 0, 0, 0, 0, 0, 0, 4, 0,10, 0,15],
    [ 8,12, 0, 0,14, 0, 0,10,13, 0, 0, 1, 0, 0, 6,16],
    [ 0, 0, 0,11, 0, 1, 7, 0, 0, 9, 8, 0,14, 0, 0, 0],
    [ 0,13, 1, 7, 0, 9, 0, 0, 0, 0,14, 0, 5, 2, 3, 0],
    [ 4, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,11],
    [ 6, 0, 0,10, 0, 0, 0, 0, 0, 0, 0, 0,11, 0, 0, 5],
    [ 0, 5,13,15, 0,16, 0, 0, 0, 0, 4, 0, 3, 1,14, 0],
    [ 0, 0, 0, 2, 0,15, 1, 0, 0,12,13, 0, 6, 0, 0, 0],
    [ 1, 4, 0, 0, 5, 0, 0,11, 9, 0, 0, 3, 0, 0,15,13],
    [ 2, 0,10, 0, 7, 0, 0, 0, 0, 0, 0,13, 0,11, 0, 8],
    [ 0, 8, 5,14, 1, 0, 0,12, 4, 0, 0,10, 2,16, 7, 0],
    [ 9, 0,15, 0, 3,10,14, 0, 0, 6,11,16, 0, 5, 0, 4],
    [12, 0, 0, 0, 0, 0,13,16, 1, 5, 0, 0, 0, 0, 0,14],
] : N == 5 ? [
    [ 0,12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0,15, 0, 0,22, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 9, 0,19, 0, 0, 0,10,11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 4, 0,22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0, 0,20,15, 1, 0, 0],
    [16, 1,20,15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14, 0, 4, 0,22,12,25, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 7, 2,11, 0,23, 0,19, 8, 0, 0, 0, 0,13, 0, 0, 0, 0, 0, 0],
    [13, 0, 8, 0, 2, 0, 0, 0, 0, 0, 0, 0, 7,23, 6, 0, 9, 0,19,11, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0,23, 0, 0, 0, 0,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [ 7, 0, 0, 0,10, 3, 0, 0, 0, 0, 0, 0, 9,19, 0, 0,13, 0,23, 0, 0, 0, 0, 5, 0],
    [ 0, 0, 0, 0, 0,15, 0, 0, 0,22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,25,20, 0, 0, 0],
    [ 0, 0, 0, 0, 0,12, 0,14, 1,25, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0,16, 4,15, 0, 0],
    [ 0, 0, 0, 0, 0, 0,19, 9, 0, 0, 0, 0,13, 7, 0, 0, 0, 0, 5, 0, 0, 0, 0,23,10],
    [ 0,22, 0,25,17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,12, 0,20, 0, 0, 0, 0, 0, 0, 0],
    [ 0,20,12,16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,14,15,22, 1, 0,25, 0, 0, 0, 0, 0],
    [ 0,15, 0, 0, 0, 0,11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,16, 0, 0, 0, 0, 0, 9, 0],
    [ 0, 0, 0, 1, 0, 0,10, 0,23, 0, 0, 0, 0, 0,18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8],
    [10, 0, 0, 0, 8, 0,13, 0, 5, 0, 0, 0, 0, 0, 0, 0,19, 0,11,23, 0, 0, 0, 6, 0],
    [ 0, 0, 0,17, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 4,22, 0, 0, 0],
    [ 0, 0, 0, 0,11, 0,23, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 2, 0,14, 0, 0, 0, 0],
    [19, 0,23, 0, 5, 0, 8, 0, 9, 0, 0,21, 0, 0, 0, 0,10, 0, 7, 0, 0, 0, 0, 0, 0],
    [ 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,25, 4, 0, 0,12, 0, 0, 0, 0, 0,15, 1,16, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0,15, 0,12, 0, 0,25, 1, 0,22, 0, 0, 3, 0, 0, 0, 0],
    [23, 0, 0, 0,19, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,10, 0, 0, 0, 0, 7,11],
    [ 0, 0, 0,18, 0, 0, 0, 0, 0, 0, 0,20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [ 0, 0, 0, 0, 0, 0, 0, 0, 0, 4,14,15, 0, 0,22, 0, 0, 0, 0, 0, 0, 0, 0,10, 0],
    [11, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,19, 0],
] : [];

var s = new Satisfiablity();

// Adding this restrictions makes a performance increase.
for (var v = 1; v <= R; ++v) {
    // Each number appears at least once in each row. (Row - definedness)
    for (var j = 0; j < R; ++j) {
        s.addClause(R.times().map { => ((_1 + j * R) * R) + v });
    }
    // Each number appears at least once in each column. (Column - definedness)
    for (var i = 0; i < R; ++i) {
        s.addClause(R.times().map { => ((i + _1 * R) * R) + v });
    }
}
for (var j = 0; j < R; ++j) {
    for (var i = 0; i < R; ++i) {
        const key = ((i + j * R) * R) + 1;
        var v = test[j][i];
        if (v == 0) {
            // There is at least one number in each cell. (Cell - definedness)
            s.addClause(R.times().map { => key + _1 });
        } else {
            s.addClause([ key + v - 1 ]);
        }
        R.times().each { => makeRestriction(s, i, j, _1 + 1) };
    }
}

/* Resolving */
display(test);
var tmr = new SystemTimer();
for (var e in s) {
    display(test, e);
}
System.println("elapsed: ", tmr.elapsed());
