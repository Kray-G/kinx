using SatisfiablitySolver;

const N = Integer.parseInt($$[1] || 3);
const P = Integer.parseInt($$[2] || 0);
var R = N * N;
var solution = 0;

function display(test, e) {
    var board = test.clone();
    if (e) {
        board = [];
        System.print("\nSolution %d\n" % ++solution);
        for (var key = 0, l = e.length(); key < l; ++key) {
            if (e[key] > 0) {
                var value = e[key];
                var v = value % R;
                var ij = Integer.parseInt((value-1) / R);
                var i = ij % R;
                var j = Integer.parseInt(ij / R);
                board[j][i] = v == 0 ? R : v;
            }
        }
    }
    for (var jx = 0; jx < R; ++jx) {
        if (jx % N == 0) System.println((("+" + ("-" * (3 * N + 1))) * N) + "+");
        for (var ix = 0; ix < R; ++ix) {
            if (ix % N == 0) System.print(ix == 0 ? "|" : " |");
            if (board[jx][ix]) {
                var v = ("%2d" % board[jx][ix]).format();
                if (e && test[jx][ix] > 0) {
                    System.print(" " + v.magenta().bold());
                } else {
                    System.print(" " + v);
                }
            } else {
                System.print("  .");
            }
        }
        System.println(" |");
    }
    System.println((("+" + ("-" * (3 * N + 1))) * N) + "+");
}

function makeRestriction(s, i, j, v) {
    const key = ((i + j * R) * R) + v;

    // There is at most one number in each cell. (Cell - uniqueness)
    for (var vi = 1; vi <= R; ++vi) {
        if (v != vi) {
            s.addClause([-key, -(((i + j * R) * R) + vi)]);
        }
    }

    // Each number appears at most once in each row. (Row - uniqueness)
    for (var ix = i + 1; ix < R; ++ix) {
        s.addClause([-key, -(((ix + j * R) * R) + v)]);
    }

    // Each number appears at most once in each column. (Column - uniqueness)
    for (var jx = j + 1; jx < R; ++jx) {
        s.addClause([-key, -(((i + jx * R) * R) + v)]);
    }

    var si = Integer.parseInt(i / N) * N;
    var sj = Integer.parseInt(j / N) * N;
    var ei = si + N;
    var ej = sj + N;
    // Each number appears at most once in each block. (Block - uniqueness)
    for (var ix = si; ix < ei; ++ix) {
        for (var jx = sj; jx < ej; ++jx) {
            const key2 = ((ix + jx * R) * R) + v;
            if (key2 > key) {
                s.addClause([-key, -key2]);
            }
        }
    }
}

function setup(test) {
    var s = new Satisfiablity();

    // Adding this restrictions makes a performance increase.
    for (var v = 1; v <= R; ++v) {
        // Each number appears at least once in each row. (Row - definedness)
        for (var j = 0; j < R; ++j) {
            s.addClause(R.times().map { => ((_1 + j * R) * R) + v });
        }
        // Each number appears at least once in each column. (Column - definedness)
        for (var i = 0; i < R; ++i) {
            s.addClause(R.times().map { => ((i + _1 * R) * R) + v });
        }
    }
    for (var j = 0; j < R; ++j) {
        for (var i = 0; i < R; ++i) {
            const key = ((i + j * R) * R) + 1;
            var v = test[j][i];
            if (v == 0) {
                // There is at least one number in each cell. (Cell - definedness)
                s.addClause(R.times().map { => key + _1 });
            } else {
                s.addClause([ key + v - 1 ]);
            }
            R.times().each { => makeRestriction(s, i, j, _1 + 1) };
        }
    }

    return s;
}

const _ = 0;    // fixed that `_` can be treated as a normal variable only when it is outside a function.
var test = (N == 3 ? [
    [
        [ _, _, _, _, _, _, _, 7, _],
        [ 1, _, 5, _, 3, 6, 4, _, 9],
        [ _, 7, 4, 9, _, _, 5, _, _],
        [ _, _, _, _, _, 5, 8, _, _],
        [ _, 1, _, 3, _, _, _, _, 5],
        [ 7, _, _, _, _, 8, 1, _, _],
        [ 6, 4, _, _, _, _, _, _, 7],
        [ _, 3, _, 6, 2, _, _, 8, 4],
        [ _, _, _, 5, 9, _, _, _, 3],
    ], [
        [ 8, 5, _, _, _, 2, 4, _, _],
        [ 7, 2, _, _, _, _, _, _, 9],
        [ _, _, 4, _, _, _, _, _, _],
        [ _, _, _, 1, _, 7, _, _, 2],
        [ 3, _, 5, _, _, _, 9, _, _],
        [ _, 4, _, _, _, _, _, _, _],
        [ _, _, _, _, 8, _, _, 7, _],
        [ _, 1, 7, _, _, _, _, _, _],
        [ _, _, _, _, 3, 6, _, 4, _],
    ], [
        [ 8, _, _, _, _, _, _, _, _],
        [ _, _, 3, 6, _, _, _, _, _],
        [ _, 7, _, _, 9, _, 2, _, _],
        [ _, 5, _, _, _, 7, _, _, _],
        [ _, _, _, _, 4, 5, 7, _, _],
        [ _, _, _, 1, _, _, _, 3, _],
        [ _, _, 1, _, _, _, _, 6, 8],
        [ _, _, 8, 5, _, _, _, 1, _],
        [ _, 9, _, _, _, _, 4, _, _],
    ]
] : N == 4 ? [
    [
        [ _, 2,14, _, _, _,16, 4, _, _, _, 1, _, _, 5, _],
        [ _, _, 9, _, _,10, _, 1, _, _, _, _, _, 4, _, _],
        [ _, _, _, _,13, 6, _, _, _,14, _, _,15,12, _,16],
        [ 6, 5,10, _, 8, 2, _, _, _,12, _, _, _, 1, _, 7],
        [ 9, _, 5, 4, 1, _, _, 2, _, _, _, _,12, _, 7, _],
        [ _, _, _, _,11, _, _,13, _, 3, _, _, _, _, _, 1],
        [ _, _, _, _,16, _, _, _,13,10,15, 9,14, _, 4, _],
        [10, _, _,11, _, 4, 8,15, _, _, _, _, 5, _,13, _],
        [ _,11, _, 1, _, _, _, _,10, 7, 4, _, 3, _, _, 6],
        [ _, 7, _, 2,14,16, 6,10, _, _, _,11, _, _, _, _],
        [16, _, _, _, _, _, 1, _,12, _, _,14, _, _, _, _],
        [ _, 4, _,10, _, _, _, _,15, _, _, 2,16, 5, _,11],
        [11, _,12, _, _, _,14, _, _, _,13, 7, _, 9, 6, 2],
        [ 8, _, 7, 9, _, _,11, _, _, _,14,10, _, _, _, _],
        [ _, _, 4, _, _, _, _, _,11, _, 2, _, _, 8, _, _],
        [ _, 6, _, _,12, _, _, _, 9, 8, _, _, _,14, 1, _],
    ], [
        [ 4, _, _, 1,11,16, _, _, _, _, 7, 2,15, _, _,13],
        [ _, 8, 3,12, _, _, 7,10, 5,13, _, _,11,14, 1, _],
        [ _,15, 7, _, _, _, 6,14, 3,11, _, _, _, 9,16, _],
        [10,11, _, _, _, 3, _, _, _, _,14, _, _, _, 5, 7],
        [14, _, _, _, _, 5, _, _, _, _,13, _, _, _, _,11],
        [15, _, _,11, 9, 2, _, _, _, _, 3, 1, 4, _, _, 5],
        [ _, 9, 1, _, _, _, 4, _, _, 5, _, _, _,13,15, _],
        [ _, 2, 6, _, _, _, _, 7,15, _, _, _, _, 8, 3, _],
        [ _,14, 2, _, _, _, _,13, 7, _, _, _, _, 4,11, _],
        [ _, 1, 5, _, _, _,11, _, _, 3, _, _, _,10, 7, _],
        [16, _, _, 7,14, 8, _, _, _, _, 9,11, 3, _, _, 1],
        [ 6, _, _, _, _,12, _, _, _, _, 5, _, _, _, _,14],
        [13, 5, _, _, _, 7, _, _, _, _, 6, _, _, _, 8, 3],
        [ _, 3,12, _, _, _, 5, 4,11, 2, _, _, _,16,14, _],
        [ _, 7, 9,14, _, _, 8, 6,16,10, _, _, 5, 1, 4, _],
        [ 2, _, _, 4, 3, 9, _, _, _, _,15, 5,10, _, _,12],
    ], [
        [ 5, _, _, _, _, _, 9,14,10, 2, _, _, _, _, _, 3],
        [10, _,16, _,13, 4, 6, _, _,11, 3, 9, _,14, _, 1],
        [ _,11,14,13,16, _, _, 1,12, _, _, 8, 4, 6, 9, _],
        [ 3, _, 9, _, 8, _, _, _, _, _, _, 4, _,10, _,15],
        [ 8,12, _, _,14, _, _,10,13, _, _, 1, _, _, 6,16],
        [ _, _, _,11, _, 1, 7, _, _, 9, 8, _,14, _, _, _],
        [ _,13, 1, 7, _, 9, _, _, _, _,14, _, 5, 2, 3, _],
        [ 4, _, _, 5, _, _, _, _, _, _, _, _, 1, _, _,11],
        [ 6, _, _,10, _, _, _, _, _, _, _, _,11, _, _, 5],
        [ _, 5,13,15, _,16, _, _, _, _, 4, _, 3, 1,14, _],
        [ _, _, _, 2, _,15, 1, _, _,12,13, _, 6, _, _, _],
        [ 1, 4, _, _, 5, _, _,11, 9, _, _, 3, _, _,15,13],
        [ 2, _,10, _, 7, _, _, _, _, _, _,13, _,11, _, 8],
        [ _, 8, 5,14, 1, _, _,12, 4, _, _,10, 2,16, 7, _],
        [ 9, _,15, _, 3,10,14, _, _, 6,11,16, _, 5, _, 4],
        [12, _, _, _, _, _,13,16, 1, 5, _, _, _, _, _,14],
    ]
] : N == 5 ? [
    [
        [ _, _,12, 6, _, _, 7, _,18, _, 5,24, _,10, 1, _, _, 4, _, _, _, _, _, _, _],
        [ 2, _,19, _,13, _, _, _,10, _, _, _, _, _, _, _, _,18, 5, _, _, _, _, _, 1],
        [ _, _, _, _, _, _, _,22, _, _, _, _, 3, _, 2, _, _,14,12, _,16, 8,25, _, _],
        [ _,16, _, _, _, 2,23, _, _,13,12,22, _, _, _,21,15,19, 3, _, _, _, _,14, _],
        [23, _,24, _, _, _, _, _,25, 8, 4, _,16,19,21, _, _, 7, _, _, _, 3,12, _, 9],
        [ _, 4, _, 2, _, _, _, _, _, _, _,10, _,24,12,17,16, _, _, _, 5, _, _, _, _],
        [ _, _, 9, _, _, 6,25, _, _, _, 8, _, 5, 3, _, _, _, _, _, _,20, _, _,18,19],
        [15, _,10,11, _, _, _,18,12,19, _, _, _, _, _, _, _,23, _, _, 7, _, _, 4, _],
        [ _, _, _, _, _, _, _,14, _,22, _, _,18,16,20, _, 6,11,13, _, _, _, _, _, _],
        [ _,22, _,25, _, _, 1,17, 5, 4, 7, _, _,14, _, 8, 3,21, _, _,11, _, _, _, 6],
        [ _,20,13,15, _, _, _, _, _, _, 9, _, _, 2, _,25, _, 1, 8, _, _, 5, _,21, _],
        [ _, 1, _, _, _, _,16,10, _, 7, _, _, 4,20, _, _, 9, _, _,14, _,24, _,17, _],
        [25, 2, 5, _, _, _, _, _,13, _, _, _, _, _,22, _, _, _, _, _,19, 1, 8, _, _],
        [ _, _, 7,21, _, _,12, _, 2,17, _, _, _,18, 6,16, _, _,15, _, _,13, _,10, _],
        [ 8,10,18,12,16, 9, _, _, _, 5, _, _, _, _,19, _, _,17, _,21, _,15, _, _,22],
        [ _, 8, _, _,15, _, 3, _, 6, _,21, _, _, 7, _,18,14, 5, _, 1, _, _, _, _, _],
        [ _, _, _,19, _, 1, _,16,11, _, _, _,10,22,25,15, _, _, _, _, _, _,21, _, _],
        [ _, 3, 1, _,21, _, _, 4, _, _, _, _, 2, _,13, _,24,25, _, _,14, _, _, 6, _],
        [ _, _, _, _, _, _, _,15, _,12,14, _, 6,17,24, _, _, _, _, _, _, _,13, _, _],
        [ _, 5,23,16, 4, _,13,24, 7, 2, _, 9, _, _,15, 3, _,22, _, _, _, _, _, _, 8],
        [ _, _,25,20, 2, _,19, _, _, _, _, 1, _, _, _, _,21, 3, _, _,12, _, _, _, _],
        [16,12, _, 5, _,11,21, _,23, _, _,15, _, _, _, _,19, 9, _, _, _, _, _,25,10],
        [ _, _, _, _, 9,20,22, 7, 4, _, 3, _,14,25,18, _,11, _, _, _, _, _, 1, _,15],
        [24, _, 6, _,22, 8, _,25,14, _,10,11, _, 9, _,20, 1,16, _, 7, _,23, _, _,13],
        [14,13,21, 1, _, _, 5, _, _, _, 6, _,22, _,23,10, _, _, _, 2, _, _,18, 7,11],
    ], [
        [16,23, 7, _, _,24, _, 4, _, _, _,10, _, _, _, 1, _,18, _, _, 8,21,14, _,17],
        [ _, _,20, _, _,19,15,16, _, _, _, _, _, 5,24, 4, _, 2,14,23, _, _,18, _, 7],
        [ 9, 2,12, _, _, _, _, _,20,11,13, _, _, 7, _, _, _, _, _, 6, _, _,10,25, 1],
        [ 4, _, _, _,19, _, _, _,14, _, 8, _, _,23,21,10, _, 9, 7,17, _, _, _, _, _],
        [18, _, _, _, _, _, 1,17,10, _,11,15,19, _, _,12, _,20, _, _, _,13, _, _, _],
        [ _, 7, 1, 3, _, _,12, _, _, _, _, _,16, _, _, 8,20,11, _, _, _, _, _, 9,21],
        [ _, 6, _,10, _, _, 2,21,18, _,12,19,23, _, _, _, _, _,24,16, 1, _, _,14, _],
        [ 8,20, _,18,16,11, _, _,24, _, 9, _, _, _, 3, _, _, _,22, _,12, _, _,10, 4],
        [ _, _, _, _, _, 1, _, _, 9,22, 4, _, _, _, _, _,17,23, 2, _,24, 8,13, _, _],
        [15,21, _,17, 9, 8, _, _, _, _, _,18, 7, 2, _, _, 1, _, _, _, _, _,19, _, _],
        [ _, 4, _,16, _, _, _,14, _, _, _,22, _,10, _, _,11,17, 8, _,21,24, 9, _, _],
        [ _,10,11,22, _, _, _, _, _,21,24, 3, _,17, 1, 7, _, _,18, _, 5, _, _, _,14],
        [ _, _, _, _,17,10, 4, _, _,20, _, _, _, _, _,25, _, _, 9, 5,16, _, _, _, _],
        [25, _, _, _, 6, _,16, _, _,19,14,13, _, 8, 9,23, _, _, _, _, _,12, 4,18, _],
        [ _, _,23,21,20, _, 7,18,13, _, _, 4, _, 6, _, _, _, 3, _, _, _,17, _,19, _],
        [ _, _,10, _, _, _, _, _,17, _, _, 7,14,12, _, _, _, _, _, 4,25,16, _,22,19],
        [ _, _,14,11,13, _,10,19,12, _, _, _, _, _,16,18,15, _, _, 7, _, _, _, _, _],
        [ 5,16, _, _,24, _,14, _, _, _,17, _, _, _,11, _,19, _, _, 1, 6,10, _, 4,18],
        [ _,18, _, _, 3,21,11, _, _, _, _, _, 6,13,22, _,25,24,10, _, _, 5, _,23, _],
        [12,19, _, _, _, _, _, 8, 2,23, _, _, 9, _, _, _, _, _, 6, _, _, 7,15,11, _],
        [ _, _, _, 9, _, _, _,12, _, 7, _, _,10,24,14, _, 5,19, 1, _, _, _, _, _,13],
        [ _, _, _, _, _,22,23,24, _,14,21,12, _, _,17, _, 9, _, _, _,10, _, _, _, 3],
        [23,25,18, _, _, 4, _, _, _, _, _, 9, _, _,20, 6,24, _, _, _, _, _,12, 1,16],
        [14, _,19, _, _,15, 3, 1, _, 9, 7, 5, _, _, _, _, _, 8,11,12, _, _,17, _, _],
        [11, _,16, 5, 1, _, _,13, _, 8, _, _, _,25, _, _, _,10, _,14, _, _,24, 2,23],
    ], [
        [ _,12, _, _, _, _, _, _, _, _, _, _, _, 9, _, _, _,15, _, _,22, _, _, _, _],
        [ _, _, _, _, _, _, 9, _,19, _, _, _,10,11, _, _, _, _, _, _, _, _, _, _, _],
        [ _, 4, _,22, _, _, _, _, _, _, _, _, _, _, _, _, _,12, _, _,20,15, 1, _, _],
        [16, 1,20,15, _, _, _, _, _, _, _, _, _, _, _,14, _, 4, _,22,12,25, _, _, _],
        [ _, _, _, _, _, _, 7, 2,11, _,23, _,19, 8, _, _, _, _,13, _, _, _, _, _, _],
        [13, _, 8, _, 2, _, _, _, _, _, _, _, 7,23, 6, _, 9, _,19,11, _, _, _, _, _],
        [ _, _, _, _,23, _, _, _, _,16, _, _, _, _, _, _, _, _, _, _, 1, _, _, _, _],
        [ 7, _, _, _,10, 3, _, _, _, _, _, _, 9,19, _, _,13, _,23, _, _, _, _, 5, _],
        [ _, _, _, _, _,15, _, _, _,22, _, _, _, _, _, _, _, _, _, _,25,20, _, _, _],
        [ _, _, _, _, _,12, _,14, 1,25, _, _, _, _, _, _, _, 3, _, _,16, 4,15, _, _],
        [ _, _, _, _, _, _,19, 9, _, _, _, _,13, 7, _, _, _, _, 5, _, _, _, _,23,10],
        [ _,22, _,25,17, _, _, _, _, _, _, _, _, _, _,12, _,20, _, _, _, _, _, _, _],
        [ _,20,12,16, _, _, _, _, _, _, _, _, _, _,14,15,22, 1, _,25, _, _, _, _, _],
        [ _,15, _, _, _, _,11, _, _, _, _, _, _, _, _, _, _,16, _, _, _, _, _, 9, _],
        [ _, _, _, 1, _, _,10, _,23, _, _, _, _, _,18, _, _, _, _, _, _, _, _, _, 8],
        [10, _, _, _, 8, _,13, _, 5, _, _, _, _, _, _, _,19, _,11,23, _, _, _, 6, _],
        [ _, _, _,17, 7, _, _, _, _, _, _, _, _, _, 1, _, _, _, _, _, 4,22, _, _, _],
        [ _, _, _, _,11, _,23, _, _, _, _, _, _, _,20, _, _, _, 2, _,14, _, _, _, _],
        [19, _,23, _, 5, _, 8, _, 9, _, _,21, _, _, _, _,10, _, 7, _, _, _, _, _, _],
        [ _, 3, _, _, _, _, _, _, _, _,25, 4, _, _,12, _, _, _, _, _,15, 1,16, _, _],
        [ _, _, _, _, _, _, _, _, _,15, _,12, _, _,25, 1, _,22, _, _, 3, _, _, _, _],
        [23, _, _, _,19, _, 2, _, _, _, _, _, _, _, _, _, _, _,10, _, _, _, _, 7,11],
        [ _, _, _,18, _, _, _, _, _, _, _,20, _, _, _, _, _, _, _, _, _, _, _, _, _],
        [ _, _, _, _, _, _, _, _, _, 4,14,15, _, _,22, _, _, _, _, _, _, _, _,10, _],
        [11, _, _, _, 9, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _, _,19, _],
    ]
] : [])[P];

if (!test) {
    System.println("No pattern you specified.");
    System.println("    [N] [pattern]");
    System.println("        N      : 3, 4, or 5 ... 3 by default");
    System.println("        pattern: 0, 1, or 2 ... 0 by default");
    System.println("    * N = 3 means 9x9 puzzle.");
    return 1;
}

System.println("[Selected] %dx%d - pattern %d" % R % R % P);
display(test);

System.println("\nSetting up...");
var tmr = new SystemTimer();
var s = setup(test);
System.println("[Setup] elapsed: ", tmr.elapsed());

/* Resolving */
tmr.restart();
for (var e in s) {
    display(test, e);
}
System.println("[Solved] elapsed: ", tmr.elapsed());
