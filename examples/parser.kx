using Parsec;

var $ = new Parsec();
var ignore = $.optWhitespace;
var lexeme = &(p) => p.skip(ignore);

var expression;
var number = lexeme($.regex(/[1-9][0-9]*|[0-9]/)).map(Integer.parseInt);
var addsub = lexeme($.oneOf('+-'));
var muldiv = lexeme($.oneOf('*/%'));
var lbr = lexeme($.token('('));
var rbr = lexeme($.token(')'));

var parenthesis = $.lazy(&() => $.seq(lbr, expression, rbr).map(&(value) => value[1]));

var factor = $.choice(number, parenthesis);
var term = $.seq(factor, $.seq(muldiv, factor).many()).map(&(value) => {
    var expr = value[0];
    for (var i = 1, l = value.length(); i < l; ++i) {
        expr = { lhs: expr, op: value[i][0], rhs: value[i][1] };
    }
    return expr;
});
expression = $.seq(term, $.seq(addsub, term).many()).map(&(value) => {
    var expr = value[0];
    for (var i = 1, l = value.length(); i < l; ++i) {
        expr = { lhs: expr, op: value[i][0], rhs: value[i][1] };
    }
    return expr;
});

var eval = function(ast) {
    var lhs = ast.lhs.isObject ? eval(ast.lhs) : ast.lhs;
    var rhs = ast.rhs.isObject ? eval(ast.rhs) : ast.rhs;
    var r = 0;
    switch (ast.op) {
    case '+':
        r = lhs + rhs;
        break;
    case '-':
        r = lhs - rhs;
        break;
    case '*':
        r = lhs * rhs;
        break;
    case '/':
        r = lhs / rhs;
        break;
    case '%':
        r = lhs % rhs;
        break;
    default:
        throw RuntimeException('Invalid operator');
    }
    return r;
};

var result = ignore.then(expression).parse('(( 123 ) * 2  * 4  - 3 * ( 12 + 10 )) % 100');
System.println(result.toJsonString(true));
System.println(eval(result.value));

