name: Installer Test

on: [push]

jobs:
  build-linux-amd64:
    name: ubuntu-18.04-gcc
    runs-on: ubuntu-18.04
    outputs:
      installer: ${{ steps.name.outputs.artifact }}
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          make
          sudo ./mkdeb.sh
          sudo make install
      - name: package
        run: |
          ref='${{ github.ref }}'
          tag=$(echo $ref | perl -e "print pop @{[split '/', <>]}")

          mkdir -p $tag/lib
          cp ./utility/install.sh $tag/install.sh
          cp /usr/bin/kinx $tag/kinx
          cp /usr/bin/kxrepl $tag/kxrepl
          cp /usr/bin/kxtest $tag/kxtest
          cp /usr/bin/kxkitty $tag/kxkitty
          cp -r /usr/bin/kinxlib/* $tag/lib
          tar zcvf linux-amd64.tar.gz $tag/
      - id: name
        name: Get Name of Artifact
        run: |
          pathname=$(ls kinx_*.deb | head -n 1)
          artifact=$(basename $pathname)
          echo "::set-output name=pathname::${pathname}"
          echo "::set-output name=artifact::${artifact}"
      - name: upload archive
        uses: actions/upload-artifact@v1
        with:
          name: build-linux-amd64
          path: linux-amd64.tar.gz
      - name: upload installer
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.name.outputs.artifact }}
          path: ${{ steps.name.outputs.artifact }}

  build-windows-x64:
    name: windows-2019-vc
    runs-on: windows-2019
    outputs:
      installer: ${{ steps.name.outputs.artifact }}
    steps:
      - uses: actions/checkout@v2
      - name: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          make.cmd
      - name: package
        shell: pwsh
        run: Compress-Archive -Path kinx.exe,kxrepl.exe,kxtest.exe,kxkitty.exe,kx.lib,*.dll,lib/ -DestinationPath windows-x64.zip -Force -Verbose
      - id: name
        name: Get Name of Artifact
        run: |
          for /f "usebackq" %I in (`dir /b Kinx_installer_*.exe`) do set artifact=%I
          echo "::set-output name=artifact::%artifact%"
      - name: upload archive
        uses: actions/upload-artifact@v1
        with:
          name: build-windows-x64
          path: windows-x64.zip
      - name: upload installer
        uses: actions/upload-artifact@v1
        with:
          name: ${{ steps.name.outputs.artifact }}
          path: ${{ steps.name.outputs.artifact }}

  package-kitty:
    name: package-kitty
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - name: build
        run: |
          sudo make kitty-install
      - name: package
        run: |
          ref='${{ github.ref }}'
          tag=$(echo $ref | perl -e "print pop @{[split '/', <>]}")

          mkdir -p $tag/lib/fonts
          mkdir -p $tag/lib/phantomjs
          cp -r /usr/bin/kinxlib/fonts/* $tag/lib/fonts
          cp -r /usr/bin/kinxlib/lib/phantomjs/* $tag/lib/phantomjs
          zip -r package-kitty.zip $tag/
      - name: upload archive
        uses: actions/upload-artifact@v1
        with:
          name: package-kitty
          path: package-kitty.zip

  release:
    name: release
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: true

  upload-assets:
    name: upload assets
    needs:
      - release
      - build-linux-amd64
      - build-windows-x64
      - package-kitty
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: [build-linux-amd64, build-windows-x64, build-linux-amd64-installer, build-windows-x64-installer, package-kitty]
        include:
          - job: build-linux-amd64
            asset_path: linux-amd64.tar.gz
            asset_name: package_linux-amd64.tar.gz
            content_type: application/gzip
          - job: build-windows-x64
            asset_path: windows-x64.zip
            asset_name: package_win64.zip
            content_type: application/zip
          - job: build-linux-amd64-installer
            asset_path: ${{ needs.build-linux-amd64.outputs.artifact }}
            asset_name: ${{ needs.build-linux-amd64.outputs.artifact }}
            content_type: application/vnd.debian.binary-package
          - job: build-windows-x64-installer
            asset_path: ${{ needs.build-windows-amd64.outputs.artifact }}
            asset_name: ${{ needs.build-windows-amd64.outputs.artifact }}
            content_type: application/vnd.microsoft.portable-executable
          - job: package-kitty
            asset_path: package-kitty.zip
            asset_name: package_kitty.zip
            content_type: application/zip
    steps:
      - name: download archive
        id: download_archive
        uses: actions/download-artifact@v1
        with:
          name: ${{ matrix.job }}
      - name: upload asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.release_url }}
          asset_path: ${{ matrix.job }}/${{ matrix.asset_path }}
          asset_name: ${{ matrix.asset_name }}
          asset_content_type: ${{ matrix.content_type }}
